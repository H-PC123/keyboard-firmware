
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00005496  0000552a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000135  00800134  00800134  0000555e  2**0
                  ALLOC
  3 .noinit       00000004  00800269  00800269  0000555e  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005560  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000007c  00000000  00000000  00005e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005e94  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ea8  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 000009e8  00000000  00000000  00005ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000119bf  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000049d0  00000000  00000000  0001828f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000845f  00000000  00000000  0001cc5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a50  00000000  00000000  000250c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000421f  00000000  00000000  00026b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008fe1  00000000  00000000  0002ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00033d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__ctors_end>
       4:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
       8:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
       c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      10:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      14:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      18:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      1c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      20:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      24:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      28:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__vector_10>
      2c:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__vector_11>
      30:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__vector_12>
      34:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      38:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      3c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      40:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      44:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      48:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      4c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      50:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      54:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__vector_21>
      58:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      5c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      60:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      64:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      68:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      6c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      70:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      74:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      78:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      7c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      80:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      84:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      88:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      8c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      90:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      94:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      98:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      9c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      a0:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      a4:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>
      a8:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__bad_interrupt>

000000ac <keymaps>:
      ac:	48 47 46 45 44 43 42 41 40 3f 3e 00 3d 3c 3b 3a     HGFEDCBA@?>.=<;:
      bc:	00 29 4b 4a 49 00 2a 2e 2d 27 26 25 24 23 22 21     .)KJI.*.-'&%$#"!
      cc:	20 1f 1e 35 4e 4d 4c 00 31 30 2f 13 12 0c 18 1c      ..5NML.10/.....
      dc:	17 15 08 1a 14 2b 00 00 00 00 28 00 34 33 0f 0e     .....+....(.43..
      ec:	0d 0b 0a 09 07 16 04 39 00 52 00 00 e1 00 38 37     .......9.R....87
      fc:	36 10 11 05 19 06 1b 1d 00 e5 4f 51 50 e4 76 00     6.........OQP.v.
     10c:	c0 e6 00 00 00 2c 00 00 e2 00 e3 e0 01 01 01 01     .....,..........
     11c:	01 01 01 01 01 01 01 00 01 01 01 01 00 01 01 01     ................
     12c:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     13c:	01 01 01 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     14c:	01 01 00 00 00 00 01 00 01 01 01 01 01 01 01 01     ................
     15c:	01 01 01 01 00 01 00 00 01 00 01 01 01 01 01 01     ................
     16c:	01 01 01 01 00 01 a9 01 aa 01 01 00 01 01 00 00     ................
     17c:	00 01 00 00 01 00 01 01                             ........

00000184 <__c.1891>:
     184:	0a 00                                               ..

00000186 <__c.1889>:
     186:	25 30 32 58 00                                      %02X.

0000018b <__c.1887>:
     18b:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000195 <__c.4928>:
     195:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     1a5:	00                                                  .

000001a6 <__c.4926>:
     1a6:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1b6:	00                                                  .

000001b7 <__c.4921>:
     1b7:	0d 0a 69 6e 69 74 0a 00                             ..init..

000001bf <__c.4819>:
     1bf:	5b 44 5d 00                                         [D].

000001c3 <__c.4814>:
     1c3:	5b 43 5d 00                                         [C].

000001c7 <ProductString>:
     1c7:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

000001d3 <ManufacturerString>:
     1d3:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     1e3:	6b 00 00 00                                         k...

000001e7 <LanguageString>:
     1e7:	04 03 09 04                                         ....

000001eb <ConfigurationDescriptor>:
     1eb:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     1fb:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     20b:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     21b:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     22b:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     23b:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     24b:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     25b:	03 20 00 01                                         . ..

0000025f <DeviceDescriptor>:
     25f:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     26f:	00 01                                               ..

00000271 <ConsoleReport>:
     271:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     281:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     291:	02 c0                                               ..

00000293 <ExtrakeyReport>:
     293:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     2a3:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2b3:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2c3:	10 95 01 81 00 c0                                   ......

000002c9 <MouseReport>:
     2c9:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     2d9:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     2e9:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     2f9:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     309:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000316 <KeyboardReport>:
     316:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     326:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     336:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     346:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000356 <__c.2088>:
     356:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000366 <__c.2083>:
     366:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000374 <__c.2075>:
     374:	0a 00                                               ..

00000376 <__c.2070>:
     376:	25 30 32 58 20 00                                   %02X .

0000037c <__c.2067>:
     37c:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000387 <__c.2431>:
     387:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000392 <__c.1747>:
     392:	25 30 32 58 3a 20 25 30 33 32 62 25 73 0a 00        %02X: %032b%s..

000003a1 <__c.1744>:
     3a1:	72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41 42     r/c 0123456789AB
     3b1:	43 44 45 46 30 31 32 33 34 35 36 37 38 39 41 42     CDEF0123456789AB
     3c1:	43 44 45 46 0a 00                                   CDEF..

000003c7 <__c.2510>:
     3c7:	64 6f 6e 65 2e 0a 00                                done...

000003ce <__c.2504>:
     3ce:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     3de:	2e 2e 2e 20 00                                      ... .

000003e3 <__c.2148>:
     3e3:	29 0a 00                                            )..

000003e6 <__c.2146>:
     3e6:	25 75 00                                            %u.

000003e9 <__c.2144>:
     3e9:	2f 00                                               /.

000003eb <__c.2142>:
     3eb:	25 75 00                                            %u.

000003ee <__c.2140>:
     3ee:	5d 28 00                                            ](.

000003f1 <__c.2138>:
     3f1:	25 64 00                                            %d.

000003f4 <__c.2136>:
     3f4:	20 00                                                .

000003f6 <__c.2134>:
     3f6:	25 64 00                                            %d.

000003f9 <__c.2132>:
     3f9:	20 00                                                .

000003fb <__c.2130>:
     3fb:	25 64 00                                            %d.

000003fe <__c.2128>:
     3fe:	20 00                                                .

00000400 <__c.2126>:
     400:	25 64 00                                            %d.

00000403 <__c.2124>:
     403:	7c 00                                               |.

00000405 <__c.2122>:
     405:	25 30 32 58 00                                      %02X.

0000040a <__c.2120>:
     40a:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     41a:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     42a:	20 5b 00                                             [.

0000042d <__c.2876>:
     42d:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     43d:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000448 <__c.2873>:
     448:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     458:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000461 <__c.2870>:
     461:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     471:	20 25 64 0a 00                                       %d..

00000476 <__c.2867>:
     476:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     486:	64 0a 00                                            d..

00000489 <__c.2864>:
     489:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     499:	0a 00                                               ..

0000049b <__c.2860>:
     49b:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000004aa <__c.2853>:
     4aa:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     4ba:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004c5 <__c.2850>:
     4c5:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4d5:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004de <__c.2847>:
     4de:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4ee:	20 25 64 0a 00                                       %d..

000004f3 <__c.2844>:
     4f3:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     503:	64 0a 00                                            d..

00000506 <__c.2841>:
     506:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     516:	0a 00                                               ..

00000518 <__c.2837>:
     518:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000527 <__c.2830>:
     527:	0a 00                                               ..

00000529 <__c.2828>:
     529:	25 75 00                                            %u.

0000052c <__c.2826>:
     52c:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     53c:	5f 6d 61 78 3a 20 00                                _max: .

00000543 <__c.2824>:
     543:	0a 00                                               ..

00000545 <__c.2822>:
     545:	25 75 00                                            %u.

00000548 <__c.2820>:
     548:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     558:	65 64 3a 20 00                                      ed: .

0000055d <__c.2818>:
     55d:	0a 00                                               ..

0000055f <__c.2816>:
     55f:	25 75 00                                            %u.

00000562 <__c.2814>:
     562:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     572:	00                                                  .

00000573 <__c.2812>:
     573:	0a 00                                               ..

00000575 <__c.2810>:
     575:	25 75 00                                            %u.

00000578 <__c.2808>:
     578:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000587 <__c.2806>:
     587:	0a 00                                               ..

00000589 <__c.2804>:
     589:	25 75 00                                            %u.

0000058c <__c.2802>:
     58c:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     59c:	20 00                                                .

0000059e <__c.2800>:
     59e:	0a 00                                               ..

000005a0 <__c.2798>:
     5a0:	25 75 00                                            %u.

000005a3 <__c.2796>:
     5a3:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     5b3:	20 00                                                .

000005b5 <__c.2794>:
     5b5:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005c3 <__c.2914>:
     5c3:	4d 3e 00                                            M>.

000005c6 <__c.2912>:
     5c6:	4d 25 64 3e 20 00                                   M%d> .

000005cc <__c.2910>:
     5cc:	3f 00                                               ?.

000005ce <__c.2907>:
     5ce:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005db <__c.2893>:
     5db:	43 3e 20 00                                         C> .

000005df <__c.2883>:
     5df:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     5ef:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     5ff:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     60f:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     61f:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000062d <__c.2881>:
     62d:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     63d:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     64d:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     65d:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     66d:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     67d:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     68d:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     69d:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     6ad:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     6bd:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     6cd:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     6dd:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     6ed:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     6fd:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     70d:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     71d:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000728 <__c.2786>:
     728:	3f 00                                               ?.

0000072a <__c.2783>:
     72a:	4d 3e 20 00                                         M> .

0000072e <__c.2788>:
     72e:	43 3e 20 00                                         C> .

00000732 <__c.2932>:
     732:	4c 25 64 0a 00                                      L%d..

00000737 <__c.2772>:
     737:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     747:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     757:	73 65 6b 65 79 0a 00                                sekey..

0000075e <__c.2604>:
     75e:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     76e:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     77e:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     78e:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     79e:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     7ae:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     7be:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7ce:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7de:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     7ee:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

000007fb <__c.2699>:
     7fb:	0a 00                                               ..

000007fd <__c.2697>:
     7fd:	25 75 00                                            %u.

00000800 <__c.2695>:
     800:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000808 <__c.2693>:
     808:	0a 00                                               ..

0000080a <__c.2691>:
     80a:	25 75 00                                            %u.

0000080d <__c.2689>:
     80d:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     81d:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000829 <__c.2687>:
     829:	0a 00                                               ..

0000082b <__c.2685>:
     82b:	25 75 00                                            %u.

0000082e <__c.2683>:
     82e:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     83e:	20 00                                                .

00000840 <__c.2681>:
     840:	0a 00                                               ..

00000842 <__c.2679>:
     842:	25 75 00                                            %u.

00000845 <__c.2677>:
     845:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

0000084f <__c.2675>:
     84f:	0a 00                                               ..

00000851 <__c.2673>:
     851:	25 75 00                                            %u.

00000854 <__c.2671>:
     854:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     864:	20 00                                                .

00000866 <__c.2669>:
     866:	0a 00                                               ..

00000868 <__c.2667>:
     868:	25 75 00                                            %u.

0000086b <__c.2665>:
     86b:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     87b:	20 00                                                .

0000087d <__c.2663>:
     87d:	0a 00                                               ..

0000087f <__c.2661>:
     87f:	25 75 00                                            %u.

00000882 <__c.2659>:
     882:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     892:	74 72 6f 6c 3a 20 00                                trol: .

00000899 <__c.2657>:
     899:	0a 00                                               ..

0000089b <__c.2655>:
     89b:	25 75 00                                            %u.

0000089e <__c.2653>:
     89e:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     8ae:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

000008b7 <__c.2651>:
     8b7:	0a 00                                               ..

000008b9 <__c.2649>:
     8b9:	25 30 32 58 00                                      %02X.

000008be <__c.2647>:
     8be:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     8ce:	77 3a 20 00                                         w: .

000008d2 <__c.2644>:
     8d2:	0a 00                                               ..

000008d4 <__c.2642>:
     8d4:	25 75 00                                            %u.

000008d7 <__c.2640>:
     8d7:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000008e0 <__c.2638>:
     8e0:	0a 00                                               ..

000008e2 <__c.2636>:
     8e2:	25 75 00                                            %u.

000008e5 <__c.2634>:
     8e5:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000008f1 <__c.2632>:
     8f1:	0a 00                                               ..

000008f3 <__c.2630>:
     8f3:	25 75 00                                            %u.

000008f6 <__c.2628>:
     8f6:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000900 <__c.2626>:
     900:	0a 00                                               ..

00000902 <__c.2624>:
     902:	25 75 00                                            %u.

00000905 <__c.2622>:
     905:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

0000090f <__c.2620>:
     90f:	0a 00                                               ..

00000911 <__c.2618>:
     911:	25 30 32 58 00                                      %02X.

00000916 <__c.2616>:
     916:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     926:	3a 20 00                                            : .

00000929 <__c.2613>:
     929:	0a 00                                               ..

0000092b <__c.2611>:
     92b:	25 75 00                                            %u.

0000092e <__c.2609>:
     92e:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

0000093e <__c.2767>:
     93e:	3f 00                                               ?.

00000940 <__c.2758>:
     940:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     950:	25 30 34 6c 58 0a 00                                %04lX..

00000957 <__c.2756>:
     957:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     967:	58 0a 00                                            X..

0000096a <__c.2754>:
     96a:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     97a:	6c 3a 20 25 58 0a 00                                l: %X..

00000981 <__c.2752>:
     981:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     991:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

0000099b <__c.2750>:
     99b:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000009a9 <__c.2747>:
     9a9:	47 43 43 3a 20 37 2e 32 2e 30 20 41 56 52 2d 4c     GCC: 7.2.0 AVR-L
     9b9:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     9c9:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000009d4 <__c.2745>:
     9d4:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     9e4:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     9f4:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     a04:	45 20 43 4f 4d 4d 41 4e 44 20 34 30 39 36 0a 00     E COMMAND 4096..

00000a14 <__c.2743>:
     a14:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     a24:	30 31 3a 30 35 3a 34 37 20 41 75 67 20 32 38 20     01:05:47 Aug 28 
     a34:	32 30 31 37 29 0a 00                                2017)..

00000a3b <__c.2741>:
     a3b:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     a4b:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     a5b:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     a6b:	30 30 31 0a 00                                      001..

00000a70 <__c.2739>:
     a70:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     a80:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     a90:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000a99 <__c.2737>:
     a99:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000aa8 <__c.2734>:
     aa8:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000ab5 <__c.2732>:
     ab5:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000ac1 <__c.2729>:
     ac1:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000ad1 <__c.2727>:
     ad1:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000ae0 <__c.2724>:
     ae0:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000aee <__c.2722>:
     aee:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000afb <__c.2719>:
     afb:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000b07 <__c.2717>:
     b07:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000b14 <__c.2714>:
     b14:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     b24:	00                                                  .

00000b25 <__c.2711>:
     b25:	43 3e 20 00                                         C> .

00000b29 <__c.2705>:
     b29:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000b34 <__ctors_end>:
     b34:	11 24       	eor	r1, r1
     b36:	1f be       	out	0x3f, r1	; 63
     b38:	cf ef       	ldi	r28, 0xFF	; 255
     b3a:	da e0       	ldi	r29, 0x0A	; 10
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	cd bf       	out	0x3d, r28	; 61

00000b40 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     b40:	04 b6       	in	r0, 0x34	; 52
     b42:	03 fe       	sbrs	r0, 3
     b44:	27 c0       	rjmp	.+78     	; 0xb94 <__do_copy_data>
     b46:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <__bss_end>
     b4a:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <__bss_end+0x1>
     b4e:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <__bss_end+0x2>
     b52:	b0 91 6c 02 	lds	r27, 0x026C	; 0x80026c <__bss_end+0x3>
     b56:	87 30       	cpi	r24, 0x07	; 7
     b58:	90 4b       	sbci	r25, 0xB0	; 176
     b5a:	a7 40       	sbci	r26, 0x07	; 7
     b5c:	b0 4b       	sbci	r27, 0xB0	; 176
     b5e:	d1 f4       	brne	.+52     	; 0xb94 <__do_copy_data>
        reset_key = 0;
     b60:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__bss_end>
     b64:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <__bss_end+0x1>
     b68:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <__bss_end+0x2>
     b6c:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     b70:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     b72:	84 b7       	in	r24, 0x34	; 52
     b74:	87 7f       	andi	r24, 0xF7	; 247
     b76:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	a8 95       	wdr
     b7e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b82:	88 61       	ori	r24, 0x18	; 24
     b84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b88:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b8c:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     b8e:	e0 e0       	ldi	r30, 0x00	; 0
     b90:	f8 e3       	ldi	r31, 0x38	; 56
     b92:	09 95       	icall

00000b94 <__do_copy_data>:
     b94:	11 e0       	ldi	r17, 0x01	; 1
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	b1 e0       	ldi	r27, 0x01	; 1
     b9a:	e6 e9       	ldi	r30, 0x96	; 150
     b9c:	f4 e5       	ldi	r31, 0x54	; 84
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <__do_copy_data+0x10>
     ba0:	05 90       	lpm	r0, Z+
     ba2:	0d 92       	st	X+, r0
     ba4:	a4 33       	cpi	r26, 0x34	; 52
     ba6:	b1 07       	cpc	r27, r17
     ba8:	d9 f7       	brne	.-10     	; 0xba0 <__do_copy_data+0xc>

00000baa <__do_clear_bss>:
     baa:	22 e0       	ldi	r18, 0x02	; 2
     bac:	a4 e3       	ldi	r26, 0x34	; 52
     bae:	b1 e0       	ldi	r27, 0x01	; 1
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <.do_clear_bss_start>

00000bb2 <.do_clear_bss_loop>:
     bb2:	1d 92       	st	X+, r1

00000bb4 <.do_clear_bss_start>:
     bb4:	a9 36       	cpi	r26, 0x69	; 105
     bb6:	b2 07       	cpc	r27, r18
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <.do_clear_bss_loop>
     bba:	0e 94 b9 0a 	call	0x1572	; 0x1572 <main>
     bbe:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <_exit>

00000bc2 <__bad_interrupt>:
     bc2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bc6 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     bc6:	ff 93       	push	r31
	push	ZL
     bc8:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     bca:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <__data_end>
	lds	ZH, xfunc_out+1	;/
     bce:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     bd2:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <xputc+0x12>
	icall
     bd6:	09 95       	icall
2:	pop	ZL
     bd8:	ef 91       	pop	r30
	pop	ZH
     bda:	ff 91       	pop	r31
	ret
     bdc:	08 95       	ret

00000bde <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     bde:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     be0:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     be2:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     be4:	11 f0       	breq	.+4      	; 0xbea <xputs+0xc>
	rcall	xputc
     be6:	ef df       	rcall	.-34     	; 0xbc6 <xputc>
	rjmp	1b
     be8:	fb cf       	rjmp	.-10     	; 0xbe0 <xputs+0x2>
2:	ret
     bea:	08 95       	ret

00000bec <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     bec:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     bee:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     bf0:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     bf2:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     bf4:	0c c0       	rjmp	.+24     	; 0xc0e <xitoa+0x22>
	neg	r20		;
     bf6:	41 95       	neg	r20
	sbrs	r25, 7		;
     bf8:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     bfa:	09 c0       	rjmp	.+18     	; 0xc0e <xitoa+0x22>
	ldi	r30, '-'	;
     bfc:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     bfe:	60 95       	com	r22
	com	r23		;
     c00:	70 95       	com	r23
	com	r24		;
     c02:	80 95       	com	r24
	com	r25		;
     c04:	90 95       	com	r25
	adc	r22, r1		;
     c06:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     c08:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     c0a:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     c0c:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     c0e:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <xitoa+0x2a>
	neg	r18		;
     c12:	21 95       	neg	r18
	ldi	r19, '0'	;/
     c14:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     c16:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     c18:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     c1a:	66 0f       	add	r22, r22
	rol	r23		;
     c1c:	77 1f       	adc	r23, r23
	rol	r24		;
     c1e:	88 1f       	adc	r24, r24
	rol	r25		;
     c20:	99 1f       	adc	r25, r25
	rol	r26		;
     c22:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     c24:	a4 17       	cp	r26, r20
	brcs	3f		;
     c26:	10 f0       	brcs	.+4      	; 0xc2c <xitoa+0x40>
	sub	r26, r20	;
     c28:	a4 1b       	sub	r26, r20
	inc	r22		;
     c2a:	63 95       	inc	r22
3:	dec	r21		;
     c2c:	5a 95       	dec	r21
	brne	2b		;/
     c2e:	a9 f7       	brne	.-22     	; 0xc1a <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     c30:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     c32:	08 f0       	brcs	.+2      	; 0xc36 <xitoa+0x4a>
	subi	r26, -7		;
     c34:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     c36:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     c38:	af 93       	push	r26
	inc	r31		;/
     c3a:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     c3c:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     c3e:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     c40:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     c42:	91 05       	cpc	r25, r1
	brne	1b		;/
     c44:	41 f7       	brne	.-48     	; 0xc16 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     c46:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     c48:	11 f4       	brne	.+4      	; 0xc4e <xitoa+0x62>
	push	r30		;
     c4a:	ef 93       	push	r30
	inc	r31		;/
     c4c:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     c4e:	f2 17       	cp	r31, r18
	brcc	6f		;
     c50:	18 f4       	brcc	.+6      	; 0xc58 <xitoa+0x6c>
	push	r19		;
     c52:	3f 93       	push	r19
	inc	r31		;
     c54:	f3 95       	inc	r31
	rjmp	5b		;/
     c56:	fb cf       	rjmp	.-10     	; 0xc4e <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     c58:	8f 91       	pop	r24
	rcall	xputc		;
     c5a:	b5 df       	rcall	.-150    	; 0xbc6 <xputc>
	dec	r31		;
     c5c:	fa 95       	dec	r31
	brne	6b		;/
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <xitoa+0x6c>

	ret
     c60:	08 95       	ret

00000c62 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     c62:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     c64:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     c66:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     c68:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     c6a:	21 f0       	breq	.+8      	; 0xc74 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     c6c:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     c6e:	19 f0       	breq	.+6      	; 0xc76 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     c70:	aa df       	rcall	.-172    	; 0xbc6 <xputc>
	rjmp	0b		;/
     c72:	f9 cf       	rjmp	.-14     	; 0xc66 <xvprintf+0x4>
90:	ret
     c74:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     c76:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     c78:	e8 94       	clt
	_LPMI	r21		;Get flags
     c7a:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     c7c:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     c7e:	c1 f3       	breq	.-16     	; 0xc70 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     c80:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     c82:	11 f4       	brne	.+4      	; 0xc88 <xvprintf+0x26>
	set			;/
     c84:	68 94       	set
22:	_LPMI	r21		;Get width
     c86:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     c88:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     c8a:	48 f4       	brcc	.+18     	; 0xc9e <xvprintf+0x3c>
	subi	r21, '0'	;
     c8c:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     c8e:	90 f3       	brcs	.-28     	; 0xc74 <xvprintf+0x12>
	lsl	r18		;
     c90:	22 0f       	add	r18, r18
	mov	r0, r18		;
     c92:	02 2e       	mov	r0, r18
	lsl	r18		;
     c94:	22 0f       	add	r18, r18
	lsl	r18		;
     c96:	22 0f       	add	r18, r18
	add	r18, r0		;
     c98:	20 0d       	add	r18, r0
	add	r18, r21	;
     c9a:	25 0f       	add	r18, r21
	rjmp	22b		;/
     c9c:	f4 cf       	rjmp	.-24     	; 0xc86 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     c9e:	0e f4       	brtc	.+2      	; 0xca2 <xvprintf+0x40>
	neg	r18		;
     ca0:	21 95       	neg	r18
25:	ld	r24, Y+		;
     ca2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     ca4:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     ca6:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     ca8:	19 f3       	breq	.-58     	; 0xc70 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     caa:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     cac:	29 f1       	breq	.+74     	; 0xcf8 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     cae:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     cb0:	59 f1       	breq	.+86     	; 0xd08 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     cb2:	bc 01       	movw	r22, r24
	clr	r24		;
     cb4:	88 27       	eor	r24, r24
	clr	r25		;
     cb6:	99 27       	eor	r25, r25
	clt			;/
     cb8:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     cba:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     cbc:	21 f4       	brne	.+8      	; 0xcc6 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     cbe:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     cc0:	99 91       	ld	r25, Y+
	set			;
     cc2:	68 94       	set
	_LPMI	r21		;/
     cc4:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     cc6:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     cc8:	39 f4       	brne	.+14     	; 0xcd8 <xvprintf+0x76>
	ldi	r20, -10	;
     cca:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     ccc:	7e f0       	brts	.+30     	; 0xcec <xvprintf+0x8a>
	sbrs	r23, 7		;
     cce:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     cd0:	0d c0       	rjmp	.+26     	; 0xcec <xvprintf+0x8a>
	ldi	r24, -1		;
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     cd6:	0a c0       	rjmp	.+20     	; 0xcec <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     cd8:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     cda:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     cdc:	39 f0       	breq	.+14     	; 0xcec <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     cde:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     ce0:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     ce2:	21 f0       	breq	.+8      	; 0xcec <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     ce4:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     ce6:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     ce8:	09 f0       	breq	.+2      	; 0xcec <xvprintf+0x8a>
	ret			;abort
     cea:	08 95       	ret
40:	push	ZH		;Output the value
     cec:	ff 93       	push	r31
	push	ZL		;
     cee:	ef 93       	push	r30
	rcall	xitoa		;
     cf0:	7d df       	rcall	.-262    	; 0xbec <xitoa>
42:	pop	ZL		;
     cf2:	ef 91       	pop	r30
	pop	ZH		;
     cf4:	ff 91       	pop	r31
	rjmp	0b		;/
     cf6:	b7 cf       	rjmp	.-146    	; 0xc66 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     cf8:	ff 93       	push	r31
	push	ZL
     cfa:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     cfc:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     cfe:	81 91       	ld	r24, Z+
	cpi	r24, 0
     d00:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     d02:	b9 f3       	breq	.-18     	; 0xcf2 <xvprintf+0x90>
	rcall	xputc
     d04:	60 df       	rcall	.-320    	; 0xbc6 <xputc>
	rjmp	51b
     d06:	fb cf       	rjmp	.-10     	; 0xcfe <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     d08:	ff 93       	push	r31
	push	ZL
     d0a:	ef 93       	push	r30
	rcall	xputs
     d0c:	68 df       	rcall	.-304    	; 0xbde <xputs>
	rjmp	42b
     d0e:	f1 cf       	rjmp	.-30     	; 0xcf2 <xvprintf+0x90>

00000d10 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     d10:	df 93       	push	r29
	push	YL
     d12:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     d14:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     d16:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     d18:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     d1a:	a3 df       	rcall	.-186    	; 0xc62 <xvprintf>
	pop	YL
     d1c:	cf 91       	pop	r28
	pop	YH
     d1e:	df 91       	pop	r29
	ret
     d20:	08 95       	ret

00000d22 <unselect_rows>:
 * pin: F0  F1  F4  F5  F6	F7	
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b11110011;
     d22:	80 b3       	in	r24, 0x10	; 16
     d24:	8c 70       	andi	r24, 0x0C	; 12
     d26:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b11110011;
     d28:	81 b3       	in	r24, 0x11	; 17
     d2a:	8c 70       	andi	r24, 0x0C	; 12
     d2c:	81 bb       	out	0x11, r24	; 17
}
     d2e:	08 95       	ret

00000d30 <matrix_init>:
    MCUCR |= (1<<JTD);
     d30:	85 b7       	in	r24, 0x35	; 53
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1<<JTD);
     d36:	85 b7       	in	r24, 0x35	; 53
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	85 bf       	out	0x35, r24	; 53
    unselect_rows();
     d3c:	0e 94 91 06 	call	0xd22	; 0xd22 <unselect_rows>
    DDRB  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d40:	84 b1       	in	r24, 0x04	; 4
     d42:	14 b8       	out	0x04, r1	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d44:	85 b1       	in	r24, 0x05	; 5
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d4a:	8a b1       	in	r24, 0x0a	; 10
     d4c:	80 74       	andi	r24, 0x40	; 64
     d4e:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d50:	8b b1       	in	r24, 0x0b	; 11
     d52:	8f 6b       	ori	r24, 0xBF	; 191
     d54:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     d56:	87 b1       	in	r24, 0x07	; 7
     d58:	8f 73       	andi	r24, 0x3F	; 63
     d5a:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     d5c:	88 b1       	in	r24, 0x08	; 8
     d5e:	80 6c       	ori	r24, 0xC0	; 192
     d60:	88 b9       	out	0x08, r24	; 8
    DDRE  &= ~(1<<6);
     d62:	6e 98       	cbi	0x0d, 6	; 13
    PORTE |=  (1<<6);
     d64:	76 9a       	sbi	0x0e, 6	; 14
     d66:	ee e4       	ldi	r30, 0x4E	; 78
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	a6 e3       	ldi	r26, 0x36	; 54
     d6c:	b1 e0       	ldi	r27, 0x01	; 1
        matrix[i] = 0;
     d6e:	11 92       	st	Z+, r1
     d70:	11 92       	st	Z+, r1
     d72:	11 92       	st	Z+, r1
     d74:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     d76:	1d 92       	st	X+, r1
     d78:	1d 92       	st	X+, r1
     d7a:	1d 92       	st	X+, r1
     d7c:	1d 92       	st	X+, r1
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	e6 36       	cpi	r30, 0x66	; 102
     d82:	f8 07       	cpc	r31, r24
     d84:	a1 f7       	brne	.-24     	; 0xd6e <matrix_init+0x3e>
}
     d86:	08 95       	ret

00000d88 <matrix_scan>:
{
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	c6 e3       	ldi	r28, 0x36	; 54
     d94:	d1 e0       	ldi	r29, 0x01	; 1
     d96:	7e 01       	movw	r14, r28
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     d98:	10 e0       	ldi	r17, 0x00	; 0

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     d9a:	13 30       	cpi	r17, 0x03	; 3
     d9c:	09 f4       	brne	.+2      	; 0xda0 <matrix_scan+0x18>
     d9e:	2b c1       	rjmp	.+598    	; 0xff6 <matrix_scan+0x26e>
     da0:	08 f0       	brcs	.+2      	; 0xda4 <matrix_scan+0x1c>
     da2:	1b c1       	rjmp	.+566    	; 0xfda <matrix_scan+0x252>
     da4:	11 30       	cpi	r17, 0x01	; 1
     da6:	09 f4       	brne	.+2      	; 0xdaa <matrix_scan+0x22>
     da8:	20 c1       	rjmp	.+576    	; 0xfea <matrix_scan+0x262>
     daa:	12 30       	cpi	r17, 0x02	; 2
     dac:	09 f4       	brne	.+2      	; 0xdb0 <matrix_scan+0x28>
     dae:	20 c1       	rjmp	.+576    	; 0xff0 <matrix_scan+0x268>
        case 0:
            DDRF  |= (1<<0);
     db0:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
     db2:	88 98       	cbi	0x11, 0	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     db4:	80 ea       	ldi	r24, 0xA0	; 160
     db6:	8a 95       	dec	r24
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <matrix_scan+0x2e>
    return (PINB&(1<<6) ? 0 : (1UL<<0)) |
     dba:	83 b1       	in	r24, 0x03	; 3
     dbc:	82 95       	swap	r24
     dbe:	86 95       	lsr	r24
     dc0:	86 95       	lsr	r24
     dc2:	83 70       	andi	r24, 0x03	; 3
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	89 27       	eor	r24, r25
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	a0 e0       	ldi	r26, 0x00	; 0
     dce:	81 70       	andi	r24, 0x01	; 1
     dd0:	99 27       	eor	r25, r25
     dd2:	aa 27       	eor	r26, r26
     dd4:	bb 27       	eor	r27, r27
           (PINB&(1<<5) ? 0 : (1UL<<1)) |
     dd6:	1d 99       	sbic	0x03, 5	; 3
     dd8:	14 c1       	rjmp	.+552    	; 0x1002 <matrix_scan+0x27a>
     dda:	42 e0       	ldi	r20, 0x02	; 2
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
    return (PINB&(1<<6) ? 0 : (1UL<<0)) |
     de2:	84 2b       	or	r24, r20
     de4:	95 2b       	or	r25, r21
     de6:	a6 2b       	or	r26, r22
     de8:	b7 2b       	or	r27, r23
           (PINB&(1<<4) ? 0 : (1UL<<2)) |
     dea:	1c 99       	sbic	0x03, 4	; 3
     dec:	0e c1       	rjmp	.+540    	; 0x100a <matrix_scan+0x282>
     dee:	44 e0       	ldi	r20, 0x04	; 4
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<5) ? 0 : (1UL<<1)) |
     df6:	84 2b       	or	r24, r20
     df8:	95 2b       	or	r25, r21
     dfa:	a6 2b       	or	r26, r22
     dfc:	b7 2b       	or	r27, r23
           (PIND&(1<<7) ? 0 : (1UL<<3)) |
     dfe:	4f 99       	sbic	0x09, 7	; 9
     e00:	08 c1       	rjmp	.+528    	; 0x1012 <matrix_scan+0x28a>
     e02:	48 e0       	ldi	r20, 0x08	; 8
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<4) ? 0 : (1UL<<2)) |
     e0a:	84 2b       	or	r24, r20
     e0c:	95 2b       	or	r25, r21
     e0e:	a6 2b       	or	r26, r22
     e10:	b7 2b       	or	r27, r23
           (PIND&(1<<4) ? 0 : (1UL<<4)) |
     e12:	4c 99       	sbic	0x09, 4	; 9
     e14:	02 c1       	rjmp	.+516    	; 0x101a <matrix_scan+0x292>
     e16:	40 e1       	ldi	r20, 0x10	; 16
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e0       	ldi	r23, 0x00	; 0
           (PIND&(1<<7) ? 0 : (1UL<<3)) |
     e1e:	84 2b       	or	r24, r20
     e20:	95 2b       	or	r25, r21
     e22:	a6 2b       	or	r26, r22
     e24:	b7 2b       	or	r27, r23
           (PIND&(1<<5) ? 0 : (1UL<<5)) |
     e26:	4d 99       	sbic	0x09, 5	; 9
     e28:	fc c0       	rjmp	.+504    	; 0x1022 <matrix_scan+0x29a>
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
           (PIND&(1<<4) ? 0 : (1UL<<4)) |
     e32:	84 2b       	or	r24, r20
     e34:	95 2b       	or	r25, r21
     e36:	a6 2b       	or	r26, r22
     e38:	b7 2b       	or	r27, r23
           (PINC&(1<<7) ? 0 : (1UL<<6)) |
     e3a:	37 99       	sbic	0x06, 7	; 6
     e3c:	f6 c0       	rjmp	.+492    	; 0x102a <matrix_scan+0x2a2>
     e3e:	40 e4       	ldi	r20, 0x40	; 64
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	70 e0       	ldi	r23, 0x00	; 0
           (PIND&(1<<5) ? 0 : (1UL<<5)) |
     e46:	84 2b       	or	r24, r20
     e48:	95 2b       	or	r25, r21
     e4a:	a6 2b       	or	r26, r22
     e4c:	b7 2b       	or	r27, r23
           (PINC&(1<<6) ? 0 : (1UL<<7)) |
     e4e:	36 99       	sbic	0x06, 6	; 6
     e50:	f0 c0       	rjmp	.+480    	; 0x1032 <matrix_scan+0x2aa>
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
           (PINC&(1<<7) ? 0 : (1UL<<6)) |
     e5a:	84 2b       	or	r24, r20
     e5c:	95 2b       	or	r25, r21
     e5e:	a6 2b       	or	r26, r22
     e60:	b7 2b       	or	r27, r23
           (PIND&(1<<3) ? 0 : (1UL<<8)) |
     e62:	4b 99       	sbic	0x09, 3	; 9
     e64:	ea c0       	rjmp	.+468    	; 0x103a <matrix_scan+0x2b2>
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	51 e0       	ldi	r21, 0x01	; 1
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
           (PINC&(1<<6) ? 0 : (1UL<<7)) |
     e6e:	84 2b       	or	r24, r20
     e70:	95 2b       	or	r25, r21
     e72:	a6 2b       	or	r26, r22
     e74:	b7 2b       	or	r27, r23
           (PIND&(1<<2) ? 0 : (1UL<<9)) |
     e76:	4a 99       	sbic	0x09, 2	; 9
     e78:	e4 c0       	rjmp	.+456    	; 0x1042 <matrix_scan+0x2ba>
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	52 e0       	ldi	r21, 0x02	; 2
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
           (PIND&(1<<3) ? 0 : (1UL<<8)) |
     e82:	84 2b       	or	r24, r20
     e84:	95 2b       	or	r25, r21
     e86:	a6 2b       	or	r26, r22
     e88:	b7 2b       	or	r27, r23
           (PIND&(1<<1) ? 0 : (1UL<<10)) |
     e8a:	49 99       	sbic	0x09, 1	; 9
     e8c:	de c0       	rjmp	.+444    	; 0x104a <matrix_scan+0x2c2>
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	54 e0       	ldi	r21, 0x04	; 4
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
           (PIND&(1<<2) ? 0 : (1UL<<9)) |
     e96:	84 2b       	or	r24, r20
     e98:	95 2b       	or	r25, r21
     e9a:	a6 2b       	or	r26, r22
     e9c:	b7 2b       	or	r27, r23
           (PIND&(1<<0) ? 0 : (1UL<<11)) |
     e9e:	48 99       	sbic	0x09, 0	; 9
     ea0:	d8 c0       	rjmp	.+432    	; 0x1052 <matrix_scan+0x2ca>
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	58 e0       	ldi	r21, 0x08	; 8
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
           (PIND&(1<<1) ? 0 : (1UL<<10)) |
     eaa:	84 2b       	or	r24, r20
     eac:	95 2b       	or	r25, r21
     eae:	a6 2b       	or	r26, r22
     eb0:	b7 2b       	or	r27, r23
           (PINB&(1<<7) ? 0 : (1UL<<12)) |
     eb2:	1f 99       	sbic	0x03, 7	; 3
     eb4:	d2 c0       	rjmp	.+420    	; 0x105a <matrix_scan+0x2d2>
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e1       	ldi	r21, 0x10	; 16
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
           (PIND&(1<<0) ? 0 : (1UL<<11)) |
     ebe:	84 2b       	or	r24, r20
     ec0:	95 2b       	or	r25, r21
     ec2:	a6 2b       	or	r26, r22
     ec4:	b7 2b       	or	r27, r23
           (PINB&(1<<3) ? 0 : (1UL<<13)) |
     ec6:	1b 99       	sbic	0x03, 3	; 3
     ec8:	cc c0       	rjmp	.+408    	; 0x1062 <matrix_scan+0x2da>
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e2       	ldi	r21, 0x20	; 32
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<7) ? 0 : (1UL<<12)) |
     ed2:	84 2b       	or	r24, r20
     ed4:	95 2b       	or	r25, r21
     ed6:	a6 2b       	or	r26, r22
     ed8:	b7 2b       	or	r27, r23
           (PINB&(1<<2) ? 0 : (1UL<<14)) |
     eda:	1a 99       	sbic	0x03, 2	; 3
     edc:	c6 c0       	rjmp	.+396    	; 0x106a <matrix_scan+0x2e2>
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e4       	ldi	r21, 0x40	; 64
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<3) ? 0 : (1UL<<13)) |
     ee6:	84 2b       	or	r24, r20
     ee8:	95 2b       	or	r25, r21
     eea:	a6 2b       	or	r26, r22
     eec:	b7 2b       	or	r27, r23
           (PINB&(1<<1) ? 0 : (1UL<<15)) |
     eee:	19 99       	sbic	0x03, 1	; 3
     ef0:	c0 c0       	rjmp	.+384    	; 0x1072 <matrix_scan+0x2ea>
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	50 e8       	ldi	r21, 0x80	; 128
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<2) ? 0 : (1UL<<14)) |
     efa:	84 2b       	or	r24, r20
     efc:	95 2b       	or	r25, r21
     efe:	a6 2b       	or	r26, r22
     f00:	b7 2b       	or	r27, r23
           (PINB&(1<<0) ? 0 : (1UL<<16)) |
     f02:	18 99       	sbic	0x03, 0	; 3
     f04:	ba c0       	rjmp	.+372    	; 0x107a <matrix_scan+0x2f2>
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<1) ? 0 : (1UL<<15)) |
     f0e:	84 2b       	or	r24, r20
     f10:	95 2b       	or	r25, r21
     f12:	a6 2b       	or	r26, r22
     f14:	b7 2b       	or	r27, r23
           (PINE&(1<<6) ? 0 : (1UL<<17));
     f16:	66 99       	sbic	0x0c, 6	; 12
     f18:	b4 c0       	rjmp	.+360    	; 0x1082 <matrix_scan+0x2fa>
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	62 e0       	ldi	r22, 0x02	; 2
     f20:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<0) ? 0 : (1UL<<16)) |
     f22:	84 2b       	or	r24, r20
     f24:	95 2b       	or	r25, r21
     f26:	a6 2b       	or	r26, r22
     f28:	b7 2b       	or	r27, r23
        if (matrix_debouncing[i] != cols) {
     f2a:	f7 01       	movw	r30, r14
     f2c:	41 91       	ld	r20, Z+
     f2e:	51 91       	ld	r21, Z+
     f30:	61 91       	ld	r22, Z+
     f32:	71 91       	ld	r23, Z+
     f34:	7f 01       	movw	r14, r30
     f36:	48 17       	cp	r20, r24
     f38:	59 07       	cpc	r21, r25
     f3a:	6a 07       	cpc	r22, r26
     f3c:	7b 07       	cpc	r23, r27
     f3e:	71 f1       	breq	.+92     	; 0xf9c <matrix_scan+0x214>
            matrix_debouncing[i] = cols;
     f40:	34 97       	sbiw	r30, 0x04	; 4
     f42:	80 83       	st	Z, r24
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	a2 83       	std	Z+2, r26	; 0x02
     f48:	b3 83       	std	Z+3, r27	; 0x03
            if (debouncing) {
     f4a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f4e:	88 23       	and	r24, r24
     f50:	11 f1       	breq	.+68     	; 0xf96 <matrix_scan+0x20e>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     f52:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
     f56:	80 ff       	sbrs	r24, 0
     f58:	04 c0       	rjmp	.+8      	; 0xf62 <matrix_scan+0x1da>
     f5a:	8b e8       	ldi	r24, 0x8B	; 139
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
     f62:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
     f66:	80 ff       	sbrs	r24, 0
     f68:	0e c0       	rjmp	.+28     	; 0xf86 <matrix_scan+0x1fe>
     f6a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f6e:	1f 92       	push	r1
     f70:	8f 93       	push	r24
     f72:	86 e8       	ldi	r24, 0x86	; 134
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
     f7a:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
     f8a:	80 ff       	sbrs	r24, 0
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <matrix_scan+0x20e>
     f8e:	84 e8       	ldi	r24, 0x84	; 132
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            debouncing = DEBOUNCE;
     f96:	85 e0       	ldi	r24, 0x05	; 5
     f98:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        unselect_rows();
     f9c:	0e 94 91 06 	call	0xd22	; 0xd22 <unselect_rows>
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     fa0:	1f 5f       	subi	r17, 0xFF	; 255
     fa2:	16 30       	cpi	r17, 0x06	; 6
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <matrix_scan+0x220>
     fa6:	f9 ce       	rjmp	.-526    	; 0xd9a <matrix_scan+0x12>
    if (debouncing) {
     fa8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fac:	88 23       	and	r24, r24
     fae:	71 f0       	breq	.+28     	; 0xfcc <matrix_scan+0x244>
        if (--debouncing) {
     fb0:	81 50       	subi	r24, 0x01	; 1
     fb2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     fb6:	ee e4       	ldi	r30, 0x4E	; 78
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	88 23       	and	r24, r24
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <matrix_scan+0x238>
     fbe:	65 c0       	rjmp	.+202    	; 0x108a <matrix_scan+0x302>
	__builtin_avr_delay_cycles(__ticks_dc);
     fc0:	8f e9       	ldi	r24, 0x9F	; 159
     fc2:	9f e0       	ldi	r25, 0x0F	; 15
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <matrix_scan+0x23c>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <matrix_scan+0x242>
     fca:	00 00       	nop
}
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	08 95       	ret
    switch (row) {
     fda:	14 30       	cpi	r17, 0x04	; 4
     fdc:	79 f0       	breq	.+30     	; 0xffc <matrix_scan+0x274>
     fde:	15 30       	cpi	r17, 0x05	; 5
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <matrix_scan+0x25c>
     fe2:	e6 ce       	rjmp	.-564    	; 0xdb0 <matrix_scan+0x28>
        case 4:
            DDRF  |= (1<<6);
            PORTF &= ~(1<<6);
            break;
		case 5:
			DDRF  |= (1<<7);
     fe4:	87 9a       	sbi	0x10, 7	; 16
			PORTF &= ~(1<<7);
     fe6:	8f 98       	cbi	0x11, 7	; 17
     fe8:	e5 ce       	rjmp	.-566    	; 0xdb4 <matrix_scan+0x2c>
            DDRF  |= (1<<1);
     fea:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
     fec:	89 98       	cbi	0x11, 1	; 17
     fee:	e2 ce       	rjmp	.-572    	; 0xdb4 <matrix_scan+0x2c>
            DDRF  |= (1<<4);
     ff0:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
     ff2:	8c 98       	cbi	0x11, 4	; 17
     ff4:	df ce       	rjmp	.-578    	; 0xdb4 <matrix_scan+0x2c>
            DDRF  |= (1<<5);
     ff6:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
     ff8:	8d 98       	cbi	0x11, 5	; 17
     ffa:	dc ce       	rjmp	.-584    	; 0xdb4 <matrix_scan+0x2c>
            DDRF  |= (1<<6);
     ffc:	86 9a       	sbi	0x10, 6	; 16
            PORTF &= ~(1<<6);
     ffe:	8e 98       	cbi	0x11, 6	; 17
    1000:	d9 ce       	rjmp	.-590    	; 0xdb4 <matrix_scan+0x2c>
           (PINB&(1<<5) ? 0 : (1UL<<1)) |
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	ba 01       	movw	r22, r20
    1008:	ec ce       	rjmp	.-552    	; 0xde2 <matrix_scan+0x5a>
           (PINB&(1<<4) ? 0 : (1UL<<2)) |
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	ba 01       	movw	r22, r20
    1010:	f2 ce       	rjmp	.-540    	; 0xdf6 <matrix_scan+0x6e>
           (PIND&(1<<7) ? 0 : (1UL<<3)) |
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	ba 01       	movw	r22, r20
    1018:	f8 ce       	rjmp	.-528    	; 0xe0a <matrix_scan+0x82>
           (PIND&(1<<4) ? 0 : (1UL<<4)) |
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	ba 01       	movw	r22, r20
    1020:	fe ce       	rjmp	.-516    	; 0xe1e <matrix_scan+0x96>
           (PIND&(1<<5) ? 0 : (1UL<<5)) |
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	ba 01       	movw	r22, r20
    1028:	04 cf       	rjmp	.-504    	; 0xe32 <matrix_scan+0xaa>
           (PINC&(1<<7) ? 0 : (1UL<<6)) |
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	ba 01       	movw	r22, r20
    1030:	0a cf       	rjmp	.-492    	; 0xe46 <matrix_scan+0xbe>
           (PINC&(1<<6) ? 0 : (1UL<<7)) |
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	ba 01       	movw	r22, r20
    1038:	10 cf       	rjmp	.-480    	; 0xe5a <matrix_scan+0xd2>
           (PIND&(1<<3) ? 0 : (1UL<<8)) |
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	ba 01       	movw	r22, r20
    1040:	16 cf       	rjmp	.-468    	; 0xe6e <matrix_scan+0xe6>
           (PIND&(1<<2) ? 0 : (1UL<<9)) |
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	ba 01       	movw	r22, r20
    1048:	1c cf       	rjmp	.-456    	; 0xe82 <matrix_scan+0xfa>
           (PIND&(1<<1) ? 0 : (1UL<<10)) |
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	ba 01       	movw	r22, r20
    1050:	22 cf       	rjmp	.-444    	; 0xe96 <matrix_scan+0x10e>
           (PIND&(1<<0) ? 0 : (1UL<<11)) |
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	ba 01       	movw	r22, r20
    1058:	28 cf       	rjmp	.-432    	; 0xeaa <matrix_scan+0x122>
           (PINB&(1<<7) ? 0 : (1UL<<12)) |
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	ba 01       	movw	r22, r20
    1060:	2e cf       	rjmp	.-420    	; 0xebe <matrix_scan+0x136>
           (PINB&(1<<3) ? 0 : (1UL<<13)) |
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	ba 01       	movw	r22, r20
    1068:	34 cf       	rjmp	.-408    	; 0xed2 <matrix_scan+0x14a>
           (PINB&(1<<2) ? 0 : (1UL<<14)) |
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	ba 01       	movw	r22, r20
    1070:	3a cf       	rjmp	.-396    	; 0xee6 <matrix_scan+0x15e>
           (PINB&(1<<1) ? 0 : (1UL<<15)) |
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	ba 01       	movw	r22, r20
    1078:	40 cf       	rjmp	.-384    	; 0xefa <matrix_scan+0x172>
           (PINB&(1<<0) ? 0 : (1UL<<16)) |
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	ba 01       	movw	r22, r20
    1080:	46 cf       	rjmp	.-372    	; 0xf0e <matrix_scan+0x186>
           (PINE&(1<<6) ? 0 : (1UL<<17));
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	ba 01       	movw	r22, r20
    1088:	4c cf       	rjmp	.-360    	; 0xf22 <matrix_scan+0x19a>
                matrix[i] = matrix_debouncing[i];
    108a:	89 91       	ld	r24, Y+
    108c:	99 91       	ld	r25, Y+
    108e:	a9 91       	ld	r26, Y+
    1090:	b9 91       	ld	r27, Y+
    1092:	81 93       	st	Z+, r24
    1094:	91 93       	st	Z+, r25
    1096:	a1 93       	st	Z+, r26
    1098:	b1 93       	st	Z+, r27
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	ce 34       	cpi	r28, 0x4E	; 78
    109e:	d9 07       	cpc	r29, r25
    10a0:	a1 f7       	brne	.-24     	; 0x108a <matrix_scan+0x302>
    10a2:	94 cf       	rjmp	.-216    	; 0xfcc <matrix_scan+0x244>

000010a4 <matrix_get_row>:
    return matrix[row];
    10a4:	94 e0       	ldi	r25, 0x04	; 4
    10a6:	89 9f       	mul	r24, r25
    10a8:	f0 01       	movw	r30, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	e2 5b       	subi	r30, 0xB2	; 178
    10ae:	fe 4f       	sbci	r31, 0xFE	; 254
    10b0:	60 81       	ld	r22, Z
    10b2:	71 81       	ldd	r23, Z+1	; 0x01
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
}
    10b8:	08 95       	ret

000010ba <led_set>:
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
        PORTB &= ~(1<<2);
    }*/
}
    10ba:	08 95       	ret

000010bc <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    10bc:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <keyboard_led_stats>
    10c0:	08 95       	ret

000010c2 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    10c2:	9f b7       	in	r25, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <console_flush>
    10ca:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    10cc:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <USB_DeviceState>
    10d0:	94 30       	cpi	r25, 0x04	; 4
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <sendchar+0x14>
    10d4:	49 c0       	rjmp	.+146    	; 0x1168 <sendchar+0xa6>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    10d6:	20 91 e9 00 	lds	r18, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    10da:	2f 70       	andi	r18, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    10dc:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    10e0:	90 fd       	sbrc	r25, 0
    10e2:	30 c0       	rjmp	.+96     	; 0x1144 <sendchar+0x82>
    10e4:	90 e0       	ldi	r25, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    10e6:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10e8:	24 e0       	ldi	r18, 0x04	; 4
    10ea:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    10ee:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    10f2:	20 ff       	sbrs	r18, 0
    10f4:	36 c0       	rjmp	.+108    	; 0x1162 <sendchar+0xa0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    10f6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    10fa:	27 ff       	sbrs	r18, 7
    10fc:	32 c0       	rjmp	.+100    	; 0x1162 <sendchar+0xa0>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    10fe:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <timeouted.4898>
    1102:	22 23       	and	r18, r18
    1104:	21 f0       	breq	.+8      	; 0x110e <sendchar+0x4c>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1106:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    110a:	25 ff       	sbrs	r18, 5
    110c:	2a c0       	rjmp	.+84     	; 0x1162 <sendchar+0xa0>
        goto ERROR_EXIT;
    }

    timeouted = false;
    110e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <timeouted.4898>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1112:	26 e0       	ldi	r18, 0x06	; 6
    1114:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1118:	35 ff       	sbrs	r19, 5
    111a:	16 c0       	rjmp	.+44     	; 0x1148 <sendchar+0x86>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    111c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1120:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1124:	85 fd       	sbrc	r24, 5
    1126:	29 c0       	rjmp	.+82     	; 0x117a <sendchar+0xb8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1128:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsINReady()));
    112c:	80 ff       	sbrs	r24, 0
    112e:	fc cf       	rjmp	.-8      	; 0x1128 <sendchar+0x66>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1130:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1134:	8e 77       	andi	r24, 0x7E	; 126
    1136:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    113a:	9f 70       	andi	r25, 0x0F	; 15
    113c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    } else {
        CONSOLE_FLUSH_SET(true);
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1144:	90 e8       	ldi	r25, 0x80	; 128
    1146:	cf cf       	rjmp	.-98     	; 0x10e6 <sendchar+0x24>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1148:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <USB_DeviceState>
    114c:	34 30       	cpi	r19, 0x04	; 4
    114e:	49 f4       	brne	.+18     	; 0x1162 <sendchar+0xa0>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1150:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        if (Endpoint_IsStalled()) {
    1154:	35 fd       	sbrc	r19, 5
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <sendchar+0xa0>
    1158:	21 50       	subi	r18, 0x01	; 1
        if (!(timeout--)) {
    115a:	41 f4       	brne	.+16     	; 0x116c <sendchar+0xaa>
            timeouted = true;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <timeouted.4898>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1162:	9f 70       	andi	r25, 0x0F	; 15
    1164:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        return -1;
    1168:	8f ef       	ldi	r24, 0xFF	; 255
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    116a:	08 95       	ret
    116c:	ef e9       	ldi	r30, 0x9F	; 159
    116e:	ff e0       	ldi	r31, 0x0F	; 15
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	f1 f7       	brne	.-4      	; 0x1170 <sendchar+0xae>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <sendchar+0xb4>
    1176:	00 00       	nop
    1178:	cd cf       	rjmp	.-102    	; 0x1114 <sendchar+0x52>
        CONSOLE_FLUSH_SET(true);
    117a:	8f b7       	in	r24, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	21 e0       	ldi	r18, 0x01	; 1
    1180:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <console_flush>
    1184:	8f bf       	out	0x3f, r24	; 63
    1186:	d9 cf       	rjmp	.-78     	; 0x113a <sendchar+0x78>

00001188 <send_consumer>:
{
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	00 d0       	rcall	.+0      	; 0x118e <send_consumer+0x6>
    118e:	1f 92       	push	r1
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1196:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	19 f5       	brne	.+70     	; 0x11e4 <send_consumer+0x5c>
    report_extra_t r = {
    119e:	93 e0       	ldi	r25, 0x03	; 3
    11a0:	99 83       	std	Y+1, r25	; 0x01
    11a2:	3b 83       	std	Y+3, r19	; 0x03
    11a4:	2a 83       	std	Y+2, r18	; 0x02
    11a6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11ac:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11b0:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    11b2:	95 fd       	sbrc	r25, 5
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <send_consumer+0x3a>
	__builtin_avr_delay_cycles(__ticks_dc);
    11b6:	95 ed       	ldi	r25, 0xD5	; 213
    11b8:	9a 95       	dec	r25
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <send_consumer+0x30>
    11bc:	00 00       	nop
    11be:	81 11       	cpse	r24, r1
    11c0:	f5 cf       	rjmp	.-22     	; 0x11ac <send_consumer+0x24>
    11c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    11c6:	85 ff       	sbrs	r24, 5
    11c8:	0d c0       	rjmp	.+26     	; 0x11e4 <send_consumer+0x5c>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	63 e0       	ldi	r22, 0x03	; 3
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11de:	8e 77       	andi	r24, 0x7E	; 126
    11e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <send_system>:
{
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <send_system+0x6>
    11f6:	1f 92       	push	r1
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
    11fc:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <USB_DeviceState>
    1200:	24 30       	cpi	r18, 0x04	; 4
    1202:	21 f5       	brne	.+72     	; 0x124c <send_system+0x5c>
    report_extra_t r = {
    1204:	22 e0       	ldi	r18, 0x02	; 2
    1206:	29 83       	std	Y+1, r18	; 0x01
    1208:	9b 83       	std	Y+3, r25	; 0x03
    120a:	8a 83       	std	Y+2, r24	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1212:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1214:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1218:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    121a:	95 fd       	sbrc	r25, 5
    121c:	06 c0       	rjmp	.+12     	; 0x122a <send_system+0x3a>
    121e:	95 ed       	ldi	r25, 0xD5	; 213
    1220:	9a 95       	dec	r25
    1222:	f1 f7       	brne	.-4      	; 0x1220 <send_system+0x30>
    1224:	00 00       	nop
    1226:	81 11       	cpse	r24, r1
    1228:	f5 cf       	rjmp	.-22     	; 0x1214 <send_system+0x24>
    122a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    122e:	85 ff       	sbrs	r24, 5
    1230:	0d c0       	rjmp	.+26     	; 0x124c <send_system+0x5c>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	63 e0       	ldi	r22, 0x03	; 3
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1242:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1246:	8e 77       	andi	r24, 0x7E	; 126
    1248:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	08 95       	ret

00001258 <send_mouse>:
{
    1258:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    125a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	f9 f4       	brne	.+62     	; 0x12a0 <send_mouse+0x48>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1268:	9f ef       	ldi	r25, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    126a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    126e:	91 50       	subi	r25, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1270:	85 fd       	sbrc	r24, 5
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <send_mouse+0x28>
    1274:	85 ed       	ldi	r24, 0xD5	; 213
    1276:	8a 95       	dec	r24
    1278:	f1 f7       	brne	.-4      	; 0x1276 <send_mouse+0x1e>
    127a:	00 00       	nop
    127c:	91 11       	cpse	r25, r1
    127e:	f5 cf       	rjmp	.-22     	; 0x126a <send_mouse+0x12>
    1280:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1284:	85 ff       	sbrs	r24, 5
    1286:	0c c0       	rjmp	.+24     	; 0x12a0 <send_mouse+0x48>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	65 e0       	ldi	r22, 0x05	; 5
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	c9 01       	movw	r24, r18
    1292:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1296:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    129a:	8e 77       	andi	r24, 0x7E	; 126
    129c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    12a0:	08 95       	ret

000012a2 <send_keyboard>:
{
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	ec 01       	movw	r28, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    12a8:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    12ac:	84 30       	cpi	r24, 0x04	; 4
    12ae:	39 f5       	brne	.+78     	; 0x12fe <send_keyboard+0x5c>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12b8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12bc:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12be:	95 fd       	sbrc	r25, 5
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <send_keyboard+0x2c>
    12c2:	95 ed       	ldi	r25, 0xD5	; 213
    12c4:	9a 95       	dec	r25
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <send_keyboard+0x22>
    12c8:	00 00       	nop
    12ca:	81 11       	cpse	r24, r1
    12cc:	f5 cf       	rjmp	.-22     	; 0x12b8 <send_keyboard+0x16>
    12ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    12d2:	85 ff       	sbrs	r24, 5
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <send_keyboard+0x5c>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	68 e0       	ldi	r22, 0x08	; 8
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	ce 01       	movw	r24, r28
    12e0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12e8:	8e 77       	andi	r24, 0x7E	; 126
    12ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
    12ee:	88 e0       	ldi	r24, 0x08	; 8
    12f0:	fe 01       	movw	r30, r28
    12f2:	aa e6       	ldi	r26, 0x6A	; 106
    12f4:	b1 e0       	ldi	r27, 0x01	; 1
    12f6:	01 90       	ld	r0, Z+
    12f8:	0d 92       	st	X+, r0
    12fa:	8a 95       	dec	r24
    12fc:	e1 f7       	brne	.-8      	; 0x12f6 <send_keyboard+0x54>
}
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <EVENT_USB_Device_Connect>:
    print("[C]");
    1304:	83 ec       	ldi	r24, 0xC3	; 195
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    if (!USB_IsInitialized) {
    130c:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <USB_IsInitialized>
    1310:	81 11       	cpse	r24, r1
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1314:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <USB_Disable>
        USB_Init();
    1318:	0e 94 65 0d 	call	0x1aca	; 0x1aca <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    131c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1320:	84 60       	ori	r24, 0x04	; 4
    1322:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
}
    1326:	08 95       	ret

00001328 <EVENT_USB_Device_Disconnect>:
    print("[D]");
    1328:	8f eb       	ldi	r24, 0xBF	; 191
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    USB_IsInitialized = false;
    1330:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <USB_IsInitialized>
}
    1334:	08 95       	ret

00001336 <EVENT_USB_Device_Reset>:
}
    1336:	08 95       	ret

00001338 <EVENT_USB_Device_StartOfFrame>:
    if (++count % 50) return;
    1338:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <count.4832>
    133c:	2f 5f       	subi	r18, 0xFF	; 255
    133e:	82 2f       	mov	r24, r18
    1340:	62 e3       	ldi	r22, 0x32	; 50
    1342:	0e 94 de 29 	call	0x53bc	; 0x53bc <__udivmodqi4>
    1346:	99 23       	and	r25, r25
    1348:	19 f0       	breq	.+6      	; 0x1350 <EVENT_USB_Device_StartOfFrame+0x18>
    134a:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <count.4832>
    134e:	08 95       	ret
    count = 0;
    1350:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <count.4832>
    if (!console_flush) return;
    1354:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <console_flush>
    1358:	88 23       	and	r24, r24
    135a:	e9 f0       	breq	.+58     	; 0x1396 <EVENT_USB_Device_StartOfFrame+0x5e>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    135c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	b9 f4       	brne	.+46     	; 0x1392 <EVENT_USB_Device_StartOfFrame+0x5a>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1364:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1368:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    136a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    136e:	80 fd       	sbrc	r24, 0
    1370:	13 c0       	rjmp	.+38     	; 0x1398 <EVENT_USB_Device_StartOfFrame+0x60>
    1372:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1374:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    137c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1380:	90 ff       	sbrs	r25, 0
    1382:	04 c0       	rjmp	.+8      	; 0x138c <EVENT_USB_Device_StartOfFrame+0x54>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1384:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1388:	97 fd       	sbrc	r25, 7
    138a:	0a c0       	rjmp	.+20     	; 0x13a0 <EVENT_USB_Device_StartOfFrame+0x68>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    138c:	8f 70       	andi	r24, 0x0F	; 15
    138e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    console_flush = false;
    1392:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <console_flush>
}
    1396:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1398:	80 e8       	ldi	r24, 0x80	; 128
    139a:	ec cf       	rjmp	.-40     	; 0x1374 <EVENT_USB_Device_StartOfFrame+0x3c>
				UEDATX = Data;
    139c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13a0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    while (Endpoint_IsReadWriteAllowed())
    13a4:	95 fd       	sbrc	r25, 5
    13a6:	fa cf       	rjmp	.-12     	; 0x139c <EVENT_USB_Device_StartOfFrame+0x64>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13a8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (Endpoint_IsINReady()) {
    13ac:	90 ff       	sbrs	r25, 0
    13ae:	ee cf       	rjmp	.-36     	; 0x138c <EVENT_USB_Device_StartOfFrame+0x54>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13b0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13b4:	9e 77       	andi	r25, 0x7E	; 126
    13b6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13ba:	e8 cf       	rjmp	.-48     	; 0x138c <EVENT_USB_Device_StartOfFrame+0x54>

000013bc <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    13bc:	42 e0       	ldi	r20, 0x02	; 2
    13be:	61 ec       	ldi	r22, 0xC1	; 193
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 86 0c 	call	0x190c	; 0x190c <Endpoint_ConfigureEndpoint_Prv>
    13c6:	42 e0       	ldi	r20, 0x02	; 2
    13c8:	61 ec       	ldi	r22, 0xC1	; 193
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	0e 94 86 0c 	call	0x190c	; 0x190c <Endpoint_ConfigureEndpoint_Prv>
    13d0:	42 e0       	ldi	r20, 0x02	; 2
    13d2:	61 ec       	ldi	r22, 0xC1	; 193
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	0e 94 86 0c 	call	0x190c	; 0x190c <Endpoint_ConfigureEndpoint_Prv>
    13da:	42 e2       	ldi	r20, 0x22	; 34
    13dc:	61 ec       	ldi	r22, 0xC1	; 193
    13de:	84 e0       	ldi	r24, 0x04	; 4
    13e0:	0c 94 86 0c 	jmp	0x190c	; 0x190c <Endpoint_ConfigureEndpoint_Prv>

000013e4 <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    13e4:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <USB_ControlRequest+0x1>
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	09 f4       	brne	.+2      	; 0x13ee <EVENT_USB_Device_ControlRequest+0xa>
    13ec:	52 c0       	rjmp	.+164    	; 0x1492 <EVENT_USB_Device_ControlRequest+0xae>
    13ee:	30 f4       	brcc	.+12     	; 0x13fc <EVENT_USB_Device_ControlRequest+0x18>
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	59 f1       	breq	.+86     	; 0x144a <EVENT_USB_Device_ControlRequest+0x66>
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	09 f4       	brne	.+2      	; 0x13fa <EVENT_USB_Device_ControlRequest+0x16>
    13f8:	8e c0       	rjmp	.+284    	; 0x1516 <EVENT_USB_Device_ControlRequest+0x132>
    13fa:	08 95       	ret
    13fc:	8a 30       	cpi	r24, 0x0A	; 10
    13fe:	09 f4       	brne	.+2      	; 0x1402 <EVENT_USB_Device_ControlRequest+0x1e>
    1400:	7a c0       	rjmp	.+244    	; 0x14f6 <EVENT_USB_Device_ControlRequest+0x112>
    1402:	8b 30       	cpi	r24, 0x0B	; 11
    1404:	09 f4       	brne	.+2      	; 0x1408 <EVENT_USB_Device_ControlRequest+0x24>
    1406:	60 c0       	rjmp	.+192    	; 0x14c8 <EVENT_USB_Device_ControlRequest+0xe4>
    1408:	89 30       	cpi	r24, 0x09	; 9
    140a:	09 f0       	breq	.+2      	; 0x140e <EVENT_USB_Device_ControlRequest+0x2a>
    140c:	41 c0       	rjmp	.+130    	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    140e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <USB_ControlRequest>
    1412:	81 32       	cpi	r24, 0x21	; 33
    1414:	e9 f5       	brne	.+122    	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
                switch (USB_ControlRequest.wIndex) {
    1416:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_ControlRequest+0x4>
    141a:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <USB_ControlRequest+0x5>
    141e:	89 2b       	or	r24, r25
    1420:	b9 f5       	brne	.+110    	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1422:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1426:	87 7f       	andi	r24, 0xF7	; 247
    1428:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    142c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    1430:	82 ff       	sbrs	r24, 2
    1432:	2a c0       	rjmp	.+84     	; 0x1488 <EVENT_USB_Device_ControlRequest+0xa4>
				return UEDATX;
    1434:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    1438:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    143c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1440:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1442:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    1446:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <Endpoint_ClearStatusStage>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    144a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <USB_ControlRequest>
    144e:	81 3a       	cpi	r24, 0xA1	; 161
    1450:	f9 f4       	brne	.+62     	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1452:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1456:	87 7f       	andi	r24, 0xF7	; 247
    1458:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
    145c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_ControlRequest+0x4>
    1460:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <USB_ControlRequest+0x5>
    1464:	89 2b       	or	r24, r25
    1466:	61 f4       	brne	.+24     	; 0x1480 <EVENT_USB_Device_ControlRequest+0x9c>
                    ReportSize = sizeof(keyboard_report_sent);
    1468:	68 e0       	ldi	r22, 0x08	; 8
                    ReportData = (uint8_t*)&keyboard_report_sent;
    146a:	8a e6       	ldi	r24, 0x6A	; 106
    146c:	91 e0       	ldi	r25, 0x01	; 1
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	0e 94 c7 0b 	call	0x178e	; 0x178e <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1474:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1478:	8b 77       	andi	r24, 0x7B	; 123
    147a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    147e:	08 95       	ret
    uint8_t  ReportSize = 0;
    1480:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	f3 cf       	rjmp	.-26     	; 0x146e <EVENT_USB_Device_ControlRequest+0x8a>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1488:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    148c:	81 11       	cpse	r24, r1
    148e:	ce cf       	rjmp	.-100    	; 0x142c <EVENT_USB_Device_ControlRequest+0x48>
}
    1490:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1492:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <USB_ControlRequest>
    1496:	81 3a       	cpi	r24, 0xA1	; 161
    1498:	d9 f7       	brne	.-10     	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    149a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_ControlRequest+0x4>
    149e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <USB_ControlRequest+0x5>
    14a2:	89 2b       	or	r24, r25
    14a4:	a9 f7       	brne	.-22     	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    14a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14aa:	87 7f       	andi	r24, 0xF7	; 247
    14ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsINReady()));
    14b4:	80 ff       	sbrs	r24, 0
    14b6:	fc cf       	rjmp	.-8      	; 0x14b0 <EVENT_USB_Device_ControlRequest+0xcc>
                    Endpoint_Write_8(keyboard_protocol);
    14b8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
				UEDATX = Data;
    14bc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14c4:	8e 77       	andi	r24, 0x7E	; 126
    14c6:	bd cf       	rjmp	.-134    	; 0x1442 <EVENT_USB_Device_ControlRequest+0x5e>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14c8:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <USB_ControlRequest>
    14cc:	81 32       	cpi	r24, 0x21	; 33
    14ce:	01 f7       	brne	.-64     	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    14d0:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_ControlRequest+0x4>
    14d4:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <USB_ControlRequest+0x5>
    14d8:	89 2b       	or	r24, r25
    14da:	d1 f6       	brne	.-76     	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    14dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14e0:	87 7f       	andi	r24, 0xF7	; 247
    14e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearStatusStage();
    14e6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    14ea:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <USB_ControlRequest+0x2>
    14ee:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <keyboard_protocol>
                    clear_keyboard();
    14f2:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14f6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <USB_ControlRequest>
    14fa:	81 32       	cpi	r24, 0x21	; 33
    14fc:	49 f6       	brne	.-110    	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
    14fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1502:	87 7f       	andi	r24, 0xF7	; 247
    1504:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    1508:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    150c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <USB_ControlRequest+0x3>
    1510:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <keyboard_idle>
    1514:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1516:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <USB_ControlRequest>
    151a:	81 3a       	cpi	r24, 0xA1	; 161
    151c:	09 f0       	breq	.+2      	; 0x1520 <EVENT_USB_Device_ControlRequest+0x13c>
    151e:	b8 cf       	rjmp	.-144    	; 0x1490 <EVENT_USB_Device_ControlRequest+0xac>
    1520:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1524:	87 7f       	andi	r24, 0xF7	; 247
    1526:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    152a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    152e:	80 ff       	sbrs	r24, 0
    1530:	fc cf       	rjmp	.-8      	; 0x152a <EVENT_USB_Device_ControlRequest+0x146>
                Endpoint_Write_8(keyboard_idle);
    1532:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <keyboard_idle>
    1536:	c2 cf       	rjmp	.-124    	; 0x14bc <EVENT_USB_Device_ControlRequest+0xd8>

00001538 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1538:	08 95       	ret

0000153a <hook_late_init>:
    153a:	08 95       	ret

0000153c <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    153c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <keyboard_led_stats>
    1540:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <_led_stats>
    keyboard_led_stats = 0;
    1544:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <keyboard_led_stats>
    led_set(keyboard_led_stats);
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <led_set>

    matrix_clear();
    154e:	0e 94 a4 11 	call	0x2348	; 0x2348 <matrix_clear>
    clear_keyboard();
    1552:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <clear_keyboard>

00001556 <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    1556:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <hook_usb_suspend_entry>

0000155a <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    155a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    155e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <USB_Device_RemoteWakeupEnabled>
    1562:	88 23       	and	r24, r24
    1564:	29 f0       	breq	.+10     	; 0x1570 <hook_usb_suspend_loop+0x16>
    1566:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <suspend_wakeup_condition>
    156a:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    156c:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <USB_Device_SendRemoteWakeup>
    }
}
    1570:	08 95       	ret

00001572 <main>:
    MCUSR &= ~(1 << WDRF);
    1572:	84 b7       	in	r24, 0x34	; 52
    1574:	87 7f       	andi	r24, 0xF7	; 247
    1576:	84 bf       	out	0x34, r24	; 52
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	a8 95       	wdr
    157e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1582:	88 61       	ori	r24, 0x18	; 24
    1584:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1588:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    158c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    158e:	80 e8       	ldi	r24, 0x80	; 128
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    159a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    159e:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    15a0:	81 e6       	ldi	r24, 0x61	; 97
    15a2:	98 e0       	ldi	r25, 0x08	; 8
    15a4:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <print_set_sendchar>
    print("\r\ninit\n");
    15a8:	87 eb       	ldi	r24, 0xB7	; 183
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    hook_early_init();
    15b0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <hook_early_init>
    keyboard_setup();
    15b4:	0e 94 a8 10 	call	0x2150	; 0x2150 <keyboard_setup>
    USB_Disable();
    15b8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <USB_Disable>
    USB_Init();
    15bc:	0e 94 65 0d 	call	0x1aca	; 0x1aca <USB_Init>
    15c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15c4:	84 60       	ori	r24, 0x04	; 4
    15c6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    sei();
    15ca:	78 94       	sei
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    15cc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    15d0:	84 30       	cpi	r24, 0x04	; 4
    15d2:	e1 f7       	brne	.-8      	; 0x15cc <main+0x5a>
    print("USB configured.\n");
    15d4:	86 ea       	ldi	r24, 0xA6	; 166
    15d6:	91 e0       	ldi	r25, 0x01	; 1
    15d8:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    keyboard_init();
    15dc:	0e 94 aa 10 	call	0x2154	; 0x2154 <keyboard_init>
    host_set_driver(&lufa_driver);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_set_driver>
    print("Keyboard start.\n");
    15e8:	85 e9       	ldi	r24, 0x95	; 149
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    hook_late_init();
    15f0:	0e 94 9d 0a 	call	0x153a	; 0x153a <hook_late_init>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    15f4:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    15f8:	85 30       	cpi	r24, 0x05	; 5
    15fa:	19 f0       	breq	.+6      	; 0x1602 <main+0x90>
        keyboard_task();
    15fc:	0e 94 b0 10 	call	0x2160	; 0x2160 <keyboard_task>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1600:	f9 cf       	rjmp	.-14     	; 0x15f4 <main+0x82>
            hook_usb_suspend_loop();
    1602:	0e 94 ad 0a 	call	0x155a	; 0x155a <hook_usb_suspend_loop>
    1606:	f6 cf       	rjmp	.-20     	; 0x15f4 <main+0x82>

00001608 <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1608:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    160c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_led_stats>
    1610:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <keyboard_led_stats>
}
    1614:	08 95       	ret

00001616 <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    1616:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <hook_usb_wakeup>

0000161a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    161a:	29 2f       	mov	r18, r25
    161c:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    161e:	23 30       	cpi	r18, 0x03	; 3
    1620:	31 05       	cpc	r19, r1
    1622:	79 f1       	breq	.+94     	; 0x1682 <CALLBACK_USB_GetDescriptor+0x68>
    1624:	58 f4       	brcc	.+22     	; 0x163c <CALLBACK_USB_GetDescriptor+0x22>
    1626:	21 30       	cpi	r18, 0x01	; 1
    1628:	31 05       	cpc	r19, r1
    162a:	f1 f0       	breq	.+60     	; 0x1668 <CALLBACK_USB_GetDescriptor+0x4e>
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	19 f1       	breq	.+70     	; 0x1678 <CALLBACK_USB_GetDescriptor+0x5e>
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	1a c0       	rjmp	.+52     	; 0x1670 <CALLBACK_USB_GetDescriptor+0x56>
    switch (DescriptorType)
    163c:	21 32       	cpi	r18, 0x21	; 33
    163e:	31 05       	cpc	r19, r1
    1640:	99 f1       	breq	.+102    	; 0x16a8 <CALLBACK_USB_GetDescriptor+0x8e>
    1642:	22 32       	cpi	r18, 0x22	; 34
    1644:	31 05       	cpc	r19, r1
    1646:	a9 f7       	brne	.-22     	; 0x1632 <CALLBACK_USB_GetDescriptor+0x18>
    1648:	64 30       	cpi	r22, 0x04	; 4
    164a:	98 f7       	brcc	.-26     	; 0x1632 <CALLBACK_USB_GetDescriptor+0x18>
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	fb 01       	movw	r30, r22
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	e8 5e       	subi	r30, 0xE8	; 232
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	20 81       	ld	r18, Z
    165a:	31 81       	ldd	r19, Z+1	; 0x01
    165c:	6c 5e       	subi	r22, 0xEC	; 236
    165e:	7e 4f       	sbci	r23, 0xFE	; 254
    1660:	fb 01       	movw	r30, r22
    1662:	80 81       	ld	r24, Z
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <CALLBACK_USB_GetDescriptor+0x56>
            Size    = sizeof(USB_Descriptor_Device_t);
    1668:	82 e1       	ldi	r24, 0x12	; 18
    166a:	90 e0       	ldi	r25, 0x00	; 0
            Address = &DeviceDescriptor;
    166c:	2f e5       	ldi	r18, 0x5F	; 95
    166e:	32 e0       	ldi	r19, 0x02	; 2
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1670:	fa 01       	movw	r30, r20
    1672:	31 83       	std	Z+1, r19	; 0x01
    1674:	20 83       	st	Z, r18
    return Size;
}
    1676:	08 95       	ret
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1678:	84 e7       	ldi	r24, 0x74	; 116
    167a:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    167c:	2b ee       	ldi	r18, 0xEB	; 235
    167e:	31 e0       	ldi	r19, 0x01	; 1
            break;
    1680:	f7 cf       	rjmp	.-18     	; 0x1670 <CALLBACK_USB_GetDescriptor+0x56>
            switch (DescriptorIndex )
    1682:	99 27       	eor	r25, r25
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	61 f0       	breq	.+24     	; 0x16a2 <CALLBACK_USB_GetDescriptor+0x88>
    168a:	28 f0       	brcs	.+10     	; 0x1696 <CALLBACK_USB_GetDescriptor+0x7c>
    168c:	02 97       	sbiw	r24, 0x02	; 2
    168e:	89 f6       	brne	.-94     	; 0x1632 <CALLBACK_USB_GetDescriptor+0x18>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1690:	e7 ec       	ldi	r30, 0xC7	; 199
    1692:	f1 e0       	ldi	r31, 0x01	; 1
    1694:	02 c0       	rjmp	.+4      	; 0x169a <CALLBACK_USB_GetDescriptor+0x80>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1696:	e7 ee       	ldi	r30, 0xE7	; 231
    1698:	f1 e0       	ldi	r31, 0x01	; 1
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    169a:	84 91       	lpm	r24, Z
    169c:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    169e:	9f 01       	movw	r18, r30
                    break;
    16a0:	e7 cf       	rjmp	.-50     	; 0x1670 <CALLBACK_USB_GetDescriptor+0x56>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    16a2:	e3 ed       	ldi	r30, 0xD3	; 211
    16a4:	f1 e0       	ldi	r31, 0x01	; 1
    16a6:	f9 cf       	rjmp	.-14     	; 0x169a <CALLBACK_USB_GetDescriptor+0x80>
    16a8:	64 30       	cpi	r22, 0x04	; 4
    16aa:	08 f0       	brcs	.+2      	; 0x16ae <CALLBACK_USB_GetDescriptor+0x94>
    16ac:	c2 cf       	rjmp	.-124    	; 0x1632 <CALLBACK_USB_GetDescriptor+0x18>
    16ae:	e6 2f       	mov	r30, r22
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	e0 5e       	subi	r30, 0xE0	; 224
    16b8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ba:	20 81       	ld	r18, Z
    16bc:	31 81       	ldd	r19, Z+1	; 0x01
        case HID_DTYPE_HID:
    16be:	89 e0       	ldi	r24, 0x09	; 9
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	d6 cf       	rjmp	.-84     	; 0x1670 <CALLBACK_USB_GetDescriptor+0x56>

000016c4 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    16c4:	80 e1       	ldi	r24, 0x10	; 16
    16c6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    16c8:	82 e1       	ldi	r24, 0x12	; 18
    16ca:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    16cc:	09 b4       	in	r0, 0x29	; 41
    16ce:	00 fe       	sbrs	r0, 0
    16d0:	fd cf       	rjmp	.-6      	; 0x16cc <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    16d2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    16d6:	8f 7d       	andi	r24, 0xDF	; 223
    16d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    16dc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    16e0:	82 60       	ori	r24, 0x02	; 2
    16e2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    16e6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    16ea:	81 fd       	sbrc	r24, 1
    16ec:	fc cf       	rjmp	.-8      	; 0x16e6 <USB_Device_SendRemoteWakeup+0x22>
}
    16ee:	08 95       	ret

000016f0 <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    16f0:	af 92       	push	r10
    16f2:	bf 92       	push	r11
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	6c 01       	movw	r12, r24
    1704:	eb 01       	movw	r28, r22
    1706:	8a 01       	movw	r16, r20
    1708:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <Endpoint_WaitUntilReady>
    170c:	f8 2e       	mov	r15, r24
    170e:	81 11       	cpse	r24, r1
    1710:	23 c0       	rjmp	.+70     	; 0x1758 <Endpoint_Write_Stream_LE+0x68>
    1712:	01 15       	cp	r16, r1
    1714:	11 05       	cpc	r17, r1
    1716:	39 f0       	breq	.+14     	; 0x1726 <Endpoint_Write_Stream_LE+0x36>
    1718:	f8 01       	movw	r30, r16
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	c8 1b       	sub	r28, r24
    1720:	d9 0b       	sbc	r29, r25
    1722:	c8 0e       	add	r12, r24
    1724:	d9 1e       	adc	r13, r25
    1726:	b1 2c       	mov	r11, r1
    1728:	a1 2c       	mov	r10, r1
    172a:	20 97       	sbiw	r28, 0x00	; 0
    172c:	a9 f0       	breq	.+42     	; 0x1758 <Endpoint_Write_Stream_LE+0x68>
    172e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1732:	85 fd       	sbrc	r24, 5
    1734:	22 c0       	rjmp	.+68     	; 0x177a <Endpoint_Write_Stream_LE+0x8a>
    1736:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    173a:	8e 77       	andi	r24, 0x7E	; 126
    173c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1740:	01 15       	cp	r16, r1
    1742:	11 05       	cpc	r17, r1
    1744:	a1 f0       	breq	.+40     	; 0x176e <Endpoint_Write_Stream_LE+0x7e>
    1746:	f8 01       	movw	r30, r16
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	a8 0e       	add	r10, r24
    174e:	b9 1e       	adc	r11, r25
    1750:	b1 82       	std	Z+1, r11	; 0x01
    1752:	a0 82       	st	Z, r10
    1754:	85 e0       	ldi	r24, 0x05	; 5
    1756:	f8 2e       	mov	r15, r24
    1758:	8f 2d       	mov	r24, r15
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	08 95       	ret
    176e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <Endpoint_WaitUntilReady>
    1772:	88 23       	and	r24, r24
    1774:	d1 f2       	breq	.-76     	; 0x172a <Endpoint_Write_Stream_LE+0x3a>
    1776:	f8 2e       	mov	r15, r24
    1778:	ef cf       	rjmp	.-34     	; 0x1758 <Endpoint_Write_Stream_LE+0x68>
    177a:	f6 01       	movw	r30, r12
    177c:	81 91       	ld	r24, Z+
    177e:	6f 01       	movw	r12, r30
    1780:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1784:	21 97       	sbiw	r28, 0x01	; 1
    1786:	ff ef       	ldi	r31, 0xFF	; 255
    1788:	af 1a       	sub	r10, r31
    178a:	bf 0a       	sbc	r11, r31
    178c:	ce cf       	rjmp	.-100    	; 0x172a <Endpoint_Write_Stream_LE+0x3a>

0000178e <Endpoint_Write_Control_Stream_LE>:
    178e:	fc 01       	movw	r30, r24
    1790:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <USB_ControlRequest+0x6>
    1794:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <USB_ControlRequest+0x7>
    1798:	86 17       	cp	r24, r22
    179a:	97 07       	cpc	r25, r23
    179c:	a0 f0       	brcs	.+40     	; 0x17c6 <Endpoint_Write_Control_Stream_LE+0x38>
    179e:	61 15       	cp	r22, r1
    17a0:	71 05       	cpc	r23, r1
    17a2:	29 f4       	brne	.+10     	; 0x17ae <Endpoint_Write_Control_Stream_LE+0x20>
    17a4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17a8:	9e 77       	andi	r25, 0x7E	; 126
    17aa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	61 15       	cp	r22, r1
    17b2:	71 05       	cpc	r23, r1
    17b4:	51 f4       	brne	.+20     	; 0x17ca <Endpoint_Write_Control_Stream_LE+0x3c>
    17b6:	91 11       	cpse	r25, r1
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <Endpoint_Write_Control_Stream_LE+0x3c>
    17ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17be:	82 ff       	sbrs	r24, 2
    17c0:	35 c0       	rjmp	.+106    	; 0x182c <Endpoint_Write_Control_Stream_LE+0x9e>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	08 95       	ret
    17c6:	bc 01       	movw	r22, r24
    17c8:	f2 cf       	rjmp	.-28     	; 0x17ae <Endpoint_Write_Control_Stream_LE+0x20>
    17ca:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    17ce:	88 23       	and	r24, r24
    17d0:	c9 f1       	breq	.+114    	; 0x1844 <Endpoint_Write_Control_Stream_LE+0xb6>
    17d2:	85 30       	cpi	r24, 0x05	; 5
    17d4:	c9 f1       	breq	.+114    	; 0x1848 <Endpoint_Write_Control_Stream_LE+0xba>
    17d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17da:	83 fd       	sbrc	r24, 3
    17dc:	31 c0       	rjmp	.+98     	; 0x1840 <Endpoint_Write_Control_Stream_LE+0xb2>
    17de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17e2:	82 fd       	sbrc	r24, 2
    17e4:	ea cf       	rjmp	.-44     	; 0x17ba <Endpoint_Write_Control_Stream_LE+0x2c>
    17e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ea:	80 ff       	sbrs	r24, 0
    17ec:	e1 cf       	rjmp	.-62     	; 0x17b0 <Endpoint_Write_Control_Stream_LE+0x22>
    17ee:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    17f2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    17f6:	32 2f       	mov	r19, r18
    17f8:	28 2f       	mov	r18, r24
    17fa:	61 15       	cp	r22, r1
    17fc:	71 05       	cpc	r23, r1
    17fe:	19 f0       	breq	.+6      	; 0x1806 <Endpoint_Write_Control_Stream_LE+0x78>
    1800:	28 30       	cpi	r18, 0x08	; 8
    1802:	31 05       	cpc	r19, r1
    1804:	58 f0       	brcs	.+22     	; 0x181c <Endpoint_Write_Control_Stream_LE+0x8e>
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	28 30       	cpi	r18, 0x08	; 8
    180a:	31 05       	cpc	r19, r1
    180c:	09 f0       	breq	.+2      	; 0x1810 <Endpoint_Write_Control_Stream_LE+0x82>
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1814:	2e 77       	andi	r18, 0x7E	; 126
    1816:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    181a:	ca cf       	rjmp	.-108    	; 0x17b0 <Endpoint_Write_Control_Stream_LE+0x22>
    181c:	81 91       	ld	r24, Z+
    181e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1822:	61 50       	subi	r22, 0x01	; 1
    1824:	71 09       	sbc	r23, r1
    1826:	2f 5f       	subi	r18, 0xFF	; 255
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	e7 cf       	rjmp	.-50     	; 0x17fa <Endpoint_Write_Control_Stream_LE+0x6c>
    182c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    1830:	88 23       	and	r24, r24
    1832:	41 f0       	breq	.+16     	; 0x1844 <Endpoint_Write_Control_Stream_LE+0xb6>
    1834:	85 30       	cpi	r24, 0x05	; 5
    1836:	41 f0       	breq	.+16     	; 0x1848 <Endpoint_Write_Control_Stream_LE+0xba>
    1838:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    183c:	83 ff       	sbrs	r24, 3
    183e:	bd cf       	rjmp	.-134    	; 0x17ba <Endpoint_Write_Control_Stream_LE+0x2c>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	08 95       	ret
    1844:	82 e0       	ldi	r24, 0x02	; 2
    1846:	08 95       	ret
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	08 95       	ret

0000184c <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    184c:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    184e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <USB_ControlRequest+0x6>
    1852:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <USB_ControlRequest+0x7>
    1856:	86 17       	cp	r24, r22
    1858:	97 07       	cpc	r25, r23
    185a:	a0 f0       	brcs	.+40     	; 0x1884 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    185c:	61 15       	cp	r22, r1
    185e:	71 05       	cpc	r23, r1
    1860:	29 f4       	brne	.+10     	; 0x186c <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1862:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1866:	8e 77       	andi	r24, 0x7E	; 126
    1868:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    186c:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    186e:	61 15       	cp	r22, r1
    1870:	71 05       	cpc	r23, r1
    1872:	51 f4       	brne	.+20     	; 0x1888 <Endpoint_Write_Control_PStream_LE+0x3c>
    1874:	91 11       	cpse	r25, r1
    1876:	08 c0       	rjmp	.+16     	; 0x1888 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1878:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    187c:	82 ff       	sbrs	r24, 2
    187e:	36 c0       	rjmp	.+108    	; 0x18ec <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	08 95       	ret
    1884:	bc 01       	movw	r22, r24
    1886:	f2 cf       	rjmp	.-28     	; 0x186c <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1888:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    188c:	88 23       	and	r24, r24
    188e:	d1 f1       	breq	.+116    	; 0x1904 <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1890:	85 30       	cpi	r24, 0x05	; 5
    1892:	d1 f1       	breq	.+116    	; 0x1908 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1894:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1898:	83 fd       	sbrc	r24, 3
    189a:	32 c0       	rjmp	.+100    	; 0x1900 <Endpoint_Write_Control_PStream_LE+0xb4>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    189c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    18a0:	82 fd       	sbrc	r24, 2
    18a2:	ea cf       	rjmp	.-44     	; 0x1878 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    18a8:	80 ff       	sbrs	r24, 0
    18aa:	e1 cf       	rjmp	.-62     	; 0x186e <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    18ac:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    18b0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    18b4:	32 2f       	mov	r19, r18
    18b6:	28 2f       	mov	r18, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18b8:	61 15       	cp	r22, r1
    18ba:	71 05       	cpc	r23, r1
    18bc:	19 f0       	breq	.+6      	; 0x18c4 <Endpoint_Write_Control_PStream_LE+0x78>
    18be:	28 30       	cpi	r18, 0x08	; 8
    18c0:	31 05       	cpc	r19, r1
    18c2:	58 f0       	brcs	.+22     	; 0x18da <Endpoint_Write_Control_PStream_LE+0x8e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	28 30       	cpi	r18, 0x08	; 8
    18c8:	31 05       	cpc	r19, r1
    18ca:	09 f0       	breq	.+2      	; 0x18ce <Endpoint_Write_Control_PStream_LE+0x82>
    18cc:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18d2:	8e 77       	andi	r24, 0x7E	; 126
    18d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18d8:	ca cf       	rjmp	.-108    	; 0x186e <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18da:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18dc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    18e0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    18e2:	61 50       	subi	r22, 0x01	; 1
    18e4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    18e6:	2f 5f       	subi	r18, 0xFF	; 255
    18e8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ea:	e6 cf       	rjmp	.-52     	; 0x18b8 <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18ec:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18f0:	88 23       	and	r24, r24
    18f2:	41 f0       	breq	.+16     	; 0x1904 <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18f4:	85 30       	cpi	r24, 0x05	; 5
    18f6:	41 f0       	breq	.+16     	; 0x1908 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    18fc:	83 ff       	sbrs	r24, 3
    18fe:	bc cf       	rjmp	.-136    	; 0x1878 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1900:	81 e0       	ldi	r24, 0x01	; 1
}
    1902:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	08 95       	ret

0000190c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    190c:	98 2f       	mov	r25, r24
    190e:	97 30       	cpi	r25, 0x07	; 7
    1910:	28 f0       	brcs	.+10     	; 0x191c <Endpoint_ConfigureEndpoint_Prv+0x10>
    1912:	8f 70       	andi	r24, 0x0F	; 15
    1914:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	08 95       	ret
    191c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1920:	24 2f       	mov	r18, r20
    1922:	76 2f       	mov	r23, r22
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	98 17       	cp	r25, r24
    1928:	31 f0       	breq	.+12     	; 0x1936 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    192a:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    192e:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1932:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1936:	21 fd       	sbrc	r18, 1
    1938:	02 c0       	rjmp	.+4      	; 0x193e <Endpoint_ConfigureEndpoint_Prv+0x32>
    193a:	9f 5f       	subi	r25, 0xFF	; 255
    193c:	e8 cf       	rjmp	.-48     	; 0x190e <Endpoint_ConfigureEndpoint_Prv+0x2>
    193e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1942:	3e 7f       	andi	r19, 0xFE	; 254
    1944:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1948:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    194c:	3d 7f       	andi	r19, 0xFD	; 253
    194e:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1952:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1956:	31 60       	ori	r19, 0x01	; 1
    1958:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    195c:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1960:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1964:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1968:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    196c:	27 fd       	sbrc	r18, 7
    196e:	e5 cf       	rjmp	.-54     	; 0x193a <Endpoint_ConfigureEndpoint_Prv+0x2e>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	08 95       	ret

00001974 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1974:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <USB_ControlRequest>
    1978:	87 ff       	sbrs	r24, 7
    197a:	13 c0       	rjmp	.+38     	; 0x19a2 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    197c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1980:	82 ff       	sbrs	r24, 2
    1982:	06 c0       	rjmp	.+12     	; 0x1990 <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1984:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1988:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    198a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1990:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    1994:	81 11       	cpse	r24, r1
    1996:	f2 cf       	rjmp	.-28     	; 0x197c <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    1998:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    199a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    199e:	88 23       	and	r24, r24
    19a0:	d9 f3       	breq	.-10     	; 0x1998 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    19a6:	80 ff       	sbrs	r24, 0
    19a8:	f8 cf       	rjmp	.-16     	; 0x199a <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19ae:	8e 77       	andi	r24, 0x7E	; 126
    19b0:	ec cf       	rjmp	.-40     	; 0x198a <Endpoint_ClearStatusStage+0x16>

000019b2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    19b2:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    19b6:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    19ba:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    19bc:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    19c0:	90 ff       	sbrs	r25, 0
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19c4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    19c8:	90 ff       	sbrs	r25, 0
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19d0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    19d4:	92 fd       	sbrc	r25, 2
    19d6:	fa cf       	rjmp	.-12     	; 0x19cc <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19d8:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19dc:	99 23       	and	r25, r25
    19de:	91 f0       	breq	.+36     	; 0x1a04 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19e0:	95 30       	cpi	r25, 0x05	; 5
    19e2:	91 f0       	breq	.+36     	; 0x1a08 <Endpoint_WaitUntilReady+0x56>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    19e4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    19e8:	95 fd       	sbrc	r25, 5
    19ea:	10 c0       	rjmp	.+32     	; 0x1a0c <Endpoint_WaitUntilReady+0x5a>
    19ec:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    19f0:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    19f4:	24 17       	cp	r18, r20
    19f6:	35 07       	cpc	r19, r21
    19f8:	09 f3       	breq	.-62     	; 0x19bc <Endpoint_WaitUntilReady+0xa>
    19fa:	81 50       	subi	r24, 0x01	; 1
    19fc:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    19fe:	f1 f6       	brne	.-68     	; 0x19bc <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    1a0e:	08 95       	ret

00001a10 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1a10:	0e 94 76 0d 	call	0x1aec	; 0x1aec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1a14:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1a18:	e0 ee       	ldi	r30, 0xE0	; 224
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	81 60       	ori	r24, 0x01	; 1
    1a20:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1a22:	e8 ed       	ldi	r30, 0xD8	; 216
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8f 77       	andi	r24, 0x7F	; 127
    1a2a:	80 83       	st	Z, r24
				PLLCSR = 0;
    1a2c:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    1a2e:	a7 ed       	ldi	r26, 0xD7	; 215
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	8c 91       	ld	r24, X
    1a34:	8e 7f       	andi	r24, 0xFE	; 254
    1a36:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 7e       	andi	r24, 0xEF	; 239
    1a3c:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1a3e:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <USB_IsInitialized>
}
    1a42:	08 95       	ret

00001a44 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1a4c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1a50:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1a54:	c8 ed       	ldi	r28, 0xD8	; 216
    1a56:	d0 e0       	ldi	r29, 0x00	; 0
    1a58:	88 81       	ld	r24, Y
    1a5a:	8f 77       	andi	r24, 0x7F	; 127
    1a5c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1a5e:	88 81       	ld	r24, Y
    1a60:	80 68       	ori	r24, 0x80	; 128
    1a62:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    1a64:	88 81       	ld	r24, Y
    1a66:	8f 7d       	andi	r24, 0xDF	; 223
    1a68:	88 83       	st	Y, r24
				PLLCSR = 0;
    1a6a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1a6c:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1a70:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1a74:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1a78:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1a7c:	00 ee       	ldi	r16, 0xE0	; 224
    1a7e:	10 e0       	ldi	r17, 0x00	; 0
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 81       	ld	r24, Z
    1a84:	8b 7f       	andi	r24, 0xFB	; 251
    1a86:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1a88:	88 81       	ld	r24, Y
    1a8a:	81 60       	ori	r24, 0x01	; 1
    1a8c:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a8e:	42 e0       	ldi	r20, 0x02	; 2
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	0e 94 86 0c 	call	0x190c	; 0x190c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a98:	e1 ee       	ldi	r30, 0xE1	; 225
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8e 7f       	andi	r24, 0xFE	; 254
    1aa0:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    1aa2:	e2 ee       	ldi	r30, 0xE2	; 226
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	81 60       	ori	r24, 0x01	; 1
    1aaa:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1aac:	80 81       	ld	r24, Z
    1aae:	88 60       	ori	r24, 0x08	; 8
    1ab0:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8e 7f       	andi	r24, 0xFE	; 254
    1ab8:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1aba:	88 81       	ld	r24, Y
    1abc:	80 61       	ori	r24, 0x10	; 16
    1abe:	88 83       	st	Y, r24
}
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1aca:	e8 ed       	ldi	r30, 0xD8	; 216
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 7e       	andi	r24, 0xEF	; 239
    1ad2:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1ad4:	e7 ed       	ldi	r30, 0xD7	; 215
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	81 60       	ori	r24, 0x01	; 1
    1adc:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1ade:	84 e0       	ldi	r24, 0x04	; 4
    1ae0:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <USB_IsInitialized>
	USB_ResetInterface();
    1ae8:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <USB_ResetInterface>

00001aec <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1aec:	e8 ed       	ldi	r30, 0xD8	; 216
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	8e 7f       	andi	r24, 0xFE	; 254
    1af4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1af6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    1afa:	08 95       	ret

00001afc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1afc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1b00:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    1b04:	08 95       	ret

00001b06 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1b06:	1f 92       	push	r1
    1b08:	0f 92       	push	r0
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	0f 92       	push	r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	2f 93       	push	r18
    1b12:	3f 93       	push	r19
    1b14:	4f 93       	push	r20
    1b16:	5f 93       	push	r21
    1b18:	6f 93       	push	r22
    1b1a:	7f 93       	push	r23
    1b1c:	8f 93       	push	r24
    1b1e:	9f 93       	push	r25
    1b20:	af 93       	push	r26
    1b22:	bf 93       	push	r27
    1b24:	ef 93       	push	r30
    1b26:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1b28:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1b2c:	82 ff       	sbrs	r24, 2
    1b2e:	0b c0       	rjmp	.+22     	; 0x1b46 <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    1b30:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b34:	82 ff       	sbrs	r24, 2
    1b36:	07 c0       	rjmp	.+14     	; 0x1b46 <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    1b38:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1b3c:	8b 7f       	andi	r24, 0xFB	; 251
    1b3e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1b42:	0e 94 9c 09 	call	0x1338	; 0x1338 <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
    1b46:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1b4a:	80 ff       	sbrs	r24, 0
    1b4c:	19 c0       	rjmp	.+50     	; 0x1b80 <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    1b4e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1b52:	80 ff       	sbrs	r24, 0
    1b54:	15 c0       	rjmp	.+42     	; 0x1b80 <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1b56:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1b5a:	8e 7f       	andi	r24, 0xFE	; 254
    1b5c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1b60:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1b64:	80 ff       	sbrs	r24, 0
    1b66:	94 c0       	rjmp	.+296    	; 0x1c90 <__vector_10+0x18a>
				PLLCSR = USB_PLL_PSC;
    1b68:	80 e1       	ldi	r24, 0x10	; 16
    1b6a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b6c:	82 e1       	ldi	r24, 0x12	; 18
    1b6e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1b70:	09 b4       	in	r0, 0x29	; 41
    1b72:	00 fe       	sbrs	r0, 0
    1b74:	fd cf       	rjmp	.-6      	; 0x1b70 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1b7c:	0e 94 82 09 	call	0x1304	; 0x1304 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1b80:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1b84:	80 ff       	sbrs	r24, 0
    1b86:	19 c0       	rjmp	.+50     	; 0x1bba <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    1b88:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b8c:	80 ff       	sbrs	r24, 0
    1b8e:	15 c0       	rjmp	.+42     	; 0x1bba <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    1b90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b94:	8e 7f       	andi	r24, 0xFE	; 254
    1b96:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1b9a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b9e:	80 61       	ori	r24, 0x10	; 16
    1ba0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    1ba4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1ba8:	80 62       	ori	r24, 0x20	; 32
    1baa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1bae:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1bb0:	85 e0       	ldi	r24, 0x05	; 5
    1bb2:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1bb6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    1bba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1bbe:	84 ff       	sbrs	r24, 4
    1bc0:	29 c0       	rjmp	.+82     	; 0x1c14 <__vector_10+0x10e>
						return (UDIEN  & (1 << WAKEUPE));
    1bc2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bc6:	84 ff       	sbrs	r24, 4
    1bc8:	25 c0       	rjmp	.+74     	; 0x1c14 <__vector_10+0x10e>
				PLLCSR = USB_PLL_PSC;
    1bca:	80 e1       	ldi	r24, 0x10	; 16
    1bcc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bce:	82 e1       	ldi	r24, 0x12	; 18
    1bd0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1bd2:	09 b4       	in	r0, 0x29	; 41
    1bd4:	00 fe       	sbrs	r0, 0
    1bd6:	fd cf       	rjmp	.-6      	; 0x1bd2 <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    1bd8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1bdc:	8f 7d       	andi	r24, 0xDF	; 223
    1bde:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1be2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1be6:	8f 7e       	andi	r24, 0xEF	; 239
    1be8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1bec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bf0:	8f 7e       	andi	r24, 0xEF	; 239
    1bf2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1bf6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bfa:	81 60       	ori	r24, 0x01	; 1
    1bfc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c00:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_Device_ConfigurationNumber>
    1c04:	88 23       	and	r24, r24
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <__vector_10+0x104>
    1c08:	49 c0       	rjmp	.+146    	; 0x1c9c <__vector_10+0x196>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1c0a:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c0c:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1c10:	0e 94 0b 0b 	call	0x1616	; 0x1616 <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    1c14:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1c18:	83 ff       	sbrs	r24, 3
    1c1a:	29 c0       	rjmp	.+82     	; 0x1c6e <__vector_10+0x168>
						return (UDIEN  & (1 << EORSTE));
    1c1c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c20:	83 ff       	sbrs	r24, 3
    1c22:	25 c0       	rjmp	.+74     	; 0x1c6e <__vector_10+0x168>
						UDINT  &= ~(1 << EORSTI);
    1c24:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c28:	87 7f       	andi	r24, 0xF7	; 247
    1c2a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1c34:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1c38:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c3c:	8e 7f       	andi	r24, 0xFE	; 254
    1c3e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1c42:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c46:	8e 7f       	andi	r24, 0xFE	; 254
    1c48:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1c4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c50:	80 61       	ori	r24, 0x10	; 16
    1c52:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c56:	42 e0       	ldi	r20, 0x02	; 2
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 94 86 0c 	call	0x190c	; 0x190c <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1c60:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1c64:	88 60       	ori	r24, 0x08	; 8
    1c66:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1c6a:	0e 94 9b 09 	call	0x1336	; 0x1336 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1c6e:	ff 91       	pop	r31
    1c70:	ef 91       	pop	r30
    1c72:	bf 91       	pop	r27
    1c74:	af 91       	pop	r26
    1c76:	9f 91       	pop	r25
    1c78:	8f 91       	pop	r24
    1c7a:	7f 91       	pop	r23
    1c7c:	6f 91       	pop	r22
    1c7e:	5f 91       	pop	r21
    1c80:	4f 91       	pop	r20
    1c82:	3f 91       	pop	r19
    1c84:	2f 91       	pop	r18
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	0f 90       	pop	r0
    1c8c:	1f 90       	pop	r1
    1c8e:	18 95       	reti
				PLLCSR = 0;
    1c90:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    1c92:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1c96:	0e 94 94 09 	call	0x1328	; 0x1328 <EVENT_USB_Device_Disconnect>
    1c9a:	72 cf       	rjmp	.-284    	; 0x1b80 <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c9c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1ca0:	87 fd       	sbrc	r24, 7
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <__vector_10+0x1a2>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	b2 cf       	rjmp	.-156    	; 0x1c0c <__vector_10+0x106>
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	b0 cf       	rjmp	.-160    	; 0x1c0c <__vector_10+0x106>

00001cac <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1cac:	1f 92       	push	r1
    1cae:	0f 92       	push	r0
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	0f 92       	push	r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	2f 93       	push	r18
    1cb8:	3f 93       	push	r19
    1cba:	4f 93       	push	r20
    1cbc:	5f 93       	push	r21
    1cbe:	6f 93       	push	r22
    1cc0:	7f 93       	push	r23
    1cc2:	8f 93       	push	r24
    1cc4:	9f 93       	push	r25
    1cc6:	af 93       	push	r26
    1cc8:	bf 93       	push	r27
    1cca:	cf 93       	push	r28
    1ccc:	ef 93       	push	r30
    1cce:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1cd0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1cd4:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1cd6:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cda:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1cde:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1ce2:	87 7f       	andi	r24, 0xF7	; 247
    1ce4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1ce8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1cea:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <USB_Device_ProcessControlRequest>
    1cee:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1cf2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1cf6:	88 60       	ori	r24, 0x08	; 8
    1cf8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1cfc:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1d00:	ff 91       	pop	r31
    1d02:	ef 91       	pop	r30
    1d04:	cf 91       	pop	r28
    1d06:	bf 91       	pop	r27
    1d08:	af 91       	pop	r26
    1d0a:	9f 91       	pop	r25
    1d0c:	8f 91       	pop	r24
    1d0e:	7f 91       	pop	r23
    1d10:	6f 91       	pop	r22
    1d12:	5f 91       	pop	r21
    1d14:	4f 91       	pop	r20
    1d16:	3f 91       	pop	r19
    1d18:	2f 91       	pop	r18
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	aa 97       	sbiw	r28, 0x2a	; 42
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	e0 e6       	ldi	r30, 0x60	; 96
    1d3c:	f2 e0       	ldi	r31, 0x02	; 2
				return UEDATX;
    1d3e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d42:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d44:	22 e0       	ldi	r18, 0x02	; 2
    1d46:	e8 36       	cpi	r30, 0x68	; 104
    1d48:	f2 07       	cpc	r31, r18
    1d4a:	c9 f7       	brne	.-14     	; 0x1d3e <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1d4c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1d54:	83 ff       	sbrs	r24, 3
    1d56:	42 c0       	rjmp	.+132    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d58:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1d5c:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <USB_ControlRequest+0x1>
    1d60:	9a 30       	cpi	r25, 0x0A	; 10
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <USB_Device_ProcessControlRequest+0x42>
    1d64:	3b c0       	rjmp	.+118    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
    1d66:	e9 2f       	mov	r30, r25
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	e7 54       	subi	r30, 0x47	; 71
    1d6c:	f1 4f       	sbci	r31, 0xF1	; 241
    1d6e:	0c 94 fe 29 	jmp	0x53fc	; 0x53fc <__tablejump2__>
    1d72:	c3 0e       	add	r12, r19
    1d74:	e7 0e       	add	r14, r23
    1d76:	ee 0e       	add	r14, r30
    1d78:	e7 0e       	add	r14, r23
    1d7a:	ee 0e       	add	r14, r30
    1d7c:	42 0f       	add	r20, r18
    1d7e:	64 0f       	add	r22, r20
    1d80:	ee 0e       	add	r14, r30
    1d82:	b9 0f       	add	r27, r25
    1d84:	c6 0f       	add	r28, r22
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d86:	80 38       	cpi	r24, 0x80	; 128
    1d88:	79 f0       	breq	.+30     	; 0x1da8 <USB_Device_ProcessControlRequest+0x84>
    1d8a:	82 38       	cpi	r24, 0x82	; 130
    1d8c:	39 f5       	brne	.+78     	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1d8e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_ControlRequest+0x4>
    1d92:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d94:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d98:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1d9c:	85 fb       	bst	r24, 5
    1d9e:	88 27       	eor	r24, r24
    1da0:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1da2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1da6:	06 c0       	rjmp	.+12     	; 0x1db4 <USB_Device_ProcessControlRequest+0x90>
	uint8_t CurrentStatus = 0;
    1da8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1dac:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <USB_Device_RemoteWakeupEnabled>
    1db0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1db2:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1db4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1db8:	97 7f       	andi	r25, 0xF7	; 247
    1dba:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1dbe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1dc2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1dca:	8e 77       	andi	r24, 0x7E	; 126
    1dcc:	2d c0       	rjmp	.+90     	; 0x1e28 <USB_Device_ProcessControlRequest+0x104>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1dce:	28 2f       	mov	r18, r24
    1dd0:	2d 7f       	andi	r18, 0xFD	; 253
    1dd2:	21 f4       	brne	.+8      	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1dd4:	88 23       	and	r24, r24
    1dd6:	d1 f0       	breq	.+52     	; 0x1e0c <USB_Device_ProcessControlRequest+0xe8>
    1dd8:	82 30       	cpi	r24, 0x02	; 2
    1dda:	59 f1       	breq	.+86     	; 0x1e32 <USB_Device_ProcessControlRequest+0x10e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ddc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    1de0:	83 ff       	sbrs	r24, 3
    1de2:	0a c0       	rjmp	.+20     	; 0x1df8 <USB_Device_ProcessControlRequest+0xd4>
				UEINTX &= ~(1 << RXSTPI);
    1de4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1de8:	87 7f       	andi	r24, 0xF7	; 247
    1dea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1dee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1df2:	80 62       	ori	r24, 0x20	; 32
    1df4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    1df8:	aa 96       	adiw	r28, 0x2a	; 42
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e0c:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <USB_ControlRequest+0x2>
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	21 f7       	brne	.-56     	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e14:	93 30       	cpi	r25, 0x03	; 3
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <USB_Device_ProcessControlRequest+0xf6>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e1e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1e22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e26:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1e2c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ClearStatusStage>
    1e30:	d5 cf       	rjmp	.-86     	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e32:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <USB_ControlRequest+0x2>
    1e36:	81 11       	cpse	r24, r1
    1e38:	f2 cf       	rjmp	.-28     	; 0x1e1e <USB_Device_ProcessControlRequest+0xfa>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e3a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_ControlRequest+0x4>
    1e3e:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e40:	69 f2       	breq	.-102    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e42:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e46:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e4a:	20 ff       	sbrs	r18, 0
    1e4c:	e8 cf       	rjmp	.-48     	; 0x1e1e <USB_Device_ProcessControlRequest+0xfa>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e4e:	93 30       	cpi	r25, 0x03	; 3
    1e50:	31 f4       	brne	.+12     	; 0x1e5e <USB_Device_ProcessControlRequest+0x13a>
				UECONX |= (1 << STALLRQ);
    1e52:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e56:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1e58:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e5c:	e0 cf       	rjmp	.-64     	; 0x1e1e <USB_Device_ProcessControlRequest+0xfa>
				UECONX |= (1 << STALLRQC);
    1e5e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e62:	90 61       	ori	r25, 0x10	; 16
    1e64:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e68:	21 e0       	ldi	r18, 0x01	; 1
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <USB_Device_ProcessControlRequest+0x14c>
    1e6e:	22 0f       	add	r18, r18
    1e70:	8a 95       	dec	r24
    1e72:	ea f7       	brpl	.-6      	; 0x1e6e <USB_Device_ProcessControlRequest+0x14a>
    1e74:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1e78:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1e7c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e80:	88 60       	ori	r24, 0x08	; 8
    1e82:	ea cf       	rjmp	.-44     	; 0x1e58 <USB_Device_ProcessControlRequest+0x134>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e84:	81 11       	cpse	r24, r1
    1e86:	aa cf       	rjmp	.-172    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e88:	10 91 62 02 	lds	r17, 0x0262	; 0x800262 <USB_ControlRequest+0x2>
    1e8c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e8e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e92:	80 78       	andi	r24, 0x80	; 128
    1e94:	81 2b       	or	r24, r17
    1e96:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1e9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e9e:	87 7f       	andi	r24, 0xF7	; 247
    1ea0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1ea4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ea8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1eac:	80 ff       	sbrs	r24, 0
    1eae:	fc cf       	rjmp	.-8      	; 0x1ea8 <USB_Device_ProcessControlRequest+0x184>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1eb0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1eb4:	80 68       	ori	r24, 0x80	; 128
    1eb6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	11 11       	cpse	r17, r1
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <USB_Device_ProcessControlRequest+0x19e>
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <USB_DeviceState>
    1ec6:	8a cf       	rjmp	.-236    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ec8:	80 58       	subi	r24, 0x80	; 128
    1eca:	82 30       	cpi	r24, 0x02	; 2
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <USB_Device_ProcessControlRequest+0x1ac>
    1ece:	86 cf       	rjmp	.-244    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ed0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <USB_ControlRequest+0x2>
    1ed4:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <USB_ControlRequest+0x3>
    1ed8:	8c 3d       	cpi	r24, 0xDC	; 220
    1eda:	23 e0       	ldi	r18, 0x03	; 3
    1edc:	92 07       	cpc	r25, r18
    1ede:	a1 f5       	brne	.+104    	; 0x1f48 <USB_Device_ProcessControlRequest+0x224>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ee4:	8a e2       	ldi	r24, 0x2A	; 42
    1ee6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1ee8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1eea:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1eec:	de 01       	movw	r26, r28
    1eee:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ef2:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ef4:	51 e2       	ldi	r21, 0x21	; 33
    1ef6:	e3 2f       	mov	r30, r19
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1efe:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1f00:	20 ff       	sbrs	r18, 0
    1f02:	03 c0       	rjmp	.+6      	; 0x1f0a <USB_Device_ProcessControlRequest+0x1e6>
					{
						SerialByte >>= 4;
    1f04:	e2 95       	swap	r30
    1f06:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f08:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f0a:	ef 70       	andi	r30, 0x0F	; 15
    1f0c:	8e 2f       	mov	r24, r30
    1f0e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f10:	ea 30       	cpi	r30, 0x0A	; 10
    1f12:	c0 f0       	brcs	.+48     	; 0x1f44 <USB_Device_ProcessControlRequest+0x220>
    1f14:	c7 96       	adiw	r24, 0x37	; 55
    1f16:	8d 93       	st	X+, r24
    1f18:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f1a:	2f 5f       	subi	r18, 0xFF	; 255
    1f1c:	24 31       	cpi	r18, 0x14	; 20
    1f1e:	59 f7       	brne	.-42     	; 0x1ef6 <USB_Device_ProcessControlRequest+0x1d2>
				SREG = GlobalIntState;
    1f20:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1f22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f26:	87 7f       	andi	r24, 0xF7	; 247
    1f28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f2c:	6a e2       	ldi	r22, 0x2A	; 42
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	0e 94 c7 0b 	call	0x178e	; 0x178e <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f3c:	8b 77       	andi	r24, 0x7B	; 123
    1f3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f42:	4c cf       	rjmp	.-360    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f44:	c0 96       	adiw	r24, 0x30	; 48
    1f46:	e7 cf       	rjmp	.-50     	; 0x1f16 <USB_Device_ProcessControlRequest+0x1f2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f48:	ae 01       	movw	r20, r28
    1f4a:	4f 5f       	subi	r20, 0xFF	; 255
    1f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4e:	60 91 64 02 	lds	r22, 0x0264	; 0x800264 <USB_ControlRequest+0x4>
    1f52:	0e 94 0d 0b 	call	0x161a	; 0x161a <CALLBACK_USB_GetDescriptor>
    1f56:	bc 01       	movw	r22, r24
    1f58:	89 2b       	or	r24, r25
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <USB_Device_ProcessControlRequest+0x23a>
    1f5c:	3f cf       	rjmp	.-386    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
				UEINTX &= ~(1 << RXSTPI);
    1f5e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f62:	97 7f       	andi	r25, 0xF7	; 247
    1f64:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	0e 94 26 0c 	call	0x184c	; 0x184c <Endpoint_Write_Control_PStream_LE>
    1f70:	e3 cf       	rjmp	.-58     	; 0x1f38 <USB_Device_ProcessControlRequest+0x214>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f72:	80 38       	cpi	r24, 0x80	; 128
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <USB_Device_ProcessControlRequest+0x254>
    1f76:	32 cf       	rjmp	.-412    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
    1f78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f7c:	87 7f       	andi	r24, 0xF7	; 247
    1f7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f82:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1f86:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1f8a:	1d cf       	rjmp	.-454    	; 0x1dc6 <USB_Device_ProcessControlRequest+0xa2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	26 cf       	rjmp	.-436    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f90:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <USB_ControlRequest+0x2>
    1f94:	92 30       	cpi	r25, 0x02	; 2
    1f96:	08 f0       	brcs	.+2      	; 0x1f9a <USB_Device_ProcessControlRequest+0x276>
    1f98:	21 cf       	rjmp	.-446    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
				UEINTX &= ~(1 << RXSTPI);
    1f9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f9e:	87 7f       	andi	r24, 0xF7	; 247
    1fa0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1fa4:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    1fa8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    1fac:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_Device_ConfigurationNumber>
    1fb0:	88 23       	and	r24, r24
    1fb2:	31 f0       	breq	.+12     	; 0x1fc0 <USB_Device_ProcessControlRequest+0x29c>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1fb4:	84 e0       	ldi	r24, 0x04	; 4
    1fb6:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1fba:	0e 94 de 09 	call	0x13bc	; 0x13bc <EVENT_USB_Device_ConfigurationChanged>
    1fbe:	0e cf       	rjmp	.-484    	; 0x1ddc <USB_Device_ProcessControlRequest+0xb8>
				return (UDADDR & (1 << ADDEN));
    1fc0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1fc4:	87 fd       	sbrc	r24, 7
    1fc6:	f6 cf       	rjmp	.-20     	; 0x1fb4 <USB_Device_ProcessControlRequest+0x290>
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	f5 cf       	rjmp	.-22     	; 0x1fb6 <USB_Device_ProcessControlRequest+0x292>

00001fcc <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    1fcc:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <driver+0x1>
    1fd0:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <driver>
    1fd4:	08 95       	ret

00001fd6 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1fd6:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <driver>
    1fda:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <driver+0x1>
    1fde:	30 97       	sbiw	r30, 0x00	; 0
    1fe0:	21 f0       	breq	.+8      	; 0x1fea <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1fe2:	01 90       	ld	r0, Z+
    1fe4:	f0 81       	ld	r31, Z
    1fe6:	e0 2d       	mov	r30, r0
    1fe8:	09 94       	ijmp
}
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	08 95       	ret

00001fee <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1fee:	ef 92       	push	r14
    1ff0:	ff 92       	push	r15
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	8c 01       	movw	r16, r24
    if (!driver) return;
    1ffc:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <driver>
    2000:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <driver+0x1>
    2004:	30 97       	sbiw	r30, 0x00	; 0
    2006:	c1 f1       	breq	.+112    	; 0x2078 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    2008:	02 80       	ldd	r0, Z+2	; 0x02
    200a:	f3 81       	ldd	r31, Z+3	; 0x03
    200c:	e0 2d       	mov	r30, r0
    200e:	09 95       	icall

    if (debug_keyboard) {
    2010:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    2014:	82 ff       	sbrs	r24, 2
    2016:	30 c0       	rjmp	.+96     	; 0x2078 <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    2018:	80 ff       	sbrs	r24, 0
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <host_keyboard_send+0x36>
    201c:	8c e7       	ldi	r24, 0x7C	; 124
    201e:	93 e0       	ldi	r25, 0x03	; 3
    2020:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
{
    2024:	d0 e0       	ldi	r29, 0x00	; 0
    2026:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2028:	86 e7       	ldi	r24, 0x76	; 118
    202a:	e8 2e       	mov	r14, r24
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	f8 2e       	mov	r15, r24
    2030:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    2034:	80 ff       	sbrs	r24, 0
    2036:	0e c0       	rjmp	.+28     	; 0x2054 <host_keyboard_send+0x66>
    2038:	f8 01       	movw	r30, r16
    203a:	ec 0f       	add	r30, r28
    203c:	fd 1f       	adc	r31, r29
    203e:	80 81       	ld	r24, Z
    2040:	1f 92       	push	r1
    2042:	8f 93       	push	r24
    2044:	ff 92       	push	r15
    2046:	ef 92       	push	r14
    2048:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2056:	c8 30       	cpi	r28, 0x08	; 8
    2058:	d1 05       	cpc	r29, r1
    205a:	51 f7       	brne	.-44     	; 0x2030 <host_keyboard_send+0x42>
        }
        dprint("\n");
    205c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    2060:	80 ff       	sbrs	r24, 0
    2062:	0a c0       	rjmp	.+20     	; 0x2078 <host_keyboard_send+0x8a>
    2064:	84 e7       	ldi	r24, 0x74	; 116
    2066:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
        dprint("\n");
    2074:	0c 94 ef 05 	jmp	0xbde	; 0xbde <xputs>
}
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	08 95       	ret

00002086 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2086:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <driver>
    208a:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <driver+0x1>
    208e:	30 97       	sbiw	r30, 0x00	; 0
    2090:	21 f0       	breq	.+8      	; 0x209a <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2092:	04 80       	ldd	r0, Z+4	; 0x04
    2094:	f5 81       	ldd	r31, Z+5	; 0x05
    2096:	e0 2d       	mov	r30, r0
    2098:	09 94       	ijmp
}
    209a:	08 95       	ret

0000209c <host_system_send>:

void host_system_send(uint16_t report)
{
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    20a2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <last_system_report>
    20a6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <last_system_report+0x1>
    20aa:	8c 17       	cp	r24, r28
    20ac:	9d 07       	cpc	r25, r29
    20ae:	01 f1       	breq	.+64     	; 0x20f0 <host_system_send+0x54>
    last_system_report = report;
    20b0:	d0 93 77 01 	sts	0x0177, r29	; 0x800177 <last_system_report+0x1>
    20b4:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <last_system_report>

    if (!driver) return;
    20b8:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <driver>
    20bc:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <driver+0x1>
    20c0:	30 97       	sbiw	r30, 0x00	; 0
    20c2:	b1 f0       	breq	.+44     	; 0x20f0 <host_system_send+0x54>
    (*driver->send_system)(report);
    20c4:	06 80       	ldd	r0, Z+6	; 0x06
    20c6:	f7 81       	ldd	r31, Z+7	; 0x07
    20c8:	e0 2d       	mov	r30, r0
    20ca:	ce 01       	movw	r24, r28
    20cc:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    20ce:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    20d2:	85 70       	andi	r24, 0x05	; 5
    20d4:	85 30       	cpi	r24, 0x05	; 5
    20d6:	61 f4       	brne	.+24     	; 0x20f0 <host_system_send+0x54>
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	86 e6       	ldi	r24, 0x66	; 102
    20de:	93 e0       	ldi	r25, 0x03	; 3
    20e0:	9f 93       	push	r25
    20e2:	8f 93       	push	r24
    20e4:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    }
}
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	08 95       	ret

000020f6 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    20fc:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <last_consumer_report>
    2100:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <last_consumer_report+0x1>
    2104:	8c 17       	cp	r24, r28
    2106:	9d 07       	cpc	r25, r29
    2108:	01 f1       	breq	.+64     	; 0x214a <host_consumer_send+0x54>
    last_consumer_report = report;
    210a:	d0 93 75 01 	sts	0x0175, r29	; 0x800175 <last_consumer_report+0x1>
    210e:	c0 93 74 01 	sts	0x0174, r28	; 0x800174 <last_consumer_report>

    if (!driver) return;
    2112:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <driver>
    2116:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <driver+0x1>
    211a:	30 97       	sbiw	r30, 0x00	; 0
    211c:	b1 f0       	breq	.+44     	; 0x214a <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    211e:	00 84       	ldd	r0, Z+8	; 0x08
    2120:	f1 85       	ldd	r31, Z+9	; 0x09
    2122:	e0 2d       	mov	r30, r0
    2124:	ce 01       	movw	r24, r28
    2126:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    2128:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    212c:	85 70       	andi	r24, 0x05	; 5
    212e:	85 30       	cpi	r24, 0x05	; 5
    2130:	61 f4       	brne	.+24     	; 0x214a <host_consumer_send+0x54>
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	86 e5       	ldi	r24, 0x56	; 86
    2138:	93 e0       	ldi	r25, 0x03	; 3
    213a:	9f 93       	push	r25
    213c:	8f 93       	push	r24
    213e:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    }
}
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	08 95       	ret

00002150 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    2150:	0c 94 a5 11 	jmp	0x234a	; 0x234a <matrix_setup>

00002154 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2154:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <timer_init>
    matrix_init();
    2158:	0e 94 98 06 	call	0xd30	; 0xd30 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    215c:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <bootmagic>

00002160 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2160:	4f 92       	push	r4
    2162:	5f 92       	push	r5
    2164:	6f 92       	push	r6
    2166:	7f 92       	push	r7
    2168:	8f 92       	push	r8
    216a:	9f 92       	push	r9
    216c:	af 92       	push	r10
    216e:	bf 92       	push	r11
    2170:	df 92       	push	r13
    2172:	ef 92       	push	r14
    2174:	ff 92       	push	r15
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	29 97       	sbiw	r28, 0x09	; 9
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    218e:	0e 94 c4 06 	call	0xd88	; 0xd88 <matrix_scan>
    2192:	0b e7       	ldi	r16, 0x7B	; 123
    2194:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2196:	d1 2c       	mov	r13, r1
        matrix_row = matrix_get_row(r);
    2198:	8d 2d       	mov	r24, r13
    219a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <matrix_get_row>
    219e:	4b 01       	movw	r8, r22
    21a0:	5c 01       	movw	r10, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    21a2:	d8 01       	movw	r26, r16
    21a4:	4d 90       	ld	r4, X+
    21a6:	5d 90       	ld	r5, X+
    21a8:	6d 90       	ld	r6, X+
    21aa:	7c 90       	ld	r7, X
        if (matrix_change) {
    21ac:	48 14       	cp	r4, r8
    21ae:	59 04       	cpc	r5, r9
    21b0:	6a 04       	cpc	r6, r10
    21b2:	7b 04       	cpc	r7, r11
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <keyboard_task+0x58>
    21b6:	62 c0       	rjmp	.+196    	; 0x227c <keyboard_task+0x11c>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    21b8:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    21bc:	81 fd       	sbrc	r24, 1
    21be:	0e 94 a6 11 	call	0x234c	; 0x234c <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    21c2:	f1 2c       	mov	r15, r1
    21c4:	e1 2c       	mov	r14, r1
        matrix_change = matrix_row ^ matrix_prev[r];
    21c6:	d3 01       	movw	r26, r6
    21c8:	c2 01       	movw	r24, r4
    21ca:	88 25       	eor	r24, r8
    21cc:	99 25       	eor	r25, r9
    21ce:	aa 25       	eor	r26, r10
    21d0:	bb 25       	eor	r27, r11
    21d2:	8e 83       	std	Y+6, r24	; 0x06
    21d4:	9f 83       	std	Y+7, r25	; 0x07
    21d6:	a8 87       	std	Y+8, r26	; 0x08
    21d8:	b9 87       	std	Y+9, r27	; 0x09
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    21da:	4e 81       	ldd	r20, Y+6	; 0x06
    21dc:	5f 81       	ldd	r21, Y+7	; 0x07
    21de:	68 85       	ldd	r22, Y+8	; 0x08
    21e0:	79 85       	ldd	r23, Y+9	; 0x09
    21e2:	0e 2c       	mov	r0, r14
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <keyboard_task+0x8e>
    21e6:	76 95       	lsr	r23
    21e8:	67 95       	ror	r22
    21ea:	57 95       	ror	r21
    21ec:	47 95       	ror	r20
    21ee:	0a 94       	dec	r0
    21f0:	d2 f7       	brpl	.-12     	; 0x21e6 <keyboard_task+0x86>
    21f2:	40 ff       	sbrs	r20, 0
    21f4:	3b c0       	rjmp	.+118    	; 0x226c <keyboard_task+0x10c>
                    keyevent_t e = (keyevent_t){
    21f6:	e9 82       	std	Y+1, r14	; 0x01
    21f8:	da 82       	std	Y+2, r13	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    21fa:	41 2c       	mov	r4, r1
    21fc:	51 2c       	mov	r5, r1
    21fe:	32 01       	movw	r6, r4
    2200:	43 94       	inc	r4
    2202:	0e 2c       	mov	r0, r14
    2204:	04 c0       	rjmp	.+8      	; 0x220e <keyboard_task+0xae>
    2206:	44 0c       	add	r4, r4
    2208:	55 1c       	adc	r5, r5
    220a:	66 1c       	adc	r6, r6
    220c:	77 1c       	adc	r7, r7
    220e:	0a 94       	dec	r0
    2210:	d2 f7       	brpl	.-12     	; 0x2206 <keyboard_task+0xa6>
    2212:	b3 01       	movw	r22, r6
    2214:	a2 01       	movw	r20, r4
    2216:	48 21       	and	r20, r8
    2218:	59 21       	and	r21, r9
    221a:	6a 21       	and	r22, r10
    221c:	7b 21       	and	r23, r11
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	45 2b       	or	r20, r21
    2222:	46 2b       	or	r20, r22
    2224:	47 2b       	or	r20, r23
    2226:	09 f4       	brne	.+2      	; 0x222a <keyboard_task+0xca>
    2228:	80 e0       	ldi	r24, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    222a:	8b 83       	std	Y+3, r24	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    222c:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <timer_read>
    2230:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    2232:	78 2f       	mov	r23, r24
    2234:	9d 83       	std	Y+5, r25	; 0x05
    2236:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2238:	49 81       	ldd	r20, Y+1	; 0x01
    223a:	5a 81       	ldd	r21, Y+2	; 0x02
    223c:	6b 81       	ldd	r22, Y+3	; 0x03
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	0e 94 de 11 	call	0x23bc	; 0x23bc <action_exec>
                    hook_matrix_change(e);
    2244:	49 81       	ldd	r20, Y+1	; 0x01
    2246:	5a 81       	ldd	r21, Y+2	; 0x02
    2248:	6b 81       	ldd	r22, Y+3	; 0x03
    224a:	7c 81       	ldd	r23, Y+4	; 0x04
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2252:	f8 01       	movw	r30, r16
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	a2 81       	ldd	r26, Z+2	; 0x02
    225a:	b3 81       	ldd	r27, Z+3	; 0x03
    225c:	84 25       	eor	r24, r4
    225e:	95 25       	eor	r25, r5
    2260:	a6 25       	eor	r26, r6
    2262:	b7 25       	eor	r27, r7
    2264:	80 83       	st	Z, r24
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	a2 83       	std	Z+2, r26	; 0x02
    226a:	b3 83       	std	Z+3, r27	; 0x03
    226c:	ff ef       	ldi	r31, 0xFF	; 255
    226e:	ef 1a       	sub	r14, r31
    2270:	ff 0a       	sbc	r15, r31
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2272:	82 e1       	ldi	r24, 0x12	; 18
    2274:	e8 16       	cp	r14, r24
    2276:	f1 04       	cpc	r15, r1
    2278:	09 f0       	breq	.+2      	; 0x227c <keyboard_task+0x11c>
    227a:	af cf       	rjmp	.-162    	; 0x21da <keyboard_task+0x7a>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    227c:	d3 94       	inc	r13
    227e:	0c 5f       	subi	r16, 0xFC	; 252
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    2282:	96 e0       	ldi	r25, 0x06	; 6
    2284:	d9 12       	cpse	r13, r25
    2286:	88 cf       	rjmp	.-240    	; 0x2198 <keyboard_task+0x38>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2288:	8f ef       	ldi	r24, 0xFF	; 255
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	8a 83       	std	Y+2, r24	; 0x02
    228e:	1b 82       	std	Y+3, r1	; 0x03
    2290:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <timer_read>
    2294:	81 60       	ori	r24, 0x01	; 1
    2296:	78 2f       	mov	r23, r24
    2298:	9d 83       	std	Y+5, r25	; 0x05
    229a:	8c 83       	std	Y+4, r24	; 0x04
    229c:	49 81       	ldd	r20, Y+1	; 0x01
    229e:	5a 81       	ldd	r21, Y+2	; 0x02
    22a0:	6b 81       	ldd	r22, Y+3	; 0x03
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	0e 94 de 11 	call	0x23bc	; 0x23bc <action_exec>

MATRIX_LOOP_END:

    hook_keyboard_loop();
    22a8:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    22ac:	0e 94 27 23 	call	0x464e	; 0x464e <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    22b0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    22b4:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <led_status.2414>
    22b8:	89 17       	cp	r24, r25
    22ba:	71 f1       	breq	.+92     	; 0x2318 <keyboard_task+0x1b8>
        led_status = host_keyboard_leds();
    22bc:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    22c0:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <led_status.2414>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    22c4:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <debug_config>
    22c8:	95 70       	andi	r25, 0x05	; 5
    22ca:	95 30       	cpi	r25, 0x05	; 5
    22cc:	61 f4       	brne	.+24     	; 0x22e6 <keyboard_task+0x186>
    22ce:	1f 92       	push	r1
    22d0:	8f 93       	push	r24
    22d2:	87 e8       	ldi	r24, 0x87	; 135
    22d4:	93 e0       	ldi	r25, 0x03	; 3
    22d6:	9f 93       	push	r25
    22d8:	8f 93       	push	r24
    22da:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    22e6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <led_status.2414>
    }
}
    22ea:	29 96       	adiw	r28, 0x09	; 9
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	ff 90       	pop	r15
    2300:	ef 90       	pop	r14
    2302:	df 90       	pop	r13
    2304:	bf 90       	pop	r11
    2306:	af 90       	pop	r10
    2308:	9f 90       	pop	r9
    230a:	8f 90       	pop	r8
    230c:	7f 90       	pop	r7
    230e:	6f 90       	pop	r6
    2310:	5f 90       	pop	r5
    2312:	4f 90       	pop	r4
        hook_keyboard_leds_change(led_status);
    2314:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <hook_keyboard_leds_change>
}
    2318:	29 96       	adiw	r28, 0x09	; 9
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	df 90       	pop	r13
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	7f 90       	pop	r7
    233c:	6f 90       	pop	r6
    233e:	5f 90       	pop	r5
    2340:	4f 90       	pop	r4
    2342:	08 95       	ret

00002344 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2344:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <led_set>

00002348 <matrix_clear>:
    2348:	08 95       	ret

0000234a <matrix_setup>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix_get_row(row) & (1<<col));
}
    234a:	08 95       	ret

0000234c <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
#elif (MATRIX_COLS <= 16)
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
    2358:	81 ea       	ldi	r24, 0xA1	; 161
    235a:	93 e0       	ldi	r25, 0x03	; 3
    235c:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    2360:	d0 e0       	ldi	r29, 0x00	; 0
    2362:	c0 e0       	ldi	r28, 0x00	; 0
#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
#elif (MATRIX_COLS <= 16)
        xprintf("%02X: %016b%s\n", row, bitrev16(matrix_get_row(row)),
#elif (MATRIX_COLS <= 32)
        xprintf("%02X: %032b%s\n", row, bitrev32(matrix_get_row(row)),
    2364:	88 e2       	ldi	r24, 0x28	; 40
    2366:	e8 2e       	mov	r14, r24
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	f8 2e       	mov	r15, r24
    236c:	02 e9       	ldi	r16, 0x92	; 146
    236e:	13 e0       	ldi	r17, 0x03	; 3
    2370:	8c 2f       	mov	r24, r28
    2372:	0e 94 52 08 	call	0x10a4	; 0x10a4 <matrix_get_row>
    2376:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <bitrev32>
    237a:	ff 92       	push	r15
    237c:	ef 92       	push	r14
    237e:	9f 93       	push	r25
    2380:	8f 93       	push	r24
    2382:	7f 93       	push	r23
    2384:	6f 93       	push	r22
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	1f 93       	push	r17
    238c:	0f 93       	push	r16
    238e:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    2392:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    2394:	8d b7       	in	r24, 0x3d	; 61
    2396:	9e b7       	in	r25, 0x3e	; 62
    2398:	0a 96       	adiw	r24, 0x0a	; 10
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	9e bf       	out	0x3e, r25	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	8d bf       	out	0x3d, r24	; 61
    23a4:	c6 30       	cpi	r28, 0x06	; 6
    23a6:	d1 05       	cpc	r29, r1
    23a8:	19 f7       	brne	.-58     	; 0x2370 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	ff 90       	pop	r15
    23b4:	ef 90       	pop	r14
    23b6:	08 95       	ret

000023b8 <matrix_power_up>:
    23b8:	08 95       	ret

000023ba <matrix_power_down>:
    23ba:	08 95       	ret

000023bc <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	2b 97       	sbiw	r28, 0x0b	; 11
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	94 2f       	mov	r25, r20
    23d2:	4f 83       	std	Y+7, r20	; 0x07
    23d4:	25 2f       	mov	r18, r21
    23d6:	58 87       	std	Y+8, r21	; 0x08
    23d8:	69 87       	std	Y+9, r22	; 0x09
    23da:	7a 87       	std	Y+10, r23	; 0x0a
    23dc:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    23de:	4a 85       	ldd	r20, Y+10	; 0x0a
    23e0:	5b 85       	ldd	r21, Y+11	; 0x0b
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	45 2b       	or	r20, r21
    23e6:	31 f0       	breq	.+12     	; 0x23f4 <action_exec+0x38>
    23e8:	2f 3f       	cpi	r18, 0xFF	; 255
    23ea:	19 f4       	brne	.+6      	; 0x23f2 <action_exec+0x36>
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	9f 3f       	cpi	r25, 0xFF	; 255
    23f0:	09 f0       	breq	.+2      	; 0x23f4 <action_exec+0x38>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    if (!IS_NOEVENT(event)) {
    23f4:	80 fd       	sbrc	r24, 0
    23f6:	07 c0       	rjmp	.+14     	; 0x2406 <action_exec+0x4a>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    23f8:	4f 81       	ldd	r20, Y+7	; 0x07
    23fa:	58 85       	ldd	r21, Y+8	; 0x08
    23fc:	69 85       	ldd	r22, Y+9	; 0x09
    23fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    2400:	8b 85       	ldd	r24, Y+11	; 0x0b
    2402:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2406:	1e 82       	std	Y+6, r1	; 0x06
    2408:	1d 82       	std	Y+5, r1	; 0x05
    240a:	85 e0       	ldi	r24, 0x05	; 5
    240c:	fe 01       	movw	r30, r28
    240e:	37 96       	adiw	r30, 0x07	; 7
    2410:	de 01       	movw	r26, r28
    2412:	11 96       	adiw	r26, 0x01	; 1
    2414:	01 90       	ld	r0, Z+
    2416:	0d 92       	st	X+, r0
    2418:	8a 95       	dec	r24
    241a:	e1 f7       	brne	.-8      	; 0x2414 <action_exec+0x58>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    241c:	49 81       	ldd	r20, Y+1	; 0x01
    241e:	5a 81       	ldd	r21, Y+2	; 0x02
    2420:	6b 81       	ldd	r22, Y+3	; 0x03
    2422:	7c 81       	ldd	r23, Y+4	; 0x04
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2428:	2b 96       	adiw	r28, 0x0b	; 11
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    action_tapping_process(record);
    2438:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <action_tapping_process>

0000243c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    243c:	cf 93       	push	r28
    243e:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2440:	88 23       	and	r24, r24
    2442:	09 f4       	brne	.+2      	; 0x2446 <register_code+0xa>
    2444:	d4 c0       	rjmp	.+424    	; 0x25ee <register_code+0x1b2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2446:	82 38       	cpi	r24, 0x82	; 130
    2448:	c1 f4       	brne	.+48     	; 0x247a <register_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    244a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    244e:	81 fd       	sbrc	r24, 1
    2450:	ce c0       	rjmp	.+412    	; 0x25ee <register_code+0x1b2>
#endif
        add_key(KC_CAPSLOCK);
    2452:	89 e3       	ldi	r24, 0x39	; 57
    2454:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <add_key>
        send_keyboard_report();
    2458:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
	__builtin_avr_delay_cycles(__ticks_dc);
    245c:	2f ef       	ldi	r18, 0xFF	; 255
    245e:	81 ee       	ldi	r24, 0xE1	; 225
    2460:	94 e0       	ldi	r25, 0x04	; 4
    2462:	21 50       	subi	r18, 0x01	; 1
    2464:	80 40       	sbci	r24, 0x00	; 0
    2466:	90 40       	sbci	r25, 0x00	; 0
    2468:	e1 f7       	brne	.-8      	; 0x2462 <register_code+0x26>
    246a:	00 c0       	rjmp	.+0      	; 0x246c <register_code+0x30>
    246c:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    246e:	89 e3       	ldi	r24, 0x39	; 57
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2470:	0e 94 6f 1c 	call	0x38de	; 0x38de <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2474:	cf 91       	pop	r28
        send_keyboard_report();
    2476:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    247a:	83 38       	cpi	r24, 0x83	; 131
    247c:	a1 f4       	brne	.+40     	; 0x24a6 <register_code+0x6a>
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    247e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    2482:	80 fd       	sbrc	r24, 0
    2484:	b4 c0       	rjmp	.+360    	; 0x25ee <register_code+0x1b2>
        add_key(KC_NUMLOCK);
    2486:	83 e5       	ldi	r24, 0x53	; 83
    2488:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <add_key>
        send_keyboard_report();
    248c:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
    2490:	2f ef       	ldi	r18, 0xFF	; 255
    2492:	81 ee       	ldi	r24, 0xE1	; 225
    2494:	94 e0       	ldi	r25, 0x04	; 4
    2496:	21 50       	subi	r18, 0x01	; 1
    2498:	80 40       	sbci	r24, 0x00	; 0
    249a:	90 40       	sbci	r25, 0x00	; 0
    249c:	e1 f7       	brne	.-8      	; 0x2496 <register_code+0x5a>
    249e:	00 c0       	rjmp	.+0      	; 0x24a0 <register_code+0x64>
    24a0:	00 00       	nop
        del_key(KC_NUMLOCK);
    24a2:	83 e5       	ldi	r24, 0x53	; 83
    24a4:	e5 cf       	rjmp	.-54     	; 0x2470 <register_code+0x34>
    else if (KC_LOCKING_SCROLL == code) {
    24a6:	84 38       	cpi	r24, 0x84	; 132
    24a8:	a1 f4       	brne	.+40     	; 0x24d2 <register_code+0x96>
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    24aa:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    24ae:	82 fd       	sbrc	r24, 2
    24b0:	9e c0       	rjmp	.+316    	; 0x25ee <register_code+0x1b2>
        add_key(KC_SCROLLLOCK);
    24b2:	87 e4       	ldi	r24, 0x47	; 71
    24b4:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <add_key>
        send_keyboard_report();
    24b8:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
    24bc:	2f ef       	ldi	r18, 0xFF	; 255
    24be:	81 ee       	ldi	r24, 0xE1	; 225
    24c0:	94 e0       	ldi	r25, 0x04	; 4
    24c2:	21 50       	subi	r18, 0x01	; 1
    24c4:	80 40       	sbci	r24, 0x00	; 0
    24c6:	90 40       	sbci	r25, 0x00	; 0
    24c8:	e1 f7       	brne	.-8      	; 0x24c2 <register_code+0x86>
    24ca:	00 c0       	rjmp	.+0      	; 0x24cc <register_code+0x90>
    24cc:	00 00       	nop
        del_key(KC_SCROLLLOCK);
    24ce:	87 e4       	ldi	r24, 0x47	; 71
    24d0:	cf cf       	rjmp	.-98     	; 0x2470 <register_code+0x34>
    else if IS_KEY(code) {
    24d2:	8c ef       	ldi	r24, 0xFC	; 252
    24d4:	8c 0f       	add	r24, r28
    24d6:	81 3a       	cpi	r24, 0xA1	; 161
    24d8:	48 f4       	brcc	.+18     	; 0x24ec <register_code+0xb0>
        if (command_proc(code)) return;
    24da:	8c 2f       	mov	r24, r28
    24dc:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <command_proc>
    24e0:	81 11       	cpse	r24, r1
    24e2:	85 c0       	rjmp	.+266    	; 0x25ee <register_code+0x1b2>
            add_key(code);
    24e4:	8c 2f       	mov	r24, r28
    24e6:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <add_key>
    24ea:	c4 cf       	rjmp	.-120    	; 0x2474 <register_code+0x38>
    else if IS_MOD(code) {
    24ec:	80 e2       	ldi	r24, 0x20	; 32
    24ee:	8c 0f       	add	r24, r28
    24f0:	88 30       	cpi	r24, 0x08	; 8
    24f2:	48 f4       	brcc	.+18     	; 0x2506 <register_code+0xca>
        add_mods(MOD_BIT(code));
    24f4:	c7 70       	andi	r28, 0x07	; 7
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	01 c0       	rjmp	.+2      	; 0x24fc <register_code+0xc0>
    24fa:	88 0f       	add	r24, r24
    24fc:	ca 95       	dec	r28
    24fe:	ea f7       	brpl	.-6      	; 0x24fa <register_code+0xbe>
    2500:	0e 94 92 1c 	call	0x3924	; 0x3924 <add_mods>
    2504:	b7 cf       	rjmp	.-146    	; 0x2474 <register_code+0x38>
    else if IS_SYSTEM(code) {
    2506:	8b e5       	ldi	r24, 0x5B	; 91
    2508:	8c 0f       	add	r24, r28
    250a:	83 30       	cpi	r24, 0x03	; 3
    250c:	68 f4       	brcc	.+26     	; 0x2528 <register_code+0xec>
        host_system_send(KEYCODE2SYSTEM(code));
    250e:	81 e8       	ldi	r24, 0x81	; 129
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	c5 3a       	cpi	r28, 0xA5	; 165
    2514:	31 f0       	breq	.+12     	; 0x2522 <register_code+0xe6>
    2516:	83 e8       	ldi	r24, 0x83	; 131
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	c6 3a       	cpi	r28, 0xA6	; 166
    251c:	11 f4       	brne	.+4      	; 0x2522 <register_code+0xe6>
    251e:	82 e8       	ldi	r24, 0x82	; 130
    2520:	90 e0       	ldi	r25, 0x00	; 0
}
    2522:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2524:	0c 94 4e 10 	jmp	0x209c	; 0x209c <host_system_send>
    else if IS_CONSUMER(code) {
    2528:	88 e5       	ldi	r24, 0x58	; 88
    252a:	8c 0f       	add	r24, r28
    252c:	85 31       	cpi	r24, 0x15	; 21
    252e:	08 f0       	brcs	.+2      	; 0x2532 <register_code+0xf6>
    2530:	5e c0       	rjmp	.+188    	; 0x25ee <register_code+0x1b2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2532:	82 ee       	ldi	r24, 0xE2	; 226
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	c8 3a       	cpi	r28, 0xA8	; 168
    2538:	09 f4       	brne	.+2      	; 0x253c <register_code+0x100>
    253a:	56 c0       	rjmp	.+172    	; 0x25e8 <register_code+0x1ac>
    253c:	89 ee       	ldi	r24, 0xE9	; 233
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	c9 3a       	cpi	r28, 0xA9	; 169
    2542:	09 f4       	brne	.+2      	; 0x2546 <register_code+0x10a>
    2544:	51 c0       	rjmp	.+162    	; 0x25e8 <register_code+0x1ac>
    2546:	8a ee       	ldi	r24, 0xEA	; 234
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	ca 3a       	cpi	r28, 0xAA	; 170
    254c:	09 f4       	brne	.+2      	; 0x2550 <register_code+0x114>
    254e:	4c c0       	rjmp	.+152    	; 0x25e8 <register_code+0x1ac>
    2550:	85 eb       	ldi	r24, 0xB5	; 181
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	cb 3a       	cpi	r28, 0xAB	; 171
    2556:	09 f4       	brne	.+2      	; 0x255a <register_code+0x11e>
    2558:	47 c0       	rjmp	.+142    	; 0x25e8 <register_code+0x1ac>
    255a:	86 eb       	ldi	r24, 0xB6	; 182
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	cc 3a       	cpi	r28, 0xAC	; 172
    2560:	09 f4       	brne	.+2      	; 0x2564 <register_code+0x128>
    2562:	42 c0       	rjmp	.+132    	; 0x25e8 <register_code+0x1ac>
    2564:	83 eb       	ldi	r24, 0xB3	; 179
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	cd 3a       	cpi	r28, 0xAD	; 173
    256a:	f1 f1       	breq	.+124    	; 0x25e8 <register_code+0x1ac>
    256c:	84 eb       	ldi	r24, 0xB4	; 180
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	ce 3a       	cpi	r28, 0xAE	; 174
    2572:	d1 f1       	breq	.+116    	; 0x25e8 <register_code+0x1ac>
    2574:	87 eb       	ldi	r24, 0xB7	; 183
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	cf 3a       	cpi	r28, 0xAF	; 175
    257a:	b1 f1       	breq	.+108    	; 0x25e8 <register_code+0x1ac>
    257c:	8c ec       	ldi	r24, 0xCC	; 204
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	c1 3b       	cpi	r28, 0xB1	; 177
    2582:	91 f1       	breq	.+100    	; 0x25e8 <register_code+0x1ac>
    2584:	8d ec       	ldi	r24, 0xCD	; 205
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	c0 3b       	cpi	r28, 0xB0	; 176
    258a:	71 f1       	breq	.+92     	; 0x25e8 <register_code+0x1ac>
    258c:	83 e8       	ldi	r24, 0x83	; 131
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	c2 3b       	cpi	r28, 0xB2	; 178
    2592:	51 f1       	breq	.+84     	; 0x25e8 <register_code+0x1ac>
    2594:	8a e8       	ldi	r24, 0x8A	; 138
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	c3 3b       	cpi	r28, 0xB3	; 179
    259a:	31 f1       	breq	.+76     	; 0x25e8 <register_code+0x1ac>
    259c:	82 e9       	ldi	r24, 0x92	; 146
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	c4 3b       	cpi	r28, 0xB4	; 180
    25a2:	11 f1       	breq	.+68     	; 0x25e8 <register_code+0x1ac>
    25a4:	84 e9       	ldi	r24, 0x94	; 148
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	c5 3b       	cpi	r28, 0xB5	; 181
    25aa:	f1 f0       	breq	.+60     	; 0x25e8 <register_code+0x1ac>
    25ac:	81 e2       	ldi	r24, 0x21	; 33
    25ae:	92 e0       	ldi	r25, 0x02	; 2
    25b0:	c6 3b       	cpi	r28, 0xB6	; 182
    25b2:	d1 f0       	breq	.+52     	; 0x25e8 <register_code+0x1ac>
    25b4:	83 e2       	ldi	r24, 0x23	; 35
    25b6:	92 e0       	ldi	r25, 0x02	; 2
    25b8:	c7 3b       	cpi	r28, 0xB7	; 183
    25ba:	b1 f0       	breq	.+44     	; 0x25e8 <register_code+0x1ac>
    25bc:	84 e2       	ldi	r24, 0x24	; 36
    25be:	92 e0       	ldi	r25, 0x02	; 2
    25c0:	c8 3b       	cpi	r28, 0xB8	; 184
    25c2:	91 f0       	breq	.+36     	; 0x25e8 <register_code+0x1ac>
    25c4:	85 e2       	ldi	r24, 0x25	; 37
    25c6:	92 e0       	ldi	r25, 0x02	; 2
    25c8:	c9 3b       	cpi	r28, 0xB9	; 185
    25ca:	71 f0       	breq	.+28     	; 0x25e8 <register_code+0x1ac>
    25cc:	86 e2       	ldi	r24, 0x26	; 38
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	ca 3b       	cpi	r28, 0xBA	; 186
    25d2:	51 f0       	breq	.+20     	; 0x25e8 <register_code+0x1ac>
    25d4:	87 e2       	ldi	r24, 0x27	; 39
    25d6:	92 e0       	ldi	r25, 0x02	; 2
    25d8:	cb 3b       	cpi	r28, 0xBB	; 187
    25da:	31 f0       	breq	.+12     	; 0x25e8 <register_code+0x1ac>
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	cc 3b       	cpi	r28, 0xBC	; 188
    25e2:	11 f4       	brne	.+4      	; 0x25e8 <register_code+0x1ac>
    25e4:	8a e2       	ldi	r24, 0x2A	; 42
    25e6:	92 e0       	ldi	r25, 0x02	; 2
}
    25e8:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    25ea:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <host_consumer_send>
}
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    25f2:	88 23       	and	r24, r24
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <unregister_code+0x6>
    25f6:	66 c0       	rjmp	.+204    	; 0x26c4 <unregister_code+0xd2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    25f8:	82 38       	cpi	r24, 0x82	; 130
    25fa:	b9 f4       	brne	.+46     	; 0x262a <unregister_code+0x38>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    25fc:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    2600:	81 ff       	sbrs	r24, 1
    2602:	60 c0       	rjmp	.+192    	; 0x26c4 <unregister_code+0xd2>
#endif
        add_key(KC_CAPSLOCK);
    2604:	89 e3       	ldi	r24, 0x39	; 57
    2606:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <add_key>
        send_keyboard_report();
    260a:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
    260e:	2f ef       	ldi	r18, 0xFF	; 255
    2610:	81 ee       	ldi	r24, 0xE1	; 225
    2612:	94 e0       	ldi	r25, 0x04	; 4
    2614:	21 50       	subi	r18, 0x01	; 1
    2616:	80 40       	sbci	r24, 0x00	; 0
    2618:	90 40       	sbci	r25, 0x00	; 0
    261a:	e1 f7       	brne	.-8      	; 0x2614 <unregister_code+0x22>
    261c:	00 c0       	rjmp	.+0      	; 0x261e <unregister_code+0x2c>
    261e:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2620:	89 e3       	ldi	r24, 0x39	; 57
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2622:	0e 94 6f 1c 	call	0x38de	; 0x38de <del_key>
        send_keyboard_report();
    2626:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    262a:	83 38       	cpi	r24, 0x83	; 131
    262c:	a1 f4       	brne	.+40     	; 0x2656 <unregister_code+0x64>
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    262e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    2632:	80 ff       	sbrs	r24, 0
    2634:	47 c0       	rjmp	.+142    	; 0x26c4 <unregister_code+0xd2>
        add_key(KC_NUMLOCK);
    2636:	83 e5       	ldi	r24, 0x53	; 83
    2638:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <add_key>
        send_keyboard_report();
    263c:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
    2640:	2f ef       	ldi	r18, 0xFF	; 255
    2642:	81 ee       	ldi	r24, 0xE1	; 225
    2644:	94 e0       	ldi	r25, 0x04	; 4
    2646:	21 50       	subi	r18, 0x01	; 1
    2648:	80 40       	sbci	r24, 0x00	; 0
    264a:	90 40       	sbci	r25, 0x00	; 0
    264c:	e1 f7       	brne	.-8      	; 0x2646 <unregister_code+0x54>
    264e:	00 c0       	rjmp	.+0      	; 0x2650 <unregister_code+0x5e>
    2650:	00 00       	nop
        del_key(KC_NUMLOCK);
    2652:	83 e5       	ldi	r24, 0x53	; 83
    2654:	e6 cf       	rjmp	.-52     	; 0x2622 <unregister_code+0x30>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2656:	84 38       	cpi	r24, 0x84	; 132
    2658:	a1 f4       	brne	.+40     	; 0x2682 <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    265a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    265e:	82 ff       	sbrs	r24, 2
    2660:	31 c0       	rjmp	.+98     	; 0x26c4 <unregister_code+0xd2>
#endif
        add_key(KC_SCROLLLOCK);
    2662:	87 e4       	ldi	r24, 0x47	; 71
    2664:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <add_key>
        send_keyboard_report();
    2668:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
    266c:	2f ef       	ldi	r18, 0xFF	; 255
    266e:	81 ee       	ldi	r24, 0xE1	; 225
    2670:	94 e0       	ldi	r25, 0x04	; 4
    2672:	21 50       	subi	r18, 0x01	; 1
    2674:	80 40       	sbci	r24, 0x00	; 0
    2676:	90 40       	sbci	r25, 0x00	; 0
    2678:	e1 f7       	brne	.-8      	; 0x2672 <unregister_code+0x80>
    267a:	00 c0       	rjmp	.+0      	; 0x267c <unregister_code+0x8a>
    267c:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    267e:	87 e4       	ldi	r24, 0x47	; 71
    2680:	d0 cf       	rjmp	.-96     	; 0x2622 <unregister_code+0x30>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2682:	9c ef       	ldi	r25, 0xFC	; 252
    2684:	98 0f       	add	r25, r24
    2686:	91 3a       	cpi	r25, 0xA1	; 161
    2688:	60 f2       	brcs	.-104    	; 0x2622 <unregister_code+0x30>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    268a:	90 e2       	ldi	r25, 0x20	; 32
    268c:	98 0f       	add	r25, r24
    268e:	98 30       	cpi	r25, 0x08	; 8
    2690:	50 f4       	brcc	.+20     	; 0x26a6 <unregister_code+0xb4>
        del_mods(MOD_BIT(code));
    2692:	87 70       	andi	r24, 0x07	; 7
    2694:	91 e0       	ldi	r25, 0x01	; 1
    2696:	01 c0       	rjmp	.+2      	; 0x269a <unregister_code+0xa8>
    2698:	99 0f       	add	r25, r25
    269a:	8a 95       	dec	r24
    269c:	ea f7       	brpl	.-6      	; 0x2698 <unregister_code+0xa6>
    269e:	89 2f       	mov	r24, r25
    26a0:	0e 94 98 1c 	call	0x3930	; 0x3930 <del_mods>
    26a4:	c0 cf       	rjmp	.-128    	; 0x2626 <unregister_code+0x34>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    26a6:	9b e5       	ldi	r25, 0x5B	; 91
    26a8:	98 0f       	add	r25, r24
    26aa:	93 30       	cpi	r25, 0x03	; 3
    26ac:	20 f4       	brcc	.+8      	; 0x26b6 <unregister_code+0xc4>
        host_system_send(0);
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	0c 94 4e 10 	jmp	0x209c	; 0x209c <host_system_send>
    }
    else if IS_CONSUMER(code) {
    26b6:	88 5a       	subi	r24, 0xA8	; 168
    26b8:	85 31       	cpi	r24, 0x15	; 21
    26ba:	20 f4       	brcc	.+8      	; 0x26c4 <unregister_code+0xd2>
        host_consumer_send(0);
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <host_consumer_send>
    }
}
    26c4:	08 95       	ret

000026c6 <register_mods>:

void register_mods(uint8_t mods)
{
    if (mods) {
    26c6:	88 23       	and	r24, r24
    26c8:	21 f0       	breq	.+8      	; 0x26d2 <register_mods+0xc>
        add_mods(mods);
    26ca:	0e 94 92 1c 	call	0x3924	; 0x3924 <add_mods>
        send_keyboard_report();
    26ce:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <send_keyboard_report>
    }
}
    26d2:	08 95       	ret

000026d4 <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    26d4:	88 23       	and	r24, r24
    26d6:	21 f0       	breq	.+8      	; 0x26e0 <unregister_mods+0xc>
        del_mods(mods);
    26d8:	0e 94 98 1c 	call	0x3930	; 0x3930 <del_mods>
        send_keyboard_report();
    26dc:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <send_keyboard_report>
    }
}
    26e0:	08 95       	ret

000026e2 <process_action>:
{
    26e2:	af 92       	push	r10
    26e4:	bf 92       	push	r11
    26e6:	cf 92       	push	r12
    26e8:	df 92       	push	r13
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <process_action+0x16>
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <process_action+0x18>
    26fa:	1f 92       	push	r1
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    2702:	85 e0       	ldi	r24, 0x05	; 5
    2704:	f5 01       	movw	r30, r10
    2706:	de 01       	movw	r26, r28
    2708:	11 96       	adiw	r26, 0x01	; 1
    270a:	01 90       	ld	r0, Z+
    270c:	0d 92       	st	X+, r0
    270e:	8a 95       	dec	r24
    2710:	e1 f7       	brne	.-8      	; 0x270a <process_action+0x28>
    2712:	f5 01       	movw	r30, r10
    2714:	40 81       	ld	r20, Z
    2716:	51 81       	ldd	r21, Z+1	; 0x01
    2718:	23 81       	ldd	r18, Z+3	; 0x03
    271a:	34 81       	ldd	r19, Z+4	; 0x04
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	21 15       	cp	r18, r1
    2720:	31 05       	cpc	r19, r1
    2722:	31 f0       	breq	.+12     	; 0x2730 <process_action+0x4e>
    2724:	5f 3f       	cpi	r21, 0xFF	; 255
    2726:	19 f4       	brne	.+6      	; 0x272e <process_action+0x4c>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	4f 3f       	cpi	r20, 0xFF	; 255
    272c:	09 f0       	breq	.+2      	; 0x2730 <process_action+0x4e>
    272e:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return; }
    2730:	80 fd       	sbrc	r24, 0
    2732:	c5 c0       	rjmp	.+394    	; 0x28be <process_action+0x1dc>
    keyevent_t event = record->event;
    2734:	f5 01       	movw	r30, r10
    2736:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    2738:	e5 80       	ldd	r14, Z+5	; 0x05
    273a:	e2 94       	swap	r14
    273c:	6f e0       	ldi	r22, 0x0F	; 15
    273e:	e6 22       	and	r14, r22
    action_t action = layer_switch_get_action(event);
    2740:	72 2f       	mov	r23, r18
    2742:	3d 83       	std	Y+5, r19	; 0x05
    2744:	2c 83       	std	Y+4, r18	; 0x04
    2746:	6f 2d       	mov	r22, r15
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <layer_switch_get_action>
    274e:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    2750:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2754:	0e 94 c7 1a 	call	0x358e	; 0x358e <default_layer_debug>
    switch (action.kind.id) {
    2758:	e1 2f       	mov	r30, r17
    275a:	e2 95       	swap	r30
    275c:	ef 70       	andi	r30, 0x0F	; 15
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	ec 54       	subi	r30, 0x4C	; 76
    2762:	fc 4e       	sbci	r31, 0xEC	; 236
    2764:	0c 94 fe 29 	jmp	0x53fc	; 0x53fc <__tablejump2__>
    2768:	c4 13       	cpse	r28, r20
    276a:	c4 13       	cpse	r28, r20
    276c:	01 14       	cp	r0, r1
    276e:	01 14       	cp	r0, r1
    2770:	92 14       	cp	r9, r2
    2772:	c7 14       	cp	r12, r7
    2774:	5f 14       	cp	r5, r15
    2776:	5f 14       	cp	r5, r15
    2778:	e0 14       	cp	r14, r0
    277a:	5f 14       	cp	r5, r15
    277c:	cc 15       	cp	r28, r12
    277e:	cc 15       	cp	r28, r12
    2780:	72 16       	cp	r7, r18
    2782:	5f 14       	cp	r5, r15
    2784:	5f 14       	cp	r5, r15
    2786:	89 16       	cp	r8, r25
    2788:	f1 2f       	mov	r31, r17
    278a:	ff 70       	andi	r31, 0x0F	; 15
    278c:	ef 2e       	mov	r14, r31
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    278e:	10 7f       	andi	r17, 0xF0	; 240
    2790:	19 f0       	breq	.+6      	; 0x2798 <process_action+0xb6>
    2792:	e2 94       	swap	r14
    2794:	90 ef       	ldi	r25, 0xF0	; 240
    2796:	e9 22       	and	r14, r25
                if (event.pressed) {
    2798:	ff 20       	and	r15, r15
    279a:	c9 f0       	breq	.+50     	; 0x27ce <process_action+0xec>
                    if (mods) {
    279c:	ee 20       	and	r14, r14
    279e:	29 f0       	breq	.+10     	; 0x27aa <process_action+0xc8>
                        add_weak_mods(mods);
    27a0:	8e 2d       	mov	r24, r14
    27a2:	0e 94 a6 1c 	call	0x394c	; 0x394c <add_weak_mods>
                        send_keyboard_report();
    27a6:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
                            register_code(action.layer_tap.code);
    27aa:	80 2f       	mov	r24, r16
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	df 90       	pop	r13
    27c4:	cf 90       	pop	r12
    27c6:	bf 90       	pop	r11
    27c8:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    27ca:	0c 94 1e 12 	jmp	0x243c	; 0x243c <register_code>
                    unregister_code(action.key.code);
    27ce:	80 2f       	mov	r24, r16
    27d0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <unregister_code>
                    if (mods) {
    27d4:	ee 20       	and	r14, r14
    27d6:	09 f4       	brne	.+2      	; 0x27da <process_action+0xf8>
    27d8:	72 c0       	rjmp	.+228    	; 0x28be <process_action+0x1dc>
                        del_weak_mods(mods);
    27da:	8e 2d       	mov	r24, r14
    27dc:	0e 94 ac 1c 	call	0x3958	; 0x3958 <del_weak_mods>
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	ff 90       	pop	r15
    27f4:	ef 90       	pop	r14
    27f6:	df 90       	pop	r13
    27f8:	cf 90       	pop	r12
    27fa:	bf 90       	pop	r11
    27fc:	af 90       	pop	r10
                        send_keyboard_report();
    27fe:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <send_keyboard_report>
    2802:	81 2f       	mov	r24, r17
    2804:	8f 70       	andi	r24, 0x0F	; 15
    2806:	d8 2e       	mov	r13, r24
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2808:	10 7f       	andi	r17, 0xF0	; 240
    280a:	10 32       	cpi	r17, 0x20	; 32
    280c:	19 f0       	breq	.+6      	; 0x2814 <process_action+0x132>
    280e:	d2 94       	swap	r13
    2810:	80 ef       	ldi	r24, 0xF0	; 240
    2812:	d8 22       	and	r13, r24
                switch (action.key.code) {
    2814:	00 23       	and	r16, r16
    2816:	79 f0       	breq	.+30     	; 0x2836 <process_action+0x154>
    2818:	01 30       	cpi	r16, 0x01	; 1
    281a:	09 f4       	brne	.+2      	; 0x281e <process_action+0x13c>
    281c:	60 c0       	rjmp	.+192    	; 0x28de <process_action+0x1fc>
                        if (event.pressed) {
    281e:	ff 20       	and	r15, r15
    2820:	09 f4       	brne	.+2      	; 0x2824 <process_action+0x142>
    2822:	6c c0       	rjmp	.+216    	; 0x28fc <process_action+0x21a>
                            if (tap_count > 0) {
    2824:	ee 20       	and	r14, r14
    2826:	59 f0       	breq	.+22     	; 0x283e <process_action+0x15c>
                                if (record->tap.interrupted) {
    2828:	f5 01       	movw	r30, r10
    282a:	85 81       	ldd	r24, Z+5	; 0x05
    282c:	80 ff       	sbrs	r24, 0
    282e:	bd cf       	rjmp	.-134    	; 0x27aa <process_action+0xc8>
                                    record->tap.count = 0;
    2830:	8f 70       	andi	r24, 0x0F	; 15
    2832:	85 83       	std	Z+5, r24	; 0x05
    2834:	04 c0       	rjmp	.+8      	; 0x283e <process_action+0x15c>
                        if (event.pressed) {
    2836:	ff 20       	and	r15, r15
    2838:	49 f1       	breq	.+82     	; 0x288c <process_action+0x1aa>
                            if (tap_count == 0) {
    283a:	e1 10       	cpse	r14, r1
    283c:	12 c0       	rjmp	.+36     	; 0x2862 <process_action+0x180>
                                    register_mods(mods);
    283e:	8d 2d       	mov	r24, r13
}
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	df 90       	pop	r13
    2858:	cf 90       	pop	r12
    285a:	bf 90       	pop	r11
    285c:	af 90       	pop	r10
                                    register_mods(mods);
    285e:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <register_mods>
                            else if (tap_count == 1) {
    2862:	e1 e0       	ldi	r30, 0x01	; 1
                                set_oneshot_mods(mods);
    2864:	8d 2d       	mov	r24, r13
                            else if (tap_count == 1) {
    2866:	ee 12       	cpse	r14, r30
    2868:	eb cf       	rjmp	.-42     	; 0x2840 <process_action+0x15e>
}
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	cf 90       	pop	r12
    2884:	bf 90       	pop	r11
    2886:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    2888:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <set_oneshot_mods>
                            if (tap_count == 0) {
    288c:	e1 10       	cpse	r14, r1
    288e:	14 c0       	rjmp	.+40     	; 0x28b8 <process_action+0x1d6>
                                clear_oneshot_mods();
    2890:	0e 94 ba 1c 	call	0x3974	; 0x3974 <clear_oneshot_mods>
                                unregister_mods(mods);
    2894:	8d 2d       	mov	r24, r13
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	ff 90       	pop	r15
    28aa:	ef 90       	pop	r14
    28ac:	df 90       	pop	r13
    28ae:	cf 90       	pop	r12
    28b0:	bf 90       	pop	r11
    28b2:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    28b4:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <unregister_mods>
                            else if (tap_count == 1) {
    28b8:	f1 e0       	ldi	r31, 0x01	; 1
    28ba:	ef 12       	cpse	r14, r31
    28bc:	e9 cf       	rjmp	.-46     	; 0x2890 <process_action+0x1ae>
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	cf 90       	pop	r12
    28d8:	bf 90       	pop	r11
    28da:	af 90       	pop	r10
    28dc:	08 95       	ret
                        if (event.pressed) {
    28de:	ff 20       	and	r15, r15
    28e0:	49 f0       	breq	.+18     	; 0x28f4 <process_action+0x212>
                            if (tap_count <= TAPPING_TOGGLE) {
    28e2:	85 e0       	ldi	r24, 0x05	; 5
    28e4:	8e 15       	cp	r24, r14
    28e6:	58 f3       	brcs	.-42     	; 0x28be <process_action+0x1dc>
                                if (mods & get_mods()) {
    28e8:	0e 94 8f 1c 	call	0x391e	; 0x391e <get_mods>
    28ec:	8d 21       	and	r24, r13
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <process_action+0x210>
    28f0:	a6 cf       	rjmp	.-180    	; 0x283e <process_action+0x15c>
    28f2:	d0 cf       	rjmp	.-96     	; 0x2894 <process_action+0x1b2>
                            if (tap_count < TAPPING_TOGGLE) {
    28f4:	e4 e0       	ldi	r30, 0x04	; 4
    28f6:	ee 15       	cp	r30, r14
    28f8:	10 f3       	brcs	.-60     	; 0x28be <process_action+0x1dc>
    28fa:	cc cf       	rjmp	.-104    	; 0x2894 <process_action+0x1b2>
                            if (tap_count > 0) {
    28fc:	ee 20       	and	r14, r14
    28fe:	51 f2       	breq	.-108    	; 0x2894 <process_action+0x1b2>
                            unregister_code(action.layer_tap.code);
    2900:	80 2f       	mov	r24, r16
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	1f 91       	pop	r17
    2912:	0f 91       	pop	r16
    2914:	ff 90       	pop	r15
    2916:	ef 90       	pop	r14
    2918:	df 90       	pop	r13
    291a:	cf 90       	pop	r12
    291c:	bf 90       	pop	r11
    291e:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    2920:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <unregister_code>
            switch (action.usage.page) {
    2924:	81 2f       	mov	r24, r17
    2926:	86 95       	lsr	r24
    2928:	86 95       	lsr	r24
    292a:	83 70       	andi	r24, 0x03	; 3
    292c:	c9 f0       	breq	.+50     	; 0x2960 <process_action+0x27e>
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	31 f6       	brne	.-116    	; 0x28be <process_action+0x1dc>
                        host_consumer_send(action.usage.code);
    2932:	c8 01       	movw	r24, r16
    2934:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    2936:	f1 10       	cpse	r15, r1
    2938:	02 c0       	rjmp	.+4      	; 0x293e <process_action+0x25c>
                        host_consumer_send(0);
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	80 e0       	ldi	r24, 0x00	; 0
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	df 90       	pop	r13
    2956:	cf 90       	pop	r12
    2958:	bf 90       	pop	r11
    295a:	af 90       	pop	r10
                        host_consumer_send(0);
    295c:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <host_consumer_send>
                        host_system_send(action.usage.code);
    2960:	c8 01       	movw	r24, r16
    2962:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    2964:	f1 10       	cpse	r15, r1
    2966:	02 c0       	rjmp	.+4      	; 0x296c <process_action+0x28a>
                        host_system_send(0);
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	80 e0       	ldi	r24, 0x00	; 0
}
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
                        host_system_send(0);
    298a:	0c 94 4e 10 	jmp	0x209c	; 0x209c <host_system_send>
                mousekey_on(action.key.code);
    298e:	80 2f       	mov	r24, r16
            if (event.pressed) {
    2990:	ff 20       	and	r15, r15
    2992:	99 f0       	breq	.+38     	; 0x29ba <process_action+0x2d8>
                mousekey_on(action.key.code);
    2994:	0e 94 ae 21 	call	0x435c	; 0x435c <mousekey_on>
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	df 90       	pop	r13
    29b0:	cf 90       	pop	r12
    29b2:	bf 90       	pop	r11
    29b4:	af 90       	pop	r10
                mousekey_send();
    29b6:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <mousekey_send>
                mousekey_off(action.key.code);
    29ba:	0e 94 16 22 	call	0x442c	; 0x442c <mousekey_off>
    29be:	ec cf       	rjmp	.-40     	; 0x2998 <process_action+0x2b6>
            if (action.layer_bitop.on == 0) {
    29c0:	81 2f       	mov	r24, r17
    29c2:	83 70       	andi	r24, 0x03	; 3
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <process_action+0x2e6>
    29c6:	71 c0       	rjmp	.+226    	; 0x2aaa <process_action+0x3c8>
                if (!event.pressed) {
    29c8:	f1 10       	cpse	r15, r1
    29ca:	79 cf       	rjmp	.-270    	; 0x28be <process_action+0x1dc>
                    uint8_t shift = action.layer_bitop.part*4;
    29cc:	20 2f       	mov	r18, r16
    29ce:	22 95       	swap	r18
    29d0:	26 95       	lsr	r18
    29d2:	27 70       	andi	r18, 0x07	; 7
    29d4:	22 0f       	add	r18, r18
    29d6:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    29d8:	60 2f       	mov	r22, r16
    29da:	6f 70       	andi	r22, 0x0F	; 15
    29dc:	c6 2e       	mov	r12, r22
    29de:	d1 2c       	mov	r13, r1
    29e0:	f1 2c       	mov	r15, r1
    29e2:	e1 2c       	mov	r14, r1
    29e4:	02 2e       	mov	r0, r18
    29e6:	04 c0       	rjmp	.+8      	; 0x29f0 <process_action+0x30e>
    29e8:	cc 0c       	add	r12, r12
    29ea:	dd 1c       	adc	r13, r13
    29ec:	ee 1c       	adc	r14, r14
    29ee:	ff 1c       	adc	r15, r15
    29f0:	0a 94       	dec	r0
    29f2:	d2 f7       	brpl	.-12     	; 0x29e8 <process_action+0x306>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	cb 01       	movw	r24, r22
    29fa:	04 ff       	sbrs	r16, 4
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <process_action+0x33a>
    29fe:	6f e0       	ldi	r22, 0x0F	; 15
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <process_action+0x32e>
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	88 1f       	adc	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	2a 95       	dec	r18
    2a12:	d2 f7       	brpl	.-12     	; 0x2a08 <process_action+0x326>
    2a14:	60 95       	com	r22
    2a16:	70 95       	com	r23
    2a18:	80 95       	com	r24
    2a1a:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2a1c:	16 95       	lsr	r17
    2a1e:	16 95       	lsr	r17
    2a20:	13 70       	andi	r17, 0x03	; 3
    2a22:	12 30       	cpi	r17, 0x02	; 2
    2a24:	c1 f0       	breq	.+48     	; 0x2a56 <process_action+0x374>
    2a26:	60 f5       	brcc	.+88     	; 0x2a80 <process_action+0x39e>
    2a28:	6c 29       	or	r22, r12
    2a2a:	7d 29       	or	r23, r13
    2a2c:	8e 29       	or	r24, r14
    2a2e:	9f 29       	or	r25, r15
    2a30:	11 30       	cpi	r17, 0x01	; 1
    2a32:	51 f1       	breq	.+84     	; 0x2a88 <process_action+0x3a6>
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	ff 90       	pop	r15
    2a48:	ef 90       	pop	r14
    2a4a:	df 90       	pop	r13
    2a4c:	cf 90       	pop	r12
    2a4e:	bf 90       	pop	r11
    2a50:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2a52:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <default_layer_and>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a56:	6c 29       	or	r22, r12
    2a58:	7d 29       	or	r23, r13
    2a5a:	8e 29       	or	r24, r14
    2a5c:	9f 29       	or	r25, r15
}
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	df 90       	pop	r13
    2a76:	cf 90       	pop	r12
    2a78:	bf 90       	pop	r11
    2a7a:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a7c:	0c 94 06 1b 	jmp	0x360c	; 0x360c <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a80:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <default_layer_and>
    2a84:	c7 01       	movw	r24, r14
    2a86:	b6 01       	movw	r22, r12
}
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	ff 90       	pop	r15
    2a9c:	ef 90       	pop	r14
    2a9e:	df 90       	pop	r13
    2aa0:	cf 90       	pop	r12
    2aa2:	bf 90       	pop	r11
    2aa4:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2aa6:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <default_layer_or>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2aaa:	86 95       	lsr	r24
    2aac:	ff 20       	and	r15, r15
    2aae:	11 f0       	breq	.+4      	; 0x2ab4 <process_action+0x3d2>
    2ab0:	81 2f       	mov	r24, r17
    2ab2:	81 70       	andi	r24, 0x01	; 1
    2ab4:	88 23       	and	r24, r24
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <process_action+0x3d8>
    2ab8:	02 cf       	rjmp	.-508    	; 0x28be <process_action+0x1dc>
                    uint8_t shift = action.layer_bitop.part*4;
    2aba:	20 2f       	mov	r18, r16
    2abc:	22 95       	swap	r18
    2abe:	26 95       	lsr	r18
    2ac0:	27 70       	andi	r18, 0x07	; 7
    2ac2:	22 0f       	add	r18, r18
    2ac4:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2ac6:	60 2f       	mov	r22, r16
    2ac8:	6f 70       	andi	r22, 0x0F	; 15
    2aca:	c6 2e       	mov	r12, r22
    2acc:	d1 2c       	mov	r13, r1
    2ace:	f1 2c       	mov	r15, r1
    2ad0:	e1 2c       	mov	r14, r1
    2ad2:	02 2e       	mov	r0, r18
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <process_action+0x3fc>
    2ad6:	cc 0c       	add	r12, r12
    2ad8:	dd 1c       	adc	r13, r13
    2ada:	ee 1c       	adc	r14, r14
    2adc:	ff 1c       	adc	r15, r15
    2ade:	0a 94       	dec	r0
    2ae0:	d2 f7       	brpl	.-12     	; 0x2ad6 <process_action+0x3f4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	70 e0       	ldi	r23, 0x00	; 0
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	04 ff       	sbrs	r16, 4
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <process_action+0x428>
    2aec:	6f e0       	ldi	r22, 0x0F	; 15
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	04 c0       	rjmp	.+8      	; 0x2afe <process_action+0x41c>
    2af6:	66 0f       	add	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	88 1f       	adc	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	2a 95       	dec	r18
    2b00:	d2 f7       	brpl	.-12     	; 0x2af6 <process_action+0x414>
    2b02:	60 95       	com	r22
    2b04:	70 95       	com	r23
    2b06:	80 95       	com	r24
    2b08:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2b0a:	16 95       	lsr	r17
    2b0c:	16 95       	lsr	r17
    2b0e:	13 70       	andi	r17, 0x03	; 3
    2b10:	12 30       	cpi	r17, 0x02	; 2
    2b12:	c1 f0       	breq	.+48     	; 0x2b44 <process_action+0x462>
    2b14:	60 f5       	brcc	.+88     	; 0x2b6e <process_action+0x48c>
    2b16:	6c 29       	or	r22, r12
    2b18:	7d 29       	or	r23, r13
    2b1a:	8e 29       	or	r24, r14
    2b1c:	9f 29       	or	r25, r15
    2b1e:	11 30       	cpi	r17, 0x01	; 1
    2b20:	51 f1       	breq	.+84     	; 0x2b76 <process_action+0x494>
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	ff 90       	pop	r15
    2b36:	ef 90       	pop	r14
    2b38:	df 90       	pop	r13
    2b3a:	cf 90       	pop	r12
    2b3c:	bf 90       	pop	r11
    2b3e:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2b40:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <layer_and>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b44:	6c 29       	or	r22, r12
    2b46:	7d 29       	or	r23, r13
    2b48:	8e 29       	or	r24, r14
    2b4a:	9f 29       	or	r25, r15
}
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
    2b66:	bf 90       	pop	r11
    2b68:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b6a:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b6e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <layer_and>
    2b72:	c7 01       	movw	r24, r14
    2b74:	b6 01       	movw	r22, r12
}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	ff 90       	pop	r15
    2b8a:	ef 90       	pop	r14
    2b8c:	df 90       	pop	r13
    2b8e:	cf 90       	pop	r12
    2b90:	bf 90       	pop	r11
    2b92:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b94:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <layer_or>
            switch (action.layer_tap.code) {
    2b98:	00 3f       	cpi	r16, 0xF0	; 240
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <process_action+0x4bc>
    2b9c:	45 c0       	rjmp	.+138    	; 0x2c28 <process_action+0x546>
    2b9e:	60 f4       	brcc	.+24     	; 0x2bb8 <process_action+0x4d6>
    2ba0:	80 e4       	ldi	r24, 0x40	; 64
    2ba2:	80 0f       	add	r24, r16
    2ba4:	80 32       	cpi	r24, 0x20	; 32
    2ba6:	28 f1       	brcs	.+74     	; 0x2bf2 <process_action+0x510>
                    if (event.pressed) {
    2ba8:	ff 20       	and	r15, r15
    2baa:	09 f4       	brne	.+2      	; 0x2bae <process_action+0x4cc>
    2bac:	96 c0       	rjmp	.+300    	; 0x2cda <process_action+0x5f8>
                        if (tap_count > 0) {
    2bae:	e1 10       	cpse	r14, r1
    2bb0:	fc cd       	rjmp	.-1032   	; 0x27aa <process_action+0xc8>
                            layer_on(action.layer_tap.val);
    2bb2:	81 2f       	mov	r24, r17
    2bb4:	8f 71       	andi	r24, 0x1F	; 31
    2bb6:	5a c0       	rjmp	.+180    	; 0x2c6c <process_action+0x58a>
            switch (action.layer_tap.code) {
    2bb8:	02 3f       	cpi	r16, 0xF2	; 242
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <process_action+0x4dc>
    2bbc:	68 c0       	rjmp	.+208    	; 0x2c8e <process_action+0x5ac>
    2bbe:	08 f4       	brcc	.+2      	; 0x2bc2 <process_action+0x4e0>
    2bc0:	51 c0       	rjmp	.+162    	; 0x2c64 <process_action+0x582>
    2bc2:	03 3f       	cpi	r16, 0xF3	; 243
    2bc4:	89 f7       	brne	.-30     	; 0x2ba8 <process_action+0x4c6>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2bc6:	ff 20       	and	r15, r15
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <process_action+0x4ea>
    2bca:	76 c0       	rjmp	.+236    	; 0x2cb8 <process_action+0x5d6>
    2bcc:	81 2f       	mov	r24, r17
    2bce:	8f 71       	andi	r24, 0x1F	; 31
}
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
    2bea:	bf 90       	pop	r11
    2bec:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    2bee:	0c 94 25 1b 	jmp	0x364a	; 0x364a <layer_move>
            switch (action.layer_tap.code) {
    2bf2:	c0 2e       	mov	r12, r16
    2bf4:	81 2f       	mov	r24, r17
    2bf6:	8f 71       	andi	r24, 0x1F	; 31
    2bf8:	10 2f       	mov	r17, r16
    2bfa:	10 71       	andi	r17, 0x10	; 16
                    if (event.pressed) {
    2bfc:	ff 20       	and	r15, r15
    2bfe:	51 f0       	breq	.+20     	; 0x2c14 <process_action+0x532>
                        layer_on(action.layer_tap.val);
    2c00:	0e 94 3a 1b 	call	0x3674	; 0x3674 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2c04:	8c 2d       	mov	r24, r12
    2c06:	82 95       	swap	r24
    2c08:	80 7f       	andi	r24, 0xF0	; 240
    2c0a:	11 11       	cpse	r17, r1
    2c0c:	19 ce       	rjmp	.-974    	; 0x2840 <process_action+0x15e>
    2c0e:	80 2f       	mov	r24, r16
    2c10:	8f 70       	andi	r24, 0x0F	; 15
    2c12:	16 ce       	rjmp	.-980    	; 0x2840 <process_action+0x15e>
                        layer_off(action.layer_tap.val);
    2c14:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2c18:	8c 2d       	mov	r24, r12
    2c1a:	82 95       	swap	r24
    2c1c:	80 7f       	andi	r24, 0xF0	; 240
    2c1e:	11 11       	cpse	r17, r1
    2c20:	3a ce       	rjmp	.-908    	; 0x2896 <process_action+0x1b4>
    2c22:	80 2f       	mov	r24, r16
    2c24:	8f 70       	andi	r24, 0x0F	; 15
    2c26:	37 ce       	rjmp	.-914    	; 0x2896 <process_action+0x1b4>
                    if (event.pressed) {
    2c28:	ff 20       	and	r15, r15
    2c2a:	b9 f0       	breq	.+46     	; 0x2c5a <process_action+0x578>
                        if (tap_count < TAPPING_TOGGLE) {
    2c2c:	f4 e0       	ldi	r31, 0x04	; 4
    2c2e:	fe 15       	cp	r31, r14
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <process_action+0x552>
    2c32:	45 ce       	rjmp	.-886    	; 0x28be <process_action+0x1dc>
                            layer_invert(action.layer_tap.val);
    2c34:	81 2f       	mov	r24, r17
    2c36:	8f 71       	andi	r24, 0x1F	; 31
}
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	bf 90       	pop	r11
    2c54:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    2c56:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    2c5a:	85 e0       	ldi	r24, 0x05	; 5
    2c5c:	8e 15       	cp	r24, r14
    2c5e:	08 f4       	brcc	.+2      	; 0x2c62 <process_action+0x580>
    2c60:	2e ce       	rjmp	.-932    	; 0x28be <process_action+0x1dc>
    2c62:	e8 cf       	rjmp	.-48     	; 0x2c34 <process_action+0x552>
    2c64:	81 2f       	mov	r24, r17
    2c66:	8f 71       	andi	r24, 0x1F	; 31
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c68:	ff 20       	and	r15, r15
    2c6a:	a9 f0       	breq	.+42     	; 0x2c96 <process_action+0x5b4>
}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	ff 90       	pop	r15
    2c80:	ef 90       	pop	r14
    2c82:	df 90       	pop	r13
    2c84:	cf 90       	pop	r12
    2c86:	bf 90       	pop	r11
    2c88:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    2c8a:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <layer_on>
    2c8e:	81 2f       	mov	r24, r17
    2c90:	8f 71       	andi	r24, 0x1F	; 31
                    event.pressed ? layer_off(action.layer_tap.val) :
    2c92:	ff 20       	and	r15, r15
    2c94:	59 f3       	breq	.-42     	; 0x2c6c <process_action+0x58a>
}
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    2cb4:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <layer_off>
}
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	cf 90       	pop	r12
    2cd2:	bf 90       	pop	r11
    2cd4:	af 90       	pop	r10
                                    layer_clear();
    2cd6:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <layer_clear>
                        if (tap_count > 0) {
    2cda:	e1 10       	cpse	r14, r1
    2cdc:	11 ce       	rjmp	.-990    	; 0x2900 <process_action+0x21e>
                            layer_off(action.layer_tap.val);
    2cde:	81 2f       	mov	r24, r17
    2ce0:	8f 71       	andi	r24, 0x1F	; 31
    2ce2:	d9 cf       	rjmp	.-78     	; 0x2c96 <process_action+0x5b4>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ce4:	41 2f       	mov	r20, r17
    2ce6:	4f 70       	andi	r20, 0x0F	; 15
    2ce8:	60 2f       	mov	r22, r16
    2cea:	c5 01       	movw	r24, r10
    2cec:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <action_get_macro>
}
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	ff 90       	pop	r15
    2d04:	ef 90       	pop	r14
    2d06:	df 90       	pop	r13
    2d08:	cf 90       	pop	r12
    2d0a:	bf 90       	pop	r11
    2d0c:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2d0e:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <action_macro_play>
            action_function(record, action.func.id, action.func.opt);
    2d12:	41 2f       	mov	r20, r17
    2d14:	4f 70       	andi	r20, 0x0F	; 15
    2d16:	60 2f       	mov	r22, r16
    2d18:	c5 01       	movw	r24, r10
}
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	df 90       	pop	r13
    2d32:	cf 90       	pop	r12
    2d34:	bf 90       	pop	r11
    2d36:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    2d38:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <action_function>

00002d3c <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2d3c:	0e 94 b4 1c 	call	0x3968	; 0x3968 <clear_weak_mods>
    clear_keys();
    2d40:	0e 94 81 1c 	call	0x3902	; 0x3902 <clear_keys>
    send_keyboard_report();
    2d44:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2d48:	0e 94 c9 23 	call	0x4792	; 0x4792 <mousekey_clear>
    mousekey_send();
    2d4c:	0e 94 9a 22 	call	0x4534	; 0x4534 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	0e 94 4e 10 	call	0x209c	; 0x209c <host_system_send>
    host_consumer_send(0);
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <host_consumer_send>

00002d60 <clear_keyboard>:
    clear_mods();
    2d60:	0e 94 a3 1c 	call	0x3946	; 0x3946 <clear_mods>
    clear_keyboard_but_mods();
    2d64:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <clear_keyboard_but_mods>

00002d68 <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <is_tap_key+0x6>
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <is_tap_key+0x8>
    2d70:	1f 92       	push	r1
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    action_t action = layer_switch_get_action(event);
    2d76:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <layer_switch_get_action>

    switch (action.kind.id) {
    2d7a:	29 2f       	mov	r18, r25
    2d7c:	22 95       	swap	r18
    2d7e:	2f 70       	andi	r18, 0x0F	; 15
    2d80:	2c 30       	cpi	r18, 0x0C	; 12
    2d82:	38 f4       	brcc	.+14     	; 0x2d92 <is_tap_key+0x2a>
    2d84:	2a 30       	cpi	r18, 0x0A	; 10
    2d86:	00 f5       	brcc	.+64     	; 0x2dc8 <is_tap_key+0x60>
    2d88:	22 50       	subi	r18, 0x02	; 2
    2d8a:	22 30       	cpi	r18, 0x02	; 2
    2d8c:	88 f0       	brcs	.+34     	; 0x2db0 <is_tap_key+0x48>
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	07 c0       	rjmp	.+14     	; 0x2da0 <is_tap_key+0x38>
    switch (action.kind.id) {
    2d92:	2c 30       	cpi	r18, 0x0C	; 12
    2d94:	11 f0       	breq	.+4      	; 0x2d9a <is_tap_key+0x32>
    2d96:	2f 30       	cpi	r18, 0x0F	; 15
    2d98:	d1 f7       	brne	.-12     	; 0x2d8e <is_tap_key+0x26>
            if (action.func.opt & FUNC_TAP) { return true; }
    2d9a:	93 fb       	bst	r25, 3
    2d9c:	88 27       	eor	r24, r24
    2d9e:	80 f9       	bld	r24, 0
}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	08 95       	ret
            switch (action.key.code) {
    2db0:	85 3a       	cpi	r24, 0xA5	; 165
    2db2:	30 f4       	brcc	.+12     	; 0x2dc0 <is_tap_key+0x58>
    2db4:	84 30       	cpi	r24, 0x04	; 4
    2db6:	10 f4       	brcc	.+4      	; 0x2dbc <is_tap_key+0x54>
    2db8:	82 30       	cpi	r24, 0x02	; 2
    2dba:	30 f4       	brcc	.+12     	; 0x2dc8 <is_tap_key+0x60>
                    return true;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	f0 cf       	rjmp	.-32     	; 0x2da0 <is_tap_key+0x38>
            switch (action.key.code) {
    2dc0:	90 e2       	ldi	r25, 0x20	; 32
    2dc2:	98 0f       	add	r25, r24
    2dc4:	98 30       	cpi	r25, 0x08	; 8
    2dc6:	d0 f3       	brcs	.-12     	; 0x2dbc <is_tap_key+0x54>
            switch (action.layer_tap.code) {
    2dc8:	88 3e       	cpi	r24, 0xE8	; 232
    2dca:	30 f4       	brcc	.+12     	; 0x2dd8 <is_tap_key+0x70>
    2dcc:	80 3e       	cpi	r24, 0xE0	; 224
    2dce:	b0 f7       	brcc	.-20     	; 0x2dbc <is_tap_key+0x54>
    2dd0:	84 50       	subi	r24, 0x04	; 4
    2dd2:	81 3a       	cpi	r24, 0xA1	; 161
    2dd4:	e0 f6       	brcc	.-72     	; 0x2d8e <is_tap_key+0x26>
    2dd6:	f2 cf       	rjmp	.-28     	; 0x2dbc <is_tap_key+0x54>
    2dd8:	80 3f       	cpi	r24, 0xF0	; 240
    2dda:	c9 f6       	brne	.-78     	; 0x2d8e <is_tap_key+0x26>
    2ddc:	ef cf       	rjmp	.-34     	; 0x2dbc <is_tap_key+0x54>

00002dde <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <debug_event+0x6>
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <debug_event+0x8>
    2de6:	1f 92       	push	r1
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	df 91       	pop	r29
    2df8:	cf 91       	pop	r28
    2dfa:	08 95       	ret

00002dfc <debug_record>:

void debug_record(keyrecord_t record)
{
    2dfc:	cf 93       	push	r28
    2dfe:	df 93       	push	r29
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <debug_record+0x6>
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <debug_record+0x8>
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <debug_record+0xa>
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2e0a:	26 96       	adiw	r28, 0x06	; 6
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	08 95       	ret

00002e1c <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2e1c:	1f 93       	push	r17
    2e1e:	cf 93       	push	r28
    2e20:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e22:	c0 91 93 01 	lds	r28, 0x0193	; 0x800193 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2e26:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e28:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <waiting_buffer_head>
    2e2c:	8c 13       	cpse	r24, r28
    2e2e:	04 c0       	rjmp	.+8      	; 0x2e38 <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	1f 91       	pop	r17
    2e36:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2e38:	d0 e0       	ldi	r29, 0x00	; 0
    2e3a:	1c 9f       	mul	r17, r28
    2e3c:	f0 01       	movw	r30, r0
    2e3e:	1d 9f       	mul	r17, r29
    2e40:	f0 0d       	add	r31, r0
    2e42:	11 24       	eor	r1, r1
    2e44:	eb 56       	subi	r30, 0x6B	; 107
    2e46:	fe 4f       	sbci	r31, 0xFE	; 254
    2e48:	40 81       	ld	r20, Z
    2e4a:	51 81       	ldd	r21, Z+1	; 0x01
    2e4c:	62 81       	ldd	r22, Z+2	; 0x02
    2e4e:	73 81       	ldd	r23, Z+3	; 0x03
    2e50:	84 81       	ldd	r24, Z+4	; 0x04
    2e52:	95 81       	ldd	r25, Z+5	; 0x05
    2e54:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e58:	21 96       	adiw	r28, 0x01	; 1
    2e5a:	c7 70       	andi	r28, 0x07	; 7
    2e5c:	e5 cf       	rjmp	.-54     	; 0x2e28 <debug_waiting_buffer+0xc>

00002e5e <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2e5e:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <tapping_key>
    2e62:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <tapping_key+0x1>
    2e66:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <tapping_key+0x2>
    2e6a:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <tapping_key+0x3>
    2e6e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <tapping_key+0x4>
    2e72:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <tapping_key+0x5>
    2e76:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <debug_record>

00002e7a <waiting_buffer_scan_tap>:
{
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    2e80:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tapping_key+0x5>
    2e84:	80 7f       	andi	r24, 0xF0	; 240
    2e86:	d1 f4       	brne	.+52     	; 0x2ebc <waiting_buffer_scan_tap+0x42>
    if (!tapping_key.event.pressed) return;
    2e88:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <tapping_key+0x2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	b1 f0       	breq	.+44     	; 0x2ebc <waiting_buffer_scan_tap+0x42>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e90:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <waiting_buffer_tail>
    2e94:	d0 91 94 01 	lds	r29, 0x0194	; 0x800194 <waiting_buffer_head>
    2e98:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <tapping_key>
    2e9c:	c0 91 c6 01 	lds	r28, 0x01C6	; 0x8001c6 <tapping_key+0x1>
    2ea0:	40 91 c8 01 	lds	r20, 0x01C8	; 0x8001c8 <tapping_key+0x3>
    2ea4:	50 91 c9 01 	lds	r21, 0x01C9	; 0x8001c9 <tapping_key+0x4>
    2ea8:	a1 e0       	ldi	r26, 0x01	; 1
    2eaa:	bf 3f       	cpi	r27, 0xFF	; 255
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <waiting_buffer_scan_tap+0x36>
    2eae:	a0 e0       	ldi	r26, 0x00	; 0
    2eb0:	ba 01       	movw	r22, r20
    2eb2:	60 95       	com	r22
    2eb4:	70 95       	com	r23
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2eb6:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2eb8:	d8 13       	cpse	r29, r24
    2eba:	04 c0       	rjmp	.+8      	; 0x2ec4 <waiting_buffer_scan_tap+0x4a>
}
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	1f 91       	pop	r17
    2ec2:	08 95       	ret
    2ec4:	21 e0       	ldi	r18, 0x01	; 1
    2ec6:	41 15       	cp	r20, r1
    2ec8:	51 05       	cpc	r21, r1
    2eca:	21 f0       	breq	.+8      	; 0x2ed4 <waiting_buffer_scan_tap+0x5a>
    2ecc:	2a 2f       	mov	r18, r26
    2ece:	cf 3f       	cpi	r28, 0xFF	; 255
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <waiting_buffer_scan_tap+0x5a>
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2ed6:	20 fd       	sbrc	r18, 0
    2ed8:	38 c0       	rjmp	.+112    	; 0x2f4a <waiting_buffer_scan_tap+0xd0>
    2eda:	18 9f       	mul	r17, r24
    2edc:	f0 01       	movw	r30, r0
    2ede:	19 9f       	mul	r17, r25
    2ee0:	f0 0d       	add	r31, r0
    2ee2:	11 24       	eor	r1, r1
    2ee4:	eb 56       	subi	r30, 0x6B	; 107
    2ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee8:	21 81       	ldd	r18, Z+1	; 0x01
    2eea:	2c 13       	cpse	r18, r28
    2eec:	2e c0       	rjmp	.+92     	; 0x2f4a <waiting_buffer_scan_tap+0xd0>
    2eee:	20 81       	ld	r18, Z
    2ef0:	2b 13       	cpse	r18, r27
    2ef2:	2b c0       	rjmp	.+86     	; 0x2f4a <waiting_buffer_scan_tap+0xd0>
    2ef4:	22 81       	ldd	r18, Z+2	; 0x02
    2ef6:	21 11       	cpse	r18, r1
    2ef8:	28 c0       	rjmp	.+80     	; 0x2f4a <waiting_buffer_scan_tap+0xd0>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2efa:	23 81       	ldd	r18, Z+3	; 0x03
    2efc:	34 81       	ldd	r19, Z+4	; 0x04
    2efe:	24 17       	cp	r18, r20
    2f00:	35 07       	cpc	r19, r21
    2f02:	00 f1       	brcs	.+64     	; 0x2f44 <waiting_buffer_scan_tap+0xca>
    2f04:	24 1b       	sub	r18, r20
    2f06:	35 0b       	sbc	r19, r21
    2f08:	28 3c       	cpi	r18, 0xC8	; 200
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	f0 f4       	brcc	.+60     	; 0x2f4a <waiting_buffer_scan_tap+0xd0>
            tapping_key.tap.count = 1;
    2f0e:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <tapping_key+0x5>
    2f12:	2f 70       	andi	r18, 0x0F	; 15
    2f14:	20 61       	ori	r18, 0x10	; 16
    2f16:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2f1a:	26 e0       	ldi	r18, 0x06	; 6
    2f1c:	28 9f       	mul	r18, r24
    2f1e:	f0 01       	movw	r30, r0
    2f20:	29 9f       	mul	r18, r25
    2f22:	f0 0d       	add	r31, r0
    2f24:	11 24       	eor	r1, r1
    2f26:	e6 56       	subi	r30, 0x66	; 102
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8f 70       	andi	r24, 0x0F	; 15
    2f2e:	80 61       	ori	r24, 0x10	; 16
    2f30:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2f32:	85 ec       	ldi	r24, 0xC5	; 197
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
}
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	1f 91       	pop	r17
            debug_waiting_buffer();
    2f40:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <debug_waiting_buffer>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2f44:	26 0f       	add	r18, r22
    2f46:	37 1f       	adc	r19, r23
    2f48:	df cf       	rjmp	.-66     	; 0x2f08 <waiting_buffer_scan_tap+0x8e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f4a:	01 96       	adiw	r24, 0x01	; 1
    2f4c:	87 70       	andi	r24, 0x07	; 7
    2f4e:	b4 cf       	rjmp	.-152    	; 0x2eb8 <waiting_buffer_scan_tap+0x3e>

00002f50 <process_tapping>:
{
    2f50:	af 92       	push	r10
    2f52:	bf 92       	push	r11
    2f54:	cf 92       	push	r12
    2f56:	df 92       	push	r13
    2f58:	ef 92       	push	r14
    2f5a:	ff 92       	push	r15
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	61 97       	sbiw	r28, 0x11	; 17
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    2f76:	85 e0       	ldi	r24, 0x05	; 5
    2f78:	f7 01       	movw	r30, r14
    2f7a:	de 01       	movw	r26, r28
    2f7c:	1d 96       	adiw	r26, 0x0d	; 13
    2f7e:	01 90       	ld	r0, Z+
    2f80:	0d 92       	st	X+, r0
    2f82:	8a 95       	dec	r24
    2f84:	e1 f7       	brne	.-8      	; 0x2f7e <process_tapping+0x2e>
    2f86:	d7 01       	movw	r26, r14
    2f88:	4c 91       	ld	r20, X
    2f8a:	11 96       	adiw	r26, 0x01	; 1
    2f8c:	5c 91       	ld	r21, X
    2f8e:	11 97       	sbiw	r26, 0x01	; 1
    2f90:	12 96       	adiw	r26, 0x02	; 2
    2f92:	dc 90       	ld	r13, X
    2f94:	12 97       	sbiw	r26, 0x02	; 2
    2f96:	13 96       	adiw	r26, 0x03	; 3
    2f98:	0d 91       	ld	r16, X+
    2f9a:	1c 91       	ld	r17, X
    2f9c:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <tapping_key>
    2fa0:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <tapping_key+0x1>
    2fa4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <tapping_key+0x3>
    2fa8:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <tapping_key+0x4>
    2fac:	21 e0       	ldi	r18, 0x01	; 1
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	31 f0       	breq	.+12     	; 0x2fbe <process_tapping+0x6e>
    2fb2:	6f 3f       	cpi	r22, 0xFF	; 255
    2fb4:	19 f4       	brne	.+6      	; 0x2fbc <process_tapping+0x6c>
    2fb6:	21 e0       	ldi	r18, 0x01	; 1
    2fb8:	3f 3f       	cpi	r19, 0xFF	; 255
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <process_tapping+0x6e>
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    if (IS_TAPPING_PRESSED()) {
    2fbe:	b2 2f       	mov	r27, r18
    2fc0:	b1 70       	andi	r27, 0x01	; 1
    2fc2:	bb 2e       	mov	r11, r27
    2fc4:	20 fd       	sbrc	r18, 0
    2fc6:	89 c1       	rjmp	.+786    	; 0x32da <process_tapping+0x38a>
    2fc8:	a0 90 c7 01 	lds	r10, 0x01C7	; 0x8001c7 <tapping_key+0x2>
    2fcc:	aa 20       	and	r10, r10
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <process_tapping+0x82>
    2fd0:	25 c1       	rjmp	.+586    	; 0x321c <process_tapping+0x2cc>
        if (WITHIN_TAPPING_TERM(event)) {
    2fd2:	08 17       	cp	r16, r24
    2fd4:	19 07       	cpc	r17, r25
    2fd6:	d8 f1       	brcs	.+118    	; 0x304e <process_tapping+0xfe>
    2fd8:	f8 01       	movw	r30, r16
    2fda:	e8 1b       	sub	r30, r24
    2fdc:	f9 0b       	sbc	r31, r25
    2fde:	cf 01       	movw	r24, r30
    2fe0:	cc 24       	eor	r12, r12
    2fe2:	c3 94       	inc	r12
    2fe4:	88 3c       	cpi	r24, 0xC8	; 200
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	08 f0       	brcs	.+2      	; 0x2fec <process_tapping+0x9c>
    2fea:	c1 2c       	mov	r12, r1
    2fec:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tapping_key+0x5>
    2ff0:	98 2f       	mov	r25, r24
    2ff2:	90 7f       	andi	r25, 0xF0	; 240
    2ff4:	cc 20       	and	r12, r12
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <process_tapping+0xaa>
    2ff8:	c4 c0       	rjmp	.+392    	; 0x3182 <process_tapping+0x232>
            if (tapping_key.tap.count == 0) {
    2ffa:	91 11       	cpse	r25, r1
    2ffc:	89 c0       	rjmp	.+274    	; 0x3110 <process_tapping+0x1c0>
    2ffe:	cd 2c       	mov	r12, r13
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3000:	65 13       	cpse	r22, r21
    3002:	2a c0       	rjmp	.+84     	; 0x3058 <process_tapping+0x108>
    3004:	34 13       	cpse	r19, r20
    3006:	28 c0       	rjmp	.+80     	; 0x3058 <process_tapping+0x108>
    3008:	d1 10       	cpse	r13, r1
    300a:	26 c0       	rjmp	.+76     	; 0x3058 <process_tapping+0x108>
                    tapping_key.tap.count = 1;
    300c:	8f 70       	andi	r24, 0x0F	; 15
    300e:	80 61       	ori	r24, 0x10	; 16
    3010:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <tapping_key+0x5>
                    debug_tapping_key();
    3014:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <debug_tapping_key>
                    process_action(&tapping_key);
    3018:	85 ec       	ldi	r24, 0xC5	; 197
    301a:	91 e0       	ldi	r25, 0x01	; 1
    301c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
                    keyp->tap = tapping_key.tap;
    3020:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tapping_key+0x5>
    3024:	d7 01       	movw	r26, r14
    3026:	15 96       	adiw	r26, 0x05	; 5
    3028:	8c 93       	st	X, r24
}
    302a:	8c 2d       	mov	r24, r12
    302c:	61 96       	adiw	r28, 0x11	; 17
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	ef 90       	pop	r14
    3044:	df 90       	pop	r13
    3046:	cf 90       	pop	r12
    3048:	bf 90       	pop	r11
    304a:	af 90       	pop	r10
    304c:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    304e:	80 95       	com	r24
    3050:	90 95       	com	r25
    3052:	80 0f       	add	r24, r16
    3054:	91 1f       	adc	r25, r17
    3056:	c4 cf       	rjmp	.-120    	; 0x2fe0 <process_tapping+0x90>
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	01 15       	cp	r16, r1
    305c:	11 05       	cpc	r17, r1
    305e:	31 f0       	breq	.+12     	; 0x306c <process_tapping+0x11c>
    3060:	5f 3f       	cpi	r21, 0xFF	; 255
    3062:	19 f4       	brne	.+6      	; 0x306a <process_tapping+0x11a>
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	4f 3f       	cpi	r20, 0xFF	; 255
    3068:	09 f0       	breq	.+2      	; 0x306c <process_tapping+0x11c>
    306a:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    306c:	80 fd       	sbrc	r24, 0
    306e:	24 c0       	rjmp	.+72     	; 0x30b8 <process_tapping+0x168>
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	8d 25       	eor	r24, r13
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3074:	b8 2f       	mov	r27, r24
    3076:	b1 70       	andi	r27, 0x01	; 1
    3078:	ab 2e       	mov	r10, r27
    307a:	80 ff       	sbrs	r24, 0
    307c:	3f c0       	rjmp	.+126    	; 0x30fc <process_tapping+0x1ac>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    307e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <waiting_buffer_tail>
    3082:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3086:	36 e0       	ldi	r19, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3088:	82 13       	cpse	r24, r18
    308a:	18 c0       	rjmp	.+48     	; 0x30bc <process_tapping+0x16c>
                    action_t action = layer_switch_get_action(event);
    308c:	70 2f       	mov	r23, r16
    308e:	19 8b       	std	Y+17, r17	; 0x11
    3090:	08 8b       	std	Y+16, r16	; 0x10
    3092:	6d 2d       	mov	r22, r13
    3094:	89 89       	ldd	r24, Y+17	; 0x11
    3096:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <layer_switch_get_action>
                    switch (action.kind.id) {
    309a:	29 2f       	mov	r18, r25
    309c:	22 95       	swap	r18
    309e:	2f 70       	andi	r18, 0x0F	; 15
    30a0:	22 30       	cpi	r18, 0x02	; 2
    30a2:	00 f1       	brcs	.+64     	; 0x30e4 <process_tapping+0x194>
    30a4:	24 30       	cpi	r18, 0x04	; 4
    30a6:	28 f5       	brcc	.+74     	; 0x30f2 <process_tapping+0x1a2>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    30a8:	9f 70       	andi	r25, 0x0F	; 15
    30aa:	01 f1       	breq	.+64     	; 0x30ec <process_tapping+0x19c>
    30ac:	f7 01       	movw	r30, r14
    30ae:	95 81       	ldd	r25, Z+5	; 0x05
    30b0:	90 7f       	andi	r25, 0xF0	; 240
    30b2:	e1 f4       	brne	.+56     	; 0x30ec <process_tapping+0x19c>
    30b4:	cb 2c       	mov	r12, r11
    30b6:	b9 cf       	rjmp	.-142    	; 0x302a <process_tapping+0xda>
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	dc cf       	rjmp	.-72     	; 0x3074 <process_tapping+0x124>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	38 9f       	mul	r19, r24
    30c0:	f0 01       	movw	r30, r0
    30c2:	39 9f       	mul	r19, r25
    30c4:	f0 0d       	add	r31, r0
    30c6:	11 24       	eor	r1, r1
    30c8:	eb 56       	subi	r30, 0x6B	; 107
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	61 81       	ldd	r22, Z+1	; 0x01
    30ce:	56 13       	cpse	r21, r22
    30d0:	06 c0       	rjmp	.+12     	; 0x30de <process_tapping+0x18e>
    30d2:	60 81       	ld	r22, Z
    30d4:	46 13       	cpse	r20, r22
    30d6:	03 c0       	rjmp	.+6      	; 0x30de <process_tapping+0x18e>
    30d8:	62 81       	ldd	r22, Z+2	; 0x02
    30da:	6d 11       	cpse	r22, r13
    30dc:	0f c0       	rjmp	.+30     	; 0x30fc <process_tapping+0x1ac>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30de:	01 96       	adiw	r24, 0x01	; 1
    30e0:	87 70       	andi	r24, 0x07	; 7
    30e2:	d2 cf       	rjmp	.-92     	; 0x3088 <process_tapping+0x138>
                            if (action.key.mods && !action.key.code) return false;
    30e4:	9f 70       	andi	r25, 0x0F	; 15
    30e6:	11 f0       	breq	.+4      	; 0x30ec <process_tapping+0x19c>
    30e8:	88 23       	and	r24, r24
    30ea:	21 f3       	breq	.-56     	; 0x30b4 <process_tapping+0x164>
                            if (IS_MOD(action.key.code)) return false;
    30ec:	80 5e       	subi	r24, 0xE0	; 224
    30ee:	88 30       	cpi	r24, 0x08	; 8
    30f0:	08 f3       	brcs	.-62     	; 0x30b4 <process_tapping+0x164>
                    process_action(keyp);
    30f2:	c7 01       	movw	r24, r14
    30f4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
                    return true;
    30f8:	ba 2c       	mov	r11, r10
    30fa:	dc cf       	rjmp	.-72     	; 0x30b4 <process_tapping+0x164>
                    if (event.pressed) {
    30fc:	dd 20       	and	r13, r13
    30fe:	09 f4       	brne	.+2      	; 0x3102 <process_tapping+0x1b2>
    3100:	94 cf       	rjmp	.-216    	; 0x302a <process_tapping+0xda>
                        tapping_key.tap.interrupted = true;
    3102:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tapping_key+0x5>
    3106:	81 60       	ori	r24, 0x01	; 1
    3108:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <tapping_key+0x5>
                    return false;
    310c:	c1 2c       	mov	r12, r1
    310e:	8d cf       	rjmp	.-230    	; 0x302a <process_tapping+0xda>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3110:	65 13       	cpse	r22, r21
    3112:	06 c0       	rjmp	.+12     	; 0x3120 <process_tapping+0x1d0>
    3114:	34 13       	cpse	r19, r20
    3116:	04 c0       	rjmp	.+8      	; 0x3120 <process_tapping+0x1d0>
                    keyp->tap = tapping_key.tap;
    3118:	d7 01       	movw	r26, r14
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    311a:	dd 20       	and	r13, r13
    311c:	09 f4       	brne	.+2      	; 0x3120 <process_tapping+0x1d0>
    311e:	a4 c0       	rjmp	.+328    	; 0x3268 <process_tapping+0x318>
                else if (is_tap_key(event) && event.pressed) {
    3120:	4d 87       	std	Y+13, r20	; 0x0d
    3122:	5e 87       	std	Y+14, r21	; 0x0e
    3124:	df 86       	std	Y+15, r13	; 0x0f
    3126:	70 2f       	mov	r23, r16
    3128:	19 8b       	std	Y+17, r17	; 0x11
    312a:	08 8b       	std	Y+16, r16	; 0x10
    312c:	6d 2d       	mov	r22, r13
    312e:	89 89       	ldd	r24, Y+17	; 0x11
    3130:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <is_tap_key>
    3134:	88 23       	and	r24, r24
    3136:	09 f4       	brne	.+2      	; 0x313a <process_tapping+0x1ea>
    3138:	de c0       	rjmp	.+444    	; 0x32f6 <process_tapping+0x3a6>
    313a:	dd 20       	and	r13, r13
    313c:	09 f4       	brne	.+2      	; 0x3140 <process_tapping+0x1f0>
    313e:	db c0       	rjmp	.+438    	; 0x32f6 <process_tapping+0x3a6>
                    if (tapping_key.tap.count > 1) {
    3140:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tapping_key+0x5>
    3144:	80 32       	cpi	r24, 0x20	; 32
    3146:	70 f0       	brcs	.+28     	; 0x3164 <process_tapping+0x214>
                        process_action(&(keyrecord_t){
    3148:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <tapping_key>
    314c:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <tapping_key+0x1>
    3150:	38 87       	std	Y+8, r19	; 0x08
    3152:	2f 83       	std	Y+7, r18	; 0x07
    3154:	19 86       	std	Y+9, r1	; 0x09
    3156:	1b 87       	std	Y+11, r17	; 0x0b
    3158:	0a 87       	std	Y+10, r16	; 0x0a
    315a:	8c 87       	std	Y+12, r24	; 0x0c
    315c:	ce 01       	movw	r24, r28
    315e:	07 96       	adiw	r24, 0x07	; 7
    3160:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
                    tapping_key = *keyp;
    3164:	86 e0       	ldi	r24, 0x06	; 6
    3166:	f7 01       	movw	r30, r14
    3168:	a5 ec       	ldi	r26, 0xC5	; 197
    316a:	b1 e0       	ldi	r27, 0x01	; 1
    316c:	01 90       	ld	r0, Z+
    316e:	0d 92       	st	X+, r0
    3170:	8a 95       	dec	r24
    3172:	e1 f7       	brne	.-8      	; 0x316c <process_tapping+0x21c>
                    waiting_buffer_scan_tap();
    3174:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3178:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <debug_tapping_key>
                    return true;
    317c:	cc 24       	eor	r12, r12
    317e:	c3 94       	inc	r12
    3180:	54 cf       	rjmp	.-344    	; 0x302a <process_tapping+0xda>
            if (tapping_key.tap.count == 0) {
    3182:	91 11       	cpse	r25, r1
    3184:	15 c0       	rjmp	.+42     	; 0x31b0 <process_tapping+0x260>
                debug_event(event); debug("\n");
    3186:	70 2f       	mov	r23, r16
    3188:	19 8b       	std	Y+17, r17	; 0x11
    318a:	08 8b       	std	Y+16, r16	; 0x10
    318c:	6d 2d       	mov	r22, r13
    318e:	89 89       	ldd	r24, Y+17	; 0x11
    3190:	0e 94 ef 16 	call	0x2dde	; 0x2dde <debug_event>
                process_action(&tapping_key);
    3194:	85 ec       	ldi	r24, 0xC5	; 197
    3196:	91 e0       	ldi	r25, 0x01	; 1
    3198:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
                tapping_key = (keyrecord_t){};
    319c:	86 e0       	ldi	r24, 0x06	; 6
    319e:	e5 ec       	ldi	r30, 0xC5	; 197
    31a0:	f1 e0       	ldi	r31, 0x01	; 1
    31a2:	df 01       	movw	r26, r30
    31a4:	1d 92       	st	X+, r1
    31a6:	8a 95       	dec	r24
    31a8:	e9 f7       	brne	.-6      	; 0x31a4 <process_tapping+0x254>
                debug_tapping_key();
    31aa:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <debug_tapping_key>
                return false;
    31ae:	3d cf       	rjmp	.-390    	; 0x302a <process_tapping+0xda>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31b0:	65 13       	cpse	r22, r21
    31b2:	12 c0       	rjmp	.+36     	; 0x31d8 <process_tapping+0x288>
    31b4:	34 13       	cpse	r19, r20
    31b6:	10 c0       	rjmp	.+32     	; 0x31d8 <process_tapping+0x288>
    31b8:	d1 10       	cpse	r13, r1
    31ba:	0e c0       	rjmp	.+28     	; 0x31d8 <process_tapping+0x288>
                    keyp->tap = tapping_key.tap;
    31bc:	f7 01       	movw	r30, r14
    31be:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    31c0:	c7 01       	movw	r24, r14
    31c2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
                    tapping_key = (keyrecord_t){};
    31c6:	e5 ec       	ldi	r30, 0xC5	; 197
    31c8:	f1 e0       	ldi	r31, 0x01	; 1
    31ca:	86 e0       	ldi	r24, 0x06	; 6
    31cc:	df 01       	movw	r26, r30
    31ce:	1d 92       	st	X+, r1
    31d0:	8a 95       	dec	r24
    31d2:	e9 f7       	brne	.-6      	; 0x31ce <process_tapping+0x27e>
                    return true;
    31d4:	ca 2c       	mov	r12, r10
    31d6:	29 cf       	rjmp	.-430    	; 0x302a <process_tapping+0xda>
                else if (is_tap_key(event) && event.pressed) {
    31d8:	4d 87       	std	Y+13, r20	; 0x0d
    31da:	5e 87       	std	Y+14, r21	; 0x0e
    31dc:	df 86       	std	Y+15, r13	; 0x0f
    31de:	70 2f       	mov	r23, r16
    31e0:	19 8b       	std	Y+17, r17	; 0x11
    31e2:	08 8b       	std	Y+16, r16	; 0x10
    31e4:	6d 2d       	mov	r22, r13
    31e6:	89 89       	ldd	r24, Y+17	; 0x11
    31e8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <is_tap_key>
    31ec:	88 23       	and	r24, r24
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <process_tapping+0x2a2>
    31f0:	82 c0       	rjmp	.+260    	; 0x32f6 <process_tapping+0x3a6>
    31f2:	dd 20       	and	r13, r13
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <process_tapping+0x2a8>
    31f6:	7f c0       	rjmp	.+254    	; 0x32f6 <process_tapping+0x3a6>
                    if (tapping_key.tap.count > 1) {
    31f8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tapping_key+0x5>
    31fc:	80 32       	cpi	r24, 0x20	; 32
    31fe:	08 f4       	brcc	.+2      	; 0x3202 <process_tapping+0x2b2>
    3200:	b1 cf       	rjmp	.-158    	; 0x3164 <process_tapping+0x214>
                        process_action(&(keyrecord_t){
    3202:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <tapping_key>
    3206:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <tapping_key+0x1>
    320a:	3a 83       	std	Y+2, r19	; 0x02
    320c:	29 83       	std	Y+1, r18	; 0x01
    320e:	1b 82       	std	Y+3, r1	; 0x03
    3210:	1d 83       	std	Y+5, r17	; 0x05
    3212:	0c 83       	std	Y+4, r16	; 0x04
    3214:	8e 83       	std	Y+6, r24	; 0x06
    3216:	ce 01       	movw	r24, r28
    3218:	01 96       	adiw	r24, 0x01	; 1
    321a:	a2 cf       	rjmp	.-188    	; 0x3160 <process_tapping+0x210>
        if (WITHIN_TAPPING_TERM(event)) {
    321c:	08 17       	cp	r16, r24
    321e:	19 07       	cpc	r17, r25
    3220:	88 f1       	brcs	.+98     	; 0x3284 <process_tapping+0x334>
    3222:	f8 01       	movw	r30, r16
    3224:	e8 1b       	sub	r30, r24
    3226:	f9 0b       	sbc	r31, r25
    3228:	cf 01       	movw	r24, r30
    322a:	c1 2c       	mov	r12, r1
    322c:	88 3c       	cpi	r24, 0xC8	; 200
    322e:	91 05       	cpc	r25, r1
    3230:	08 f0       	brcs	.+2      	; 0x3234 <process_tapping+0x2e4>
    3232:	4b c0       	rjmp	.+150    	; 0x32ca <process_tapping+0x37a>
            if (event.pressed) {
    3234:	cd 2c       	mov	r12, r13
    3236:	dd 20       	and	r13, r13
    3238:	09 f4       	brne	.+2      	; 0x323c <process_tapping+0x2ec>
    323a:	5d c0       	rjmp	.+186    	; 0x32f6 <process_tapping+0x3a6>
                if (IS_TAPPING_KEY(event.key)) {
    323c:	65 13       	cpse	r22, r21
    323e:	30 c0       	rjmp	.+96     	; 0x32a0 <process_tapping+0x350>
    3240:	34 13       	cpse	r19, r20
    3242:	2e c0       	rjmp	.+92     	; 0x32a0 <process_tapping+0x350>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3244:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tapping_key+0x5>
    3248:	80 fd       	sbrc	r24, 0
    324a:	21 c0       	rjmp	.+66     	; 0x328e <process_tapping+0x33e>
    324c:	98 2f       	mov	r25, r24
    324e:	90 7f       	andi	r25, 0xF0	; 240
    3250:	f1 f0       	breq	.+60     	; 0x328e <process_tapping+0x33e>
                        keyp->tap = tapping_key.tap;
    3252:	d7 01       	movw	r26, r14
    3254:	15 96       	adiw	r26, 0x05	; 5
    3256:	8c 93       	st	X, r24
    3258:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    325a:	90 3f       	cpi	r25, 0xF0	; 240
    325c:	39 f0       	breq	.+14     	; 0x326c <process_tapping+0x31c>
    325e:	98 2f       	mov	r25, r24
    3260:	90 7f       	andi	r25, 0xF0	; 240
    3262:	90 5f       	subi	r25, 0xF0	; 240
    3264:	8f 70       	andi	r24, 0x0F	; 15
    3266:	89 2b       	or	r24, r25
    3268:	15 96       	adiw	r26, 0x05	; 5
    326a:	8c 93       	st	X, r24
                        process_action(keyp);
    326c:	c7 01       	movw	r24, r14
    326e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
                        tapping_key = *keyp;
    3272:	86 e0       	ldi	r24, 0x06	; 6
    3274:	f7 01       	movw	r30, r14
    3276:	a5 ec       	ldi	r26, 0xC5	; 197
    3278:	b1 e0       	ldi	r27, 0x01	; 1
    327a:	01 90       	ld	r0, Z+
    327c:	0d 92       	st	X+, r0
    327e:	8a 95       	dec	r24
    3280:	e1 f7       	brne	.-8      	; 0x327a <process_tapping+0x32a>
    3282:	93 cf       	rjmp	.-218    	; 0x31aa <process_tapping+0x25a>
        if (WITHIN_TAPPING_TERM(event)) {
    3284:	80 95       	com	r24
    3286:	90 95       	com	r25
    3288:	80 0f       	add	r24, r16
    328a:	91 1f       	adc	r25, r17
    328c:	ce cf       	rjmp	.-100    	; 0x322a <process_tapping+0x2da>
                        tapping_key = *keyp;
    328e:	86 e0       	ldi	r24, 0x06	; 6
    3290:	f7 01       	movw	r30, r14
    3292:	a5 ec       	ldi	r26, 0xC5	; 197
    3294:	b1 e0       	ldi	r27, 0x01	; 1
    3296:	01 90       	ld	r0, Z+
    3298:	0d 92       	st	X+, r0
    329a:	8a 95       	dec	r24
    329c:	e1 f7       	brne	.-8      	; 0x3296 <process_tapping+0x346>
                        return true;
    329e:	c5 ce       	rjmp	.-630    	; 0x302a <process_tapping+0xda>
                } else if (is_tap_key(event)) {
    32a0:	4d 87       	std	Y+13, r20	; 0x0d
    32a2:	5e 87       	std	Y+14, r21	; 0x0e
    32a4:	df 86       	std	Y+15, r13	; 0x0f
    32a6:	70 2f       	mov	r23, r16
    32a8:	19 8b       	std	Y+17, r17	; 0x11
    32aa:	08 8b       	std	Y+16, r16	; 0x10
    32ac:	6d 2d       	mov	r22, r13
    32ae:	89 89       	ldd	r24, Y+17	; 0x11
    32b0:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <is_tap_key>
    32b4:	81 11       	cpse	r24, r1
    32b6:	56 cf       	rjmp	.-340    	; 0x3164 <process_tapping+0x214>
                    tapping_key.tap.interrupted = true;
    32b8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tapping_key+0x5>
    32bc:	81 60       	ori	r24, 0x01	; 1
    32be:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <tapping_key+0x5>
                    process_action(keyp);
    32c2:	c7 01       	movw	r24, r14
    32c4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
                    return true;
    32c8:	b0 ce       	rjmp	.-672    	; 0x302a <process_tapping+0xda>
            debug_event(event); debug("\n");
    32ca:	70 2f       	mov	r23, r16
    32cc:	19 8b       	std	Y+17, r17	; 0x11
    32ce:	08 8b       	std	Y+16, r16	; 0x10
    32d0:	6d 2d       	mov	r22, r13
    32d2:	89 89       	ldd	r24, Y+17	; 0x11
    32d4:	0e 94 ef 16 	call	0x2dde	; 0x2dde <debug_event>
    32d8:	61 cf       	rjmp	.-318    	; 0x319c <process_tapping+0x24c>
        if (event.pressed && is_tap_key(event)) {
    32da:	dd 20       	and	r13, r13
    32dc:	61 f0       	breq	.+24     	; 0x32f6 <process_tapping+0x3a6>
    32de:	4d 87       	std	Y+13, r20	; 0x0d
    32e0:	5e 87       	std	Y+14, r21	; 0x0e
    32e2:	df 86       	std	Y+15, r13	; 0x0f
    32e4:	70 2f       	mov	r23, r16
    32e6:	19 8b       	std	Y+17, r17	; 0x11
    32e8:	08 8b       	std	Y+16, r16	; 0x10
    32ea:	6d 2d       	mov	r22, r13
    32ec:	89 89       	ldd	r24, Y+17	; 0x11
    32ee:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <is_tap_key>
    32f2:	81 11       	cpse	r24, r1
    32f4:	37 cf       	rjmp	.-402    	; 0x3164 <process_tapping+0x214>
                    process_action(keyp);
    32f6:	c7 01       	movw	r24, r14
    32f8:	0e 94 71 13 	call	0x26e2	; 0x26e2 <process_action>
    32fc:	3f cf       	rjmp	.-386    	; 0x317c <process_tapping+0x22c>

000032fe <action_tapping_process>:
{
    32fe:	1f 93       	push	r17
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	2c 97       	sbiw	r28, 0x0c	; 12
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	4f 83       	std	Y+7, r20	; 0x07
    3316:	58 87       	std	Y+8, r21	; 0x08
    3318:	69 87       	std	Y+9, r22	; 0x09
    331a:	7a 87       	std	Y+10, r23	; 0x0a
    331c:	8b 87       	std	Y+11, r24	; 0x0b
    331e:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3320:	ce 01       	movw	r24, r28
    3322:	07 96       	adiw	r24, 0x07	; 7
    3324:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <process_tapping>
    3328:	88 23       	and	r24, r24
    332a:	09 f4       	brne	.+2      	; 0x332e <action_tapping_process+0x30>
    332c:	42 c0       	rjmp	.+132    	; 0x33b2 <action_tapping_process+0xb4>
    332e:	9f 81       	ldd	r25, Y+7	; 0x07
    3330:	88 85       	ldd	r24, Y+8	; 0x08
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3332:	2a 85       	ldd	r18, Y+10	; 0x0a
    3334:	3b 85       	ldd	r19, Y+11	; 0x0b
    3336:	23 2b       	or	r18, r19
    3338:	39 f0       	breq	.+14     	; 0x3348 <action_tapping_process+0x4a>
    333a:	8f 3f       	cpi	r24, 0xFF	; 255
    333c:	19 f4       	brne	.+6      	; 0x3344 <action_tapping_process+0x46>
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	9f 3f       	cpi	r25, 0xFF	; 255
    3342:	19 f0       	breq	.+6      	; 0x334a <action_tapping_process+0x4c>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	01 c0       	rjmp	.+2      	; 0x334a <action_tapping_process+0x4c>
    3348:	81 e0       	ldi	r24, 0x01	; 1
        if (!IS_NOEVENT(record.event)) {
    334a:	80 fd       	sbrc	r24, 0
    334c:	08 c0       	rjmp	.+16     	; 0x335e <action_tapping_process+0x60>
            debug("processed: "); debug_record(record); debug("\n");
    334e:	4f 81       	ldd	r20, Y+7	; 0x07
    3350:	58 85       	ldd	r21, Y+8	; 0x08
    3352:	69 85       	ldd	r22, Y+9	; 0x09
    3354:	7a 85       	ldd	r23, Y+10	; 0x0a
    3356:	8b 85       	ldd	r24, Y+11	; 0x0b
    3358:	9c 85       	ldd	r25, Y+12	; 0x0c
    335a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <debug_record>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    335e:	16 e0       	ldi	r17, 0x06	; 6
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3360:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <waiting_buffer_tail>
    3364:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <waiting_buffer_head>
    3368:	89 17       	cp	r24, r25
    336a:	09 f4       	brne	.+2      	; 0x336e <action_tapping_process+0x70>
    336c:	67 c0       	rjmp	.+206    	; 0x343c <action_tapping_process+0x13e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    336e:	81 9f       	mul	r24, r17
    3370:	c0 01       	movw	r24, r0
    3372:	11 24       	eor	r1, r1
    3374:	8b 56       	subi	r24, 0x6B	; 107
    3376:	9e 4f       	sbci	r25, 0xFE	; 254
    3378:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <process_tapping>
    337c:	88 23       	and	r24, r24
    337e:	09 f4       	brne	.+2      	; 0x3382 <action_tapping_process+0x84>
    3380:	5d c0       	rjmp	.+186    	; 0x343c <action_tapping_process+0x13e>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3382:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <waiting_buffer_tail>
    3386:	1e 9f       	mul	r17, r30
    3388:	f0 01       	movw	r30, r0
    338a:	11 24       	eor	r1, r1
    338c:	eb 56       	subi	r30, 0x6B	; 107
    338e:	fe 4f       	sbci	r31, 0xFE	; 254
    3390:	40 81       	ld	r20, Z
    3392:	51 81       	ldd	r21, Z+1	; 0x01
    3394:	62 81       	ldd	r22, Z+2	; 0x02
    3396:	73 81       	ldd	r23, Z+3	; 0x03
    3398:	84 81       	ldd	r24, Z+4	; 0x04
    339a:	95 81       	ldd	r25, Z+5	; 0x05
    339c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    33a0:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <waiting_buffer_tail>
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	01 96       	adiw	r24, 0x01	; 1
    33a8:	87 70       	andi	r24, 0x07	; 7
    33aa:	99 27       	eor	r25, r25
    33ac:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <waiting_buffer_tail>
    33b0:	d7 cf       	rjmp	.-82     	; 0x3360 <action_tapping_process+0x62>
    33b2:	86 e0       	ldi	r24, 0x06	; 6
    33b4:	fe 01       	movw	r30, r28
    33b6:	37 96       	adiw	r30, 0x07	; 7
    33b8:	de 01       	movw	r26, r28
    33ba:	11 96       	adiw	r26, 0x01	; 1
    33bc:	01 90       	ld	r0, Z+
    33be:	0d 92       	st	X+, r0
    33c0:	8a 95       	dec	r24
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <action_tapping_process+0xbe>
    33c4:	9f 81       	ldd	r25, Y+7	; 0x07
    33c6:	88 85       	ldd	r24, Y+8	; 0x08
    33c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    33ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    33cc:	23 2b       	or	r18, r19
    33ce:	39 f0       	breq	.+14     	; 0x33de <action_tapping_process+0xe0>
    33d0:	8f 3f       	cpi	r24, 0xFF	; 255
    33d2:	19 f4       	brne	.+6      	; 0x33da <action_tapping_process+0xdc>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	9f 3f       	cpi	r25, 0xFF	; 255
    33d8:	19 f0       	breq	.+6      	; 0x33e0 <action_tapping_process+0xe2>
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <action_tapping_process+0xe2>
    33de:	81 e0       	ldi	r24, 0x01	; 1
    if (IS_NOEVENT(record.event)) {
    33e0:	80 fd       	sbrc	r24, 0
    33e2:	bd cf       	rjmp	.-134    	; 0x335e <action_tapping_process+0x60>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    33e4:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <waiting_buffer_head>
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	c9 01       	movw	r24, r18
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	87 70       	andi	r24, 0x07	; 7
    33f0:	99 27       	eor	r25, r25
    33f2:	40 91 93 01 	lds	r20, 0x0193	; 0x800193 <waiting_buffer_tail>
    33f6:	48 17       	cp	r20, r24
    33f8:	19 06       	cpc	r1, r25
    33fa:	99 f0       	breq	.+38     	; 0x3422 <action_tapping_process+0x124>
    waiting_buffer[waiting_buffer_head] = record;
    33fc:	96 e0       	ldi	r25, 0x06	; 6
    33fe:	92 9f       	mul	r25, r18
    3400:	d0 01       	movw	r26, r0
    3402:	93 9f       	mul	r25, r19
    3404:	b0 0d       	add	r27, r0
    3406:	11 24       	eor	r1, r1
    3408:	ab 56       	subi	r26, 0x6B	; 107
    340a:	be 4f       	sbci	r27, 0xFE	; 254
    340c:	fe 01       	movw	r30, r28
    340e:	31 96       	adiw	r30, 0x01	; 1
    3410:	01 90       	ld	r0, Z+
    3412:	0d 92       	st	X+, r0
    3414:	9a 95       	dec	r25
    3416:	e1 f7       	brne	.-8      	; 0x3410 <action_tapping_process+0x112>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3418:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    341c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <debug_waiting_buffer>
    3420:	9e cf       	rjmp	.-196    	; 0x335e <action_tapping_process+0x60>
            clear_keyboard();
    3422:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <clear_keyboard>
    waiting_buffer_head = 0;
    3426:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    342a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    342e:	86 e0       	ldi	r24, 0x06	; 6
    3430:	e5 ec       	ldi	r30, 0xC5	; 197
    3432:	f1 e0       	ldi	r31, 0x01	; 1
    3434:	df 01       	movw	r26, r30
    3436:	1d 92       	st	X+, r1
    3438:	8a 95       	dec	r24
    343a:	e9 f7       	brne	.-6      	; 0x3436 <action_tapping_process+0x138>
}
    343c:	2c 96       	adiw	r28, 0x0c	; 12
    343e:	0f b6       	in	r0, 0x3f	; 63
    3440:	f8 94       	cli
    3442:	de bf       	out	0x3e, r29	; 62
    3444:	0f be       	out	0x3f, r0	; 63
    3446:	cd bf       	out	0x3d, r28	; 61
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	08 95       	ret

00003450 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3450:	df 92       	push	r13
    3452:	ef 92       	push	r14
    3454:	ff 92       	push	r15
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3460:	89 2b       	or	r24, r25
    3462:	b9 f0       	breq	.+46     	; 0x3492 <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    3464:	e1 2c       	mov	r14, r1
    uint8_t interval = 0;
    3466:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3468:	dd 24       	eor	r13, r13
    346a:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    346c:	e8 01       	movw	r28, r16
    346e:	21 96       	adiw	r28, 0x01	; 1
    3470:	f8 01       	movw	r30, r16
    3472:	84 91       	lpm	r24, Z
    3474:	85 37       	cpi	r24, 0x75	; 117
    3476:	09 f4       	brne	.+2      	; 0x347a <action_macro_play+0x2a>
    3478:	6a c0       	rjmp	.+212    	; 0x354e <action_macro_play+0xfe>
    347a:	98 f4       	brcc	.+38     	; 0x34a2 <action_macro_play+0x52>
    347c:	84 37       	cpi	r24, 0x74	; 116
    347e:	08 f0       	brcs	.+2      	; 0x3482 <action_macro_play+0x32>
    3480:	59 c0       	rjmp	.+178    	; 0x3534 <action_macro_play+0xe4>
    3482:	84 30       	cpi	r24, 0x04	; 4
    3484:	08 f0       	brcs	.+2      	; 0x3488 <action_macro_play+0x38>
    3486:	6f c0       	rjmp	.+222    	; 0x3566 <action_macro_play+0x116>
    3488:	81 30       	cpi	r24, 0x01	; 1
    348a:	11 f1       	breq	.+68     	; 0x34d0 <action_macro_play+0x80>
    348c:	82 30       	cpi	r24, 0x02	; 2
    348e:	09 f4       	brne	.+2      	; 0x3492 <action_macro_play+0x42>
    3490:	3c c0       	rjmp	.+120    	; 0x350a <action_macro_play+0xba>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	ff 90       	pop	r15
    349c:	ef 90       	pop	r14
    349e:	df 90       	pop	r13
    34a0:	08 95       	ret
        switch (MACRO_READ()) {
    34a2:	88 37       	cpi	r24, 0x78	; 120
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <action_macro_play+0x58>
    34a6:	5c c0       	rjmp	.+184    	; 0x3560 <action_macro_play+0x110>
    34a8:	58 f4       	brcc	.+22     	; 0x34c0 <action_macro_play+0x70>
    34aa:	86 37       	cpi	r24, 0x76	; 118
    34ac:	09 f4       	brne	.+2      	; 0x34b0 <action_macro_play+0x60>
    34ae:	54 c0       	rjmp	.+168    	; 0x3558 <action_macro_play+0x108>
    34b0:	87 37       	cpi	r24, 0x77	; 119
    34b2:	79 f7       	brne	.-34     	; 0x3492 <action_macro_play+0x42>
                set_mods(mod_storage);
    34b4:	8e 2d       	mov	r24, r14
    34b6:	0e 94 a0 1c 	call	0x3940	; 0x3940 <set_mods>
                send_keyboard_report();
    34ba:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
                break;
    34be:	1f c0       	rjmp	.+62     	; 0x34fe <action_macro_play+0xae>
        switch (MACRO_READ()) {
    34c0:	9c e7       	ldi	r25, 0x7C	; 124
    34c2:	98 0f       	add	r25, r24
    34c4:	90 37       	cpi	r25, 0x70	; 112
    34c6:	28 f7       	brcc	.-54     	; 0x3492 <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    34c8:	8f 77       	andi	r24, 0x7F	; 127
    34ca:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <unregister_code>
                break;
    34ce:	17 c0       	rjmp	.+46     	; 0x34fe <action_macro_play+0xae>
                MACRO_READ();
    34d0:	0e 5f       	subi	r16, 0xFE	; 254
    34d2:	1f 4f       	sbci	r17, 0xFF	; 255
    34d4:	fe 01       	movw	r30, r28
    34d6:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    34d8:	90 e2       	ldi	r25, 0x20	; 32
    34da:	98 0f       	add	r25, r24
    34dc:	98 30       	cpi	r25, 0x08	; 8
    34de:	60 f4       	brcc	.+24     	; 0x34f8 <action_macro_play+0xa8>
                    add_weak_mods(MOD_BIT(macro));
    34e0:	87 70       	andi	r24, 0x07	; 7
    34e2:	fd 2d       	mov	r31, r13
    34e4:	01 c0       	rjmp	.+2      	; 0x34e8 <action_macro_play+0x98>
    34e6:	ff 0f       	add	r31, r31
    34e8:	8a 95       	dec	r24
    34ea:	ea f7       	brpl	.-6      	; 0x34e6 <action_macro_play+0x96>
    34ec:	8f 2f       	mov	r24, r31
    34ee:	0e 94 a6 1c 	call	0x394c	; 0x394c <add_weak_mods>
                    send_keyboard_report();
    34f2:	0e 94 cd 1c 	call	0x399a	; 0x399a <send_keyboard_report>
    34f6:	02 c0       	rjmp	.+4      	; 0x34fc <action_macro_play+0xac>
                    register_code(macro);
    34f8:	0e 94 1e 12 	call	0x243c	; 0x243c <register_code>
                MACRO_READ();
    34fc:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    34fe:	8f 2d       	mov	r24, r15
    3500:	81 50       	subi	r24, 0x01	; 1
    3502:	08 f0       	brcs	.+2      	; 0x3506 <action_macro_play+0xb6>
    3504:	33 c0       	rjmp	.+102    	; 0x356c <action_macro_play+0x11c>
    3506:	8e 01       	movw	r16, r28
    3508:	b1 cf       	rjmp	.-158    	; 0x346c <action_macro_play+0x1c>
                MACRO_READ();
    350a:	0e 5f       	subi	r16, 0xFE	; 254
    350c:	1f 4f       	sbci	r17, 0xFF	; 255
    350e:	fe 01       	movw	r30, r28
    3510:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3512:	90 e2       	ldi	r25, 0x20	; 32
    3514:	98 0f       	add	r25, r24
    3516:	98 30       	cpi	r25, 0x08	; 8
    3518:	50 f4       	brcc	.+20     	; 0x352e <action_macro_play+0xde>
                    del_weak_mods(MOD_BIT(macro));
    351a:	87 70       	andi	r24, 0x07	; 7
    351c:	fd 2d       	mov	r31, r13
    351e:	01 c0       	rjmp	.+2      	; 0x3522 <action_macro_play+0xd2>
    3520:	ff 0f       	add	r31, r31
    3522:	8a 95       	dec	r24
    3524:	ea f7       	brpl	.-6      	; 0x3520 <action_macro_play+0xd0>
    3526:	8f 2f       	mov	r24, r31
    3528:	0e 94 ac 1c 	call	0x3958	; 0x3958 <del_weak_mods>
    352c:	e2 cf       	rjmp	.-60     	; 0x34f2 <action_macro_play+0xa2>
                    unregister_code(macro);
    352e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <unregister_code>
    3532:	e4 cf       	rjmp	.-56     	; 0x34fc <action_macro_play+0xac>
                MACRO_READ();
    3534:	0e 5f       	subi	r16, 0xFE	; 254
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	fe 01       	movw	r30, r28
    353a:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    353c:	c1 50       	subi	r28, 0x01	; 1
    353e:	f0 f2       	brcs	.-68     	; 0x34fc <action_macro_play+0xac>
    3540:	8f e9       	ldi	r24, 0x9F	; 159
    3542:	9f e0       	ldi	r25, 0x0F	; 15
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <action_macro_play+0xf4>
    3548:	00 c0       	rjmp	.+0      	; 0x354a <action_macro_play+0xfa>
    354a:	00 00       	nop
    354c:	f7 cf       	rjmp	.-18     	; 0x353c <action_macro_play+0xec>
                interval = MACRO_READ();
    354e:	0e 5f       	subi	r16, 0xFE	; 254
    3550:	1f 4f       	sbci	r17, 0xFF	; 255
    3552:	fe 01       	movw	r30, r28
    3554:	f4 90       	lpm	r15, Z
    3556:	d2 cf       	rjmp	.-92     	; 0x34fc <action_macro_play+0xac>
                mod_storage = get_mods();
    3558:	0e 94 8f 1c 	call	0x391e	; 0x391e <get_mods>
    355c:	e8 2e       	mov	r14, r24
                break;
    355e:	cf cf       	rjmp	.-98     	; 0x34fe <action_macro_play+0xae>
                clear_mods();
    3560:	0e 94 a3 1c 	call	0x3946	; 0x3946 <clear_mods>
    3564:	aa cf       	rjmp	.-172    	; 0x34ba <action_macro_play+0x6a>
                register_code(macro);
    3566:	0e 94 1e 12 	call	0x243c	; 0x243c <register_code>
                break;
    356a:	c9 cf       	rjmp	.-110    	; 0x34fe <action_macro_play+0xae>
    356c:	ef e9       	ldi	r30, 0x9F	; 159
    356e:	ff e0       	ldi	r31, 0x0F	; 15
    3570:	31 97       	sbiw	r30, 0x01	; 1
    3572:	f1 f7       	brne	.-4      	; 0x3570 <action_macro_play+0x120>
    3574:	00 c0       	rjmp	.+0      	; 0x3576 <action_macro_play+0x126>
    3576:	00 00       	nop
    3578:	c3 cf       	rjmp	.-122    	; 0x3500 <action_macro_play+0xb0>

0000357a <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    357a:	60 93 37 02 	sts	0x0237, r22	; 0x800237 <layer_state>
    357e:	70 93 38 02 	sts	0x0238, r23	; 0x800238 <layer_state+0x1>
    3582:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <layer_state+0x2>
    3586:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <layer_state+0x3>
    hook_layer_change(layer_state);
    358a:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <hook_layer_change>

0000358e <default_layer_debug>:
}
    358e:	08 95       	ret

00003590 <default_layer_set>:
    default_layer_state = state;
    3590:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <default_layer_state>
    3594:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <default_layer_state+0x1>
    3598:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <default_layer_state+0x2>
    359c:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    35a0:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <hook_default_layer_change>

000035a4 <default_layer_or>:
{
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    35a8:	00 91 3b 02 	lds	r16, 0x023B	; 0x80023b <default_layer_state>
    35ac:	10 91 3c 02 	lds	r17, 0x023C	; 0x80023c <default_layer_state+0x1>
    35b0:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <default_layer_state+0x2>
    35b4:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <default_layer_state+0x3>
    35b8:	60 2b       	or	r22, r16
    35ba:	71 2b       	or	r23, r17
    35bc:	82 2b       	or	r24, r18
    35be:	93 2b       	or	r25, r19
    default_layer_state = state;
    35c0:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <default_layer_state>
    35c4:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <default_layer_state+0x1>
    35c8:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <default_layer_state+0x2>
    35cc:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <default_layer_state+0x3>
}
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    35d4:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <hook_default_layer_change>

000035d8 <default_layer_and>:
{
    35d8:	0f 93       	push	r16
    35da:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    35dc:	00 91 3b 02 	lds	r16, 0x023B	; 0x80023b <default_layer_state>
    35e0:	10 91 3c 02 	lds	r17, 0x023C	; 0x80023c <default_layer_state+0x1>
    35e4:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <default_layer_state+0x2>
    35e8:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <default_layer_state+0x3>
    35ec:	60 23       	and	r22, r16
    35ee:	71 23       	and	r23, r17
    35f0:	82 23       	and	r24, r18
    35f2:	93 23       	and	r25, r19
    default_layer_state = state;
    35f4:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <default_layer_state>
    35f8:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <default_layer_state+0x1>
    35fc:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <default_layer_state+0x2>
    3600:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <default_layer_state+0x3>
}
    3604:	1f 91       	pop	r17
    3606:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    3608:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <hook_default_layer_change>

0000360c <default_layer_xor>:
{
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3610:	00 91 3b 02 	lds	r16, 0x023B	; 0x80023b <default_layer_state>
    3614:	10 91 3c 02 	lds	r17, 0x023C	; 0x80023c <default_layer_state+0x1>
    3618:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <default_layer_state+0x2>
    361c:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <default_layer_state+0x3>
    3620:	60 27       	eor	r22, r16
    3622:	71 27       	eor	r23, r17
    3624:	82 27       	eor	r24, r18
    3626:	93 27       	eor	r25, r19
    default_layer_state = state;
    3628:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <default_layer_state>
    362c:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <default_layer_state+0x1>
    3630:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <default_layer_state+0x2>
    3634:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <default_layer_state+0x3>
}
    3638:	1f 91       	pop	r17
    363a:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    363c:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <hook_default_layer_change>

00003640 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	cb 01       	movw	r24, r22
    3646:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

0000364a <layer_move>:
}

void layer_move(uint8_t layer)
{
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    364e:	41 e0       	ldi	r20, 0x01	; 1
    3650:	50 e0       	ldi	r21, 0x00	; 0
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	8a 01       	movw	r16, r20
    3658:	9b 01       	movw	r18, r22
    365a:	04 c0       	rjmp	.+8      	; 0x3664 <layer_move+0x1a>
    365c:	00 0f       	add	r16, r16
    365e:	11 1f       	adc	r17, r17
    3660:	22 1f       	adc	r18, r18
    3662:	33 1f       	adc	r19, r19
    3664:	8a 95       	dec	r24
    3666:	d2 f7       	brpl	.-12     	; 0x365c <layer_move+0x12>
    3668:	c9 01       	movw	r24, r18
    366a:	b8 01       	movw	r22, r16
}
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    3670:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

00003674 <layer_on>:

void layer_on(uint8_t layer)
{
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3678:	41 e0       	ldi	r20, 0x01	; 1
    367a:	50 e0       	ldi	r21, 0x00	; 0
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	70 e0       	ldi	r23, 0x00	; 0
    3680:	04 c0       	rjmp	.+8      	; 0x368a <layer_on+0x16>
    3682:	44 0f       	add	r20, r20
    3684:	55 1f       	adc	r21, r21
    3686:	66 1f       	adc	r22, r22
    3688:	77 1f       	adc	r23, r23
    368a:	8a 95       	dec	r24
    368c:	d2 f7       	brpl	.-12     	; 0x3682 <layer_on+0xe>
    368e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <layer_state>
    3692:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <layer_state+0x1>
    3696:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <layer_state+0x2>
    369a:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <layer_state+0x3>
    369e:	8a 01       	movw	r16, r20
    36a0:	9b 01       	movw	r18, r22
    36a2:	08 2b       	or	r16, r24
    36a4:	19 2b       	or	r17, r25
    36a6:	2a 2b       	or	r18, r26
    36a8:	3b 2b       	or	r19, r27
    36aa:	c9 01       	movw	r24, r18
    36ac:	b8 01       	movw	r22, r16
}
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    36b2:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

000036b6 <layer_off>:

void layer_off(uint8_t layer)
{
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    36ba:	41 e0       	ldi	r20, 0x01	; 1
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	04 c0       	rjmp	.+8      	; 0x36cc <layer_off+0x16>
    36c4:	44 0f       	add	r20, r20
    36c6:	55 1f       	adc	r21, r21
    36c8:	66 1f       	adc	r22, r22
    36ca:	77 1f       	adc	r23, r23
    36cc:	8a 95       	dec	r24
    36ce:	d2 f7       	brpl	.-12     	; 0x36c4 <layer_off+0xe>
    36d0:	cb 01       	movw	r24, r22
    36d2:	ba 01       	movw	r22, r20
    36d4:	60 95       	com	r22
    36d6:	70 95       	com	r23
    36d8:	80 95       	com	r24
    36da:	90 95       	com	r25
    36dc:	00 91 37 02 	lds	r16, 0x0237	; 0x800237 <layer_state>
    36e0:	10 91 38 02 	lds	r17, 0x0238	; 0x800238 <layer_state+0x1>
    36e4:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <layer_state+0x2>
    36e8:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <layer_state+0x3>
    36ec:	60 23       	and	r22, r16
    36ee:	71 23       	and	r23, r17
    36f0:	82 23       	and	r24, r18
    36f2:	93 23       	and	r25, r19
}
    36f4:	1f 91       	pop	r17
    36f6:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    36f8:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

000036fc <layer_invert>:

void layer_invert(uint8_t layer)
{
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    3700:	41 e0       	ldi	r20, 0x01	; 1
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	04 c0       	rjmp	.+8      	; 0x3712 <layer_invert+0x16>
    370a:	44 0f       	add	r20, r20
    370c:	55 1f       	adc	r21, r21
    370e:	66 1f       	adc	r22, r22
    3710:	77 1f       	adc	r23, r23
    3712:	8a 95       	dec	r24
    3714:	d2 f7       	brpl	.-12     	; 0x370a <layer_invert+0xe>
    3716:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <layer_state>
    371a:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <layer_state+0x1>
    371e:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <layer_state+0x2>
    3722:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <layer_state+0x3>
    3726:	8a 01       	movw	r16, r20
    3728:	9b 01       	movw	r18, r22
    372a:	08 27       	eor	r16, r24
    372c:	19 27       	eor	r17, r25
    372e:	2a 27       	eor	r18, r26
    3730:	3b 27       	eor	r19, r27
    3732:	c9 01       	movw	r24, r18
    3734:	b8 01       	movw	r22, r16
}
    3736:	1f 91       	pop	r17
    3738:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    373a:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

0000373e <layer_or>:

void layer_or(uint32_t state)
{
    373e:	0f 93       	push	r16
    3740:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3742:	00 91 37 02 	lds	r16, 0x0237	; 0x800237 <layer_state>
    3746:	10 91 38 02 	lds	r17, 0x0238	; 0x800238 <layer_state+0x1>
    374a:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <layer_state+0x2>
    374e:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <layer_state+0x3>
    3752:	60 2b       	or	r22, r16
    3754:	71 2b       	or	r23, r17
    3756:	82 2b       	or	r24, r18
    3758:	93 2b       	or	r25, r19
}
    375a:	1f 91       	pop	r17
    375c:	0f 91       	pop	r16
    layer_state_set(layer_state | state);
    375e:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

00003762 <layer_and>:
void layer_and(uint32_t state)
{
    3762:	0f 93       	push	r16
    3764:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3766:	00 91 37 02 	lds	r16, 0x0237	; 0x800237 <layer_state>
    376a:	10 91 38 02 	lds	r17, 0x0238	; 0x800238 <layer_state+0x1>
    376e:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <layer_state+0x2>
    3772:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <layer_state+0x3>
    3776:	60 23       	and	r22, r16
    3778:	71 23       	and	r23, r17
    377a:	82 23       	and	r24, r18
    377c:	93 23       	and	r25, r19
}
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    layer_state_set(layer_state & state);
    3782:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

00003786 <layer_xor>:
void layer_xor(uint32_t state)
{
    3786:	0f 93       	push	r16
    3788:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    378a:	00 91 37 02 	lds	r16, 0x0237	; 0x800237 <layer_state>
    378e:	10 91 38 02 	lds	r17, 0x0238	; 0x800238 <layer_state+0x1>
    3792:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <layer_state+0x2>
    3796:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <layer_state+0x3>
    379a:	60 27       	eor	r22, r16
    379c:	71 27       	eor	r23, r17
    379e:	82 27       	eor	r24, r18
    37a0:	93 27       	eor	r25, r19
}
    37a2:	1f 91       	pop	r17
    37a4:	0f 91       	pop	r16
    layer_state_set(layer_state ^ state);
    37a6:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

000037aa <layer_debug>:
    37aa:	08 95       	ret

000037ac <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    37ac:	4f 92       	push	r4
    37ae:	5f 92       	push	r5
    37b0:	6f 92       	push	r6
    37b2:	7f 92       	push	r7
    37b4:	9f 92       	push	r9
    37b6:	af 92       	push	r10
    37b8:	bf 92       	push	r11
    37ba:	cf 92       	push	r12
    37bc:	df 92       	push	r13
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <layer_switch_get_action+0x20>
    37cc:	00 d0       	rcall	.+0      	; 0x37ce <layer_switch_get_action+0x22>
    37ce:	1f 92       	push	r1
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	7a 01       	movw	r14, r20
    37d6:	af 2c       	mov	r10, r15
    37d8:	b1 2c       	mov	r11, r1
    37da:	c4 2e       	mov	r12, r20
    37dc:	d1 2c       	mov	r13, r1
    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    37de:	66 23       	and	r22, r22
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <layer_switch_get_action+0x38>
    37e2:	54 c0       	rjmp	.+168    	; 0x388c <layer_switch_get_action+0xe0>
    uint32_t layers = layer_state | default_layer_state;
    37e4:	40 90 37 02 	lds	r4, 0x0237	; 0x800237 <layer_state>
    37e8:	50 90 38 02 	lds	r5, 0x0238	; 0x800238 <layer_state+0x1>
    37ec:	60 90 39 02 	lds	r6, 0x0239	; 0x800239 <layer_state+0x2>
    37f0:	70 90 3a 02 	lds	r7, 0x023A	; 0x80023a <layer_state+0x3>
    37f4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <default_layer_state>
    37f8:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <default_layer_state+0x1>
    37fc:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <default_layer_state+0x2>
    3800:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <default_layer_state+0x3>
    3804:	48 2a       	or	r4, r24
    3806:	59 2a       	or	r5, r25
    3808:	6a 2a       	or	r6, r26
    380a:	7b 2a       	or	r7, r27
    380c:	0f e1       	ldi	r16, 0x1F	; 31
    380e:	10 e0       	ldi	r17, 0x00	; 0
    3810:	90 2e       	mov	r9, r16
        if (layers & (1UL<<i)) {
    3812:	d3 01       	movw	r26, r6
    3814:	c2 01       	movw	r24, r4
    3816:	00 2e       	mov	r0, r16
    3818:	04 c0       	rjmp	.+8      	; 0x3822 <layer_switch_get_action+0x76>
    381a:	b6 95       	lsr	r27
    381c:	a7 95       	ror	r26
    381e:	97 95       	ror	r25
    3820:	87 95       	ror	r24
    3822:	0a 94       	dec	r0
    3824:	d2 f7       	brpl	.-12     	; 0x381a <layer_switch_get_action+0x6e>
    3826:	80 fd       	sbrc	r24, 0
    3828:	2a c0       	rjmp	.+84     	; 0x387e <layer_switch_get_action+0xd2>
    382a:	01 50       	subi	r16, 0x01	; 1
    382c:	11 09       	sbc	r17, r1
    382e:	80 f7       	brcc	.-32     	; 0x3810 <layer_switch_get_action+0x64>
    return 0;
    3830:	91 2c       	mov	r9, r1
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    3832:	82 e1       	ldi	r24, 0x12	; 18
    3834:	8a 9d       	mul	r24, r10
    3836:	f0 01       	movw	r30, r0
    3838:	8b 9d       	mul	r24, r11
    383a:	f0 0d       	add	r31, r0
    383c:	11 24       	eor	r1, r1
    383e:	e5 53       	subi	r30, 0x35	; 53
    3840:	fe 4f       	sbci	r31, 0xFE	; 254
    3842:	ec 0d       	add	r30, r12
    3844:	fd 1d       	adc	r31, r13
    3846:	90 82       	st	Z, r9
        layer = layer_pressed[event.key.row][event.key.col];
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    3848:	e9 82       	std	Y+1, r14	; 0x01
    384a:	fa 82       	std	Y+2, r15	; 0x02
    384c:	69 81       	ldd	r22, Y+1	; 0x01
    384e:	7a 81       	ldd	r23, Y+2	; 0x02
    3850:	89 2d       	mov	r24, r9
}
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	0f 90       	pop	r0
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	1f 91       	pop	r17
    3862:	0f 91       	pop	r16
    3864:	ff 90       	pop	r15
    3866:	ef 90       	pop	r14
    3868:	df 90       	pop	r13
    386a:	cf 90       	pop	r12
    386c:	bf 90       	pop	r11
    386e:	af 90       	pop	r10
    3870:	9f 90       	pop	r9
    3872:	7f 90       	pop	r7
    3874:	6f 90       	pop	r6
    3876:	5f 90       	pop	r5
    3878:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    387a:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <action_for_key>
            action = action_for_key(i, key);
    387e:	b7 01       	movw	r22, r14
    3880:	80 2f       	mov	r24, r16
    3882:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	81 f2       	breq	.-96     	; 0x382a <layer_switch_get_action+0x7e>
    388a:	d3 cf       	rjmp	.-90     	; 0x3832 <layer_switch_get_action+0x86>
        layer = layer_pressed[event.key.row][event.key.col];
    388c:	82 e1       	ldi	r24, 0x12	; 18
    388e:	8a 9d       	mul	r24, r10
    3890:	f0 01       	movw	r30, r0
    3892:	8b 9d       	mul	r24, r11
    3894:	f0 0d       	add	r31, r0
    3896:	11 24       	eor	r1, r1
    3898:	e5 53       	subi	r30, 0x35	; 53
    389a:	fe 4f       	sbci	r31, 0xFE	; 254
    389c:	ec 0d       	add	r30, r12
    389e:	fd 1d       	adc	r31, r13
    38a0:	90 80       	ld	r9, Z
    38a2:	d2 cf       	rjmp	.-92     	; 0x3848 <layer_switch_get_action+0x9c>

000038a4 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    38a4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <keyboard_report>
    38a8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <keyboard_report+0x1>
    38ac:	f9 01       	movw	r30, r18
    38ae:	32 96       	adiw	r30, 0x02	; 2
    38b0:	9f ef       	ldi	r25, 0xFF	; 255
    38b2:	40 e0       	ldi	r20, 0x00	; 0
    38b4:	51 91       	ld	r21, Z+
    38b6:	85 17       	cp	r24, r21
    38b8:	51 f0       	breq	.+20     	; 0x38ce <add_key+0x2a>
    38ba:	9f 3f       	cpi	r25, 0xFF	; 255
    38bc:	19 f4       	brne	.+6      	; 0x38c4 <add_key+0x20>
    38be:	51 11       	cpse	r21, r1
    38c0:	01 c0       	rjmp	.+2      	; 0x38c4 <add_key+0x20>
    38c2:	94 2f       	mov	r25, r20
    38c4:	4f 5f       	subi	r20, 0xFF	; 255
    38c6:	46 30       	cpi	r20, 0x06	; 6
    38c8:	a9 f7       	brne	.-22     	; 0x38b4 <add_key+0x10>
    38ca:	9f 3f       	cpi	r25, 0xFF	; 255
    38cc:	09 f4       	brne	.+2      	; 0x38d0 <add_key+0x2c>
    38ce:	08 95       	ret
    38d0:	29 0f       	add	r18, r25
    38d2:	31 1d       	adc	r19, r1
    38d4:	97 fd       	sbrc	r25, 7
    38d6:	3a 95       	dec	r19
    38d8:	f9 01       	movw	r30, r18
    38da:	82 83       	std	Z+2, r24	; 0x02
    38dc:	08 95       	ret

000038de <del_key>:
    38de:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <keyboard_report>
    38e2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <keyboard_report+0x1>
    38e6:	f9 01       	movw	r30, r18
    38e8:	32 96       	adiw	r30, 0x02	; 2
    38ea:	28 5f       	subi	r18, 0xF8	; 248
    38ec:	3f 4f       	sbci	r19, 0xFF	; 255
    38ee:	91 91       	ld	r25, Z+
    38f0:	89 13       	cpse	r24, r25
    38f2:	03 c0       	rjmp	.+6      	; 0x38fa <del_key+0x1c>
    38f4:	df 01       	movw	r26, r30
    38f6:	11 97       	sbiw	r26, 0x01	; 1
    38f8:	1c 92       	st	X, r1
    38fa:	e2 17       	cp	r30, r18
    38fc:	f3 07       	cpc	r31, r19
    38fe:	b9 f7       	brne	.-18     	; 0x38ee <del_key+0x10>
    3900:	08 95       	ret

00003902 <clear_keys>:
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    390a:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    390e:	e8 0f       	add	r30, r24
    3910:	f9 1f       	adc	r31, r25
    3912:	10 82       	st	Z, r1
    3914:	01 96       	adiw	r24, 0x01	; 1
    3916:	88 30       	cpi	r24, 0x08	; 8
    3918:	91 05       	cpc	r25, r1
    391a:	a9 f7       	brne	.-22     	; 0x3906 <clear_keys+0x4>
    391c:	08 95       	ret

0000391e <get_mods>:
    391e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <real_mods>
    3922:	08 95       	ret

00003924 <add_mods>:
    3924:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <real_mods>
    3928:	89 2b       	or	r24, r25
    392a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <real_mods>
    392e:	08 95       	ret

00003930 <del_mods>:
    3930:	98 2f       	mov	r25, r24
    3932:	90 95       	com	r25
    3934:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <real_mods>
    3938:	89 23       	and	r24, r25
    393a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <real_mods>
    393e:	08 95       	ret

00003940 <set_mods>:
    3940:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <real_mods>
    3944:	08 95       	ret

00003946 <clear_mods>:
    3946:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <real_mods>
    394a:	08 95       	ret

0000394c <add_weak_mods>:
    394c:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <weak_mods>
    3950:	89 2b       	or	r24, r25
    3952:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <weak_mods>
    3956:	08 95       	ret

00003958 <del_weak_mods>:
    3958:	98 2f       	mov	r25, r24
    395a:	90 95       	com	r25
    395c:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <weak_mods>
    3960:	89 23       	and	r24, r25
    3962:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <weak_mods>
    3966:	08 95       	ret

00003968 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    3968:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <weak_mods>
    396c:	08 95       	ret

0000396e <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    396e:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <oneshot_mods>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    3972:	08 95       	ret

00003974 <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3974:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <oneshot_mods>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3978:	08 95       	ret

0000397a <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    397a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <keyboard_report>
    397e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <keyboard_report+0x1>
    3982:	f9 01       	movw	r30, r18
    3984:	31 96       	adiw	r30, 0x01	; 1
    3986:	28 5f       	subi	r18, 0xF8	; 248
    3988:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    398a:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    398c:	91 91       	ld	r25, Z+
    398e:	91 11       	cpse	r25, r1
            cnt++;
    3990:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3992:	e2 17       	cp	r30, r18
    3994:	f3 07       	cpc	r31, r19
    3996:	d1 f7       	brne	.-12     	; 0x398c <has_anykey+0x12>
    }
    return cnt;
}
    3998:	08 95       	ret

0000399a <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    399a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    399e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    39a2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <real_mods>
    39a6:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    39a8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    39ac:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    39b0:	80 81       	ld	r24, Z
    39b2:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <weak_mods>
    39b6:	89 2b       	or	r24, r25
    39b8:	80 83       	st	Z, r24
    if (oneshot_mods) {
    39ba:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <oneshot_mods>
    39be:	99 23       	and	r25, r25
    39c0:	61 f0       	breq	.+24     	; 0x39da <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    39c2:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    39c6:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    39ca:	80 81       	ld	r24, Z
    39cc:	89 2b       	or	r24, r25
    39ce:	80 83       	st	Z, r24
        if (has_anykey()) {
    39d0:	0e 94 bd 1c 	call	0x397a	; 0x397a <has_anykey>
    39d4:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    39d6:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <oneshot_mods>
    host_keyboard_send(keyboard_report);
    39da:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_report>
    39de:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <keyboard_report+0x1>
    39e2:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <host_keyboard_send>

000039e6 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    39e6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
    39ea:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
}
    39ee:	08 95       	ret

000039f0 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    39f0:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	9c 01       	movw	r18, r24
    39f6:	22 0f       	add	r18, r18
    39f8:	33 1f       	adc	r19, r19
    39fa:	22 0f       	add	r18, r18
    39fc:	33 1f       	adc	r19, r19
    39fe:	2c 7c       	andi	r18, 0xCC	; 204
    3a00:	95 95       	asr	r25
    3a02:	87 95       	ror	r24
    3a04:	95 95       	asr	r25
    3a06:	87 95       	ror	r24
    3a08:	83 73       	andi	r24, 0x33	; 51
    3a0a:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	c9 01       	movw	r24, r18
    3a10:	88 0f       	add	r24, r24
    3a12:	99 1f       	adc	r25, r25
    3a14:	8a 7a       	andi	r24, 0xAA	; 170
    3a16:	35 95       	asr	r19
    3a18:	27 95       	ror	r18
    3a1a:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    3a1c:	82 2b       	or	r24, r18
    3a1e:	08 95       	ret

00003a20 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	d9 2f       	mov	r29, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3a26:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <bitrev>
    3a2a:	c8 2f       	mov	r28, r24
    3a2c:	8d 2f       	mov	r24, r29
    3a2e:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <bitrev>
    return bits;
}
    3a32:	9c 2f       	mov	r25, r28
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	08 95       	ret

00003a3a <bitrev32>:

uint32_t bitrev32(uint32_t bits)
{
    3a3a:	cf 92       	push	r12
    3a3c:	df 92       	push	r13
    3a3e:	ef 92       	push	r14
    3a40:	ff 92       	push	r15
    3a42:	0f 93       	push	r16
    3a44:	1f 93       	push	r17
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	7c 01       	movw	r14, r24
    bits = (uint32_t)bitrev16(bits & 0x0000ffff)<<16 | bitrev16((bits & 0xffff0000)>>16);
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <bitrev16>
    3a52:	ec 01       	movw	r28, r24
    3a54:	c7 01       	movw	r24, r14
    3a56:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <bitrev16>
    3a5a:	8c 01       	movw	r16, r24
    3a5c:	be 01       	movw	r22, r28
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	cb 01       	movw	r24, r22
    3a64:	77 27       	eor	r23, r23
    3a66:	66 27       	eor	r22, r22
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	60 2b       	or	r22, r16
    3a6e:	71 2b       	or	r23, r17
    3a70:	82 2b       	or	r24, r18
    3a72:	93 2b       	or	r25, r19
    return bits;
}
    3a74:	df 91       	pop	r29
    3a76:	cf 91       	pop	r28
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	ff 90       	pop	r15
    3a7e:	ef 90       	pop	r14
    3a80:	df 90       	pop	r13
    3a82:	cf 90       	pop	r12
    3a84:	08 95       	ret

00003a86 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3a86:	08 95       	ret

00003a88 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	00 d0       	rcall	.+0      	; 0x3a8e <hook_matrix_change+0x6>
    3a8e:	00 d0       	rcall	.+0      	; 0x3a90 <hook_matrix_change+0x8>
    3a90:	1f 92       	push	r1
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	08 95       	ret

00003aa6 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    3aa6:	08 95       	ret

00003aa8 <hook_layer_change>:
    3aa8:	08 95       	ret

00003aaa <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3aaa:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <keyboard_set_leds>

00003aae <hook_bootmagic>:
    3aae:	08 95       	ret

00003ab0 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3ab0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <USB_DeviceState>
    3ab4:	84 30       	cpi	r24, 0x04	; 4
    3ab6:	21 f1       	breq	.+72     	; 0x3b00 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3ab8:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3abc:	88 e1       	ldi	r24, 0x18	; 24
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	20 e4       	ldi	r18, 0x40	; 64
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	a8 95       	wdr
    3ac8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3ad2:	83 b7       	in	r24, 0x33	; 51
    3ad4:	81 7f       	andi	r24, 0xF1	; 241
    3ad6:	84 60       	ori	r24, 0x04	; 4
    3ad8:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3ada:	83 b7       	in	r24, 0x33	; 51
    3adc:	81 60       	ori	r24, 0x01	; 1
    3ade:	83 bf       	out	0x33, r24	; 51
    sei();
    3ae0:	78 94       	sei
    sleep_cpu();
    3ae2:	88 95       	sleep
    sleep_disable();
    3ae4:	83 b7       	in	r24, 0x33	; 51
    3ae6:	8e 7f       	andi	r24, 0xFE	; 254
    3ae8:	83 bf       	out	0x33, r24	; 51
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	a8 95       	wdr
    3af0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3af4:	88 61       	ori	r24, 0x18	; 24
    3af6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3afa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3afe:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    3b00:	08 95       	ret

00003b02 <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    3b02:	cf 93       	push	r28
    matrix_power_up();
    3b04:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <matrix_power_up>
    matrix_scan();
    3b08:	0e 94 c4 06 	call	0xd88	; 0xd88 <matrix_scan>
    matrix_power_down();
    3b0c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b10:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3b12:	8c 2f       	mov	r24, r28
    3b14:	0e 94 52 08 	call	0x10a4	; 0x10a4 <matrix_get_row>
    3b18:	67 2b       	or	r22, r23
    3b1a:	68 2b       	or	r22, r24
    3b1c:	69 2b       	or	r22, r25
    3b1e:	31 f4       	brne	.+12     	; 0x3b2c <suspend_wakeup_condition+0x2a>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b20:	cf 5f       	subi	r28, 0xFF	; 255
    3b22:	c6 30       	cpi	r28, 0x06	; 6
    3b24:	b1 f7       	brne	.-20     	; 0x3b12 <suspend_wakeup_condition+0x10>
    }
    return false;
    3b26:	80 e0       	ldi	r24, 0x00	; 0
}
    3b28:	cf 91       	pop	r28
    3b2a:	08 95       	ret
        if (matrix_get_row(r)) return true;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	fc cf       	rjmp	.-8      	; 0x3b28 <suspend_wakeup_condition+0x26>

00003b30 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3b30:	0e 94 a4 11 	call	0x2348	; 0x2348 <matrix_clear>
    clear_keyboard();
    3b34:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <clear_keyboard>

00003b38 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3b38:	1f 92       	push	r1
    3b3a:	0f 92       	push	r0
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	0f 92       	push	r0
    3b40:	11 24       	eor	r1, r1
    3b42:	8f 93       	push	r24
    3b44:	9f 93       	push	r25
    3b46:	af 93       	push	r26
    3b48:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3b4a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <wdt_timeout>
    3b4e:	81 11       	cpse	r24, r1
    3b50:	13 c0       	rjmp	.+38     	; 0x3b78 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3b52:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <timer_count>
    3b56:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <timer_count+0x1>
    3b5a:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <timer_count+0x2>
    3b5e:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <timer_count+0x3>
    3b62:	41 96       	adiw	r24, 0x11	; 17
    3b64:	a1 1d       	adc	r26, r1
    3b66:	b1 1d       	adc	r27, r1
    3b68:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <timer_count>
    3b6c:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <timer_count+0x1>
    3b70:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <timer_count+0x2>
    3b74:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3b78:	bf 91       	pop	r27
    3b7a:	af 91       	pop	r26
    3b7c:	9f 91       	pop	r25
    3b7e:	8f 91       	pop	r24
    3b80:	0f 90       	pop	r0
    3b82:	0f be       	out	0x3f, r0	; 63
    3b84:	0f 90       	pop	r0
    3b86:	1f 90       	pop	r1
    3b88:	18 95       	reti

00003b8a <timer_init>:
    uint8_t sreg = SREG;
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
    3b8a:	82 e0       	ldi	r24, 0x02	; 2
    3b8c:	84 bd       	out	0x24, r24	; 36
    3b8e:	93 e0       	ldi	r25, 0x03	; 3
    3b90:	95 bd       	out	0x25, r25	; 37
    3b92:	9a ef       	ldi	r25, 0xFA	; 250
    3b94:	97 bd       	out	0x27, r25	; 39
    3b96:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3b9a:	08 95       	ret

00003b9c <timer_read>:
    3b9c:	2f b7       	in	r18, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <timer_count>
    3ba4:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <timer_count+0x1>
    3ba8:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <timer_count+0x2>
    3bac:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <timer_count+0x3>
    3bb0:	2f bf       	out	0x3f, r18	; 63
    3bb2:	08 95       	ret

00003bb4 <timer_read32>:
    3bb4:	2f b7       	in	r18, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <timer_count>
    3bbc:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <timer_count+0x1>
    3bc0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <timer_count+0x2>
    3bc4:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <timer_count+0x3>
    3bc8:	2f bf       	out	0x3f, r18	; 63
    3bca:	08 95       	ret

00003bcc <timer_elapsed>:
    3bcc:	cf 92       	push	r12
    3bce:	df 92       	push	r13
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	2f b7       	in	r18, 0x3f	; 63
    3bda:	f8 94       	cli
    3bdc:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <timer_count>
    3be0:	50 91 4d 02 	lds	r21, 0x024D	; 0x80024d <timer_count+0x1>
    3be4:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <timer_count+0x2>
    3be8:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <timer_count+0x3>
    3bec:	2f bf       	out	0x3f, r18	; 63
    3bee:	6a 01       	movw	r12, r20
    3bf0:	7b 01       	movw	r14, r22
    3bf2:	ee 24       	eor	r14, r14
    3bf4:	ff 24       	eor	r15, r15
    3bf6:	8c 01       	movw	r16, r24
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	c0 16       	cp	r12, r16
    3bfe:	d1 06       	cpc	r13, r17
    3c00:	e2 06       	cpc	r14, r18
    3c02:	f3 06       	cpc	r15, r19
    3c04:	50 f0       	brcs	.+20     	; 0x3c1a <timer_elapsed+0x4e>
    3c06:	48 1b       	sub	r20, r24
    3c08:	59 0b       	sbc	r21, r25
    3c0a:	ca 01       	movw	r24, r20
    3c0c:	1f 91       	pop	r17
    3c0e:	0f 91       	pop	r16
    3c10:	ff 90       	pop	r15
    3c12:	ef 90       	pop	r14
    3c14:	df 90       	pop	r13
    3c16:	cf 90       	pop	r12
    3c18:	08 95       	ret
    3c1a:	41 50       	subi	r20, 0x01	; 1
    3c1c:	51 09       	sbc	r21, r1
    3c1e:	f3 cf       	rjmp	.-26     	; 0x3c06 <timer_elapsed+0x3a>

00003c20 <__vector_21>:
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3c20:	1f 92       	push	r1
    3c22:	0f 92       	push	r0
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	0f 92       	push	r0
    3c28:	11 24       	eor	r1, r1
    3c2a:	8f 93       	push	r24
    3c2c:	9f 93       	push	r25
    3c2e:	af 93       	push	r26
    3c30:	bf 93       	push	r27
    timer_count++;
    3c32:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <timer_count>
    3c36:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <timer_count+0x1>
    3c3a:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <timer_count+0x2>
    3c3e:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <timer_count+0x3>
    3c42:	01 96       	adiw	r24, 0x01	; 1
    3c44:	a1 1d       	adc	r26, r1
    3c46:	b1 1d       	adc	r27, r1
    3c48:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <timer_count>
    3c4c:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <timer_count+0x1>
    3c50:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <timer_count+0x2>
    3c54:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <timer_count+0x3>
}
    3c58:	bf 91       	pop	r27
    3c5a:	af 91       	pop	r26
    3c5c:	9f 91       	pop	r25
    3c5e:	8f 91       	pop	r24
    3c60:	0f 90       	pop	r0
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	0f 90       	pop	r0
    3c66:	1f 90       	pop	r1
    3c68:	18 95       	reti

00003c6a <bootloader_jump>:
    USB_Disable();
    3c6a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <USB_Disable>
    cli();
    3c6e:	f8 94       	cli
    3c70:	2f ef       	ldi	r18, 0xFF	; 255
    3c72:	87 ea       	ldi	r24, 0xA7	; 167
    3c74:	91 e6       	ldi	r25, 0x61	; 97
    3c76:	21 50       	subi	r18, 0x01	; 1
    3c78:	80 40       	sbci	r24, 0x00	; 0
    3c7a:	90 40       	sbci	r25, 0x00	; 0
    3c7c:	e1 f7       	brne	.-8      	; 0x3c76 <bootloader_jump+0xc>
    3c7e:	00 c0       	rjmp	.+0      	; 0x3c80 <bootloader_jump+0x16>
    3c80:	00 00       	nop
    reset_key = BOOTLOADER_RESET_KEY;
    3c82:	87 e0       	ldi	r24, 0x07	; 7
    3c84:	90 eb       	ldi	r25, 0xB0	; 176
    3c86:	dc 01       	movw	r26, r24
    3c88:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <__bss_end>
    3c8c:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <__bss_end+0x1>
    3c90:	a0 93 6b 02 	sts	0x026B, r26	; 0x80026b <__bss_end+0x2>
    3c94:	b0 93 6c 02 	sts	0x026C, r27	; 0x80026c <__bss_end+0x3>
		__asm__ __volatile__ (
    3c98:	88 e1       	ldi	r24, 0x18	; 24
    3c9a:	9c e0       	ldi	r25, 0x0C	; 12
    3c9c:	0f b6       	in	r0, 0x3f	; 63
    3c9e:	f8 94       	cli
    3ca0:	a8 95       	wdr
    3ca2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3cac:	ff cf       	rjmp	.-2      	; 0x3cac <bootloader_jump+0x42>

00003cae <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3cae:	8d 3b       	cpi	r24, 0xBD	; 189
    3cb0:	60 f4       	brcc	.+24     	; 0x3cca <keycode_to_action+0x1c>
    3cb2:	88 3a       	cpi	r24, 0xA8	; 168
    3cb4:	80 f5       	brcc	.+96     	; 0x3d16 <keycode_to_action+0x68>
    3cb6:	85 3a       	cpi	r24, 0xA5	; 165
    3cb8:	18 f5       	brcc	.+70     	; 0x3d00 <keycode_to_action+0x52>
    3cba:	84 30       	cpi	r24, 0x04	; 4
    3cbc:	f8 f4       	brcc	.+62     	; 0x3cfc <keycode_to_action+0x4e>
    3cbe:	81 30       	cpi	r24, 0x01	; 1
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <keycode_to_action+0x16>
    3cc2:	81 c0       	rjmp	.+258    	; 0x3dc6 <keycode_to_action+0x118>
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3cc8:	08 95       	ret
    switch (keycode) {
    3cca:	88 3e       	cpi	r24, 0xE8	; 232
    3ccc:	90 f4       	brcc	.+36     	; 0x3cf2 <keycode_to_action+0x44>
    3cce:	80 3e       	cpi	r24, 0xE0	; 224
    3cd0:	a8 f4       	brcc	.+42     	; 0x3cfc <keycode_to_action+0x4e>
    3cd2:	8f 3b       	cpi	r24, 0xBF	; 191
    3cd4:	b9 f7       	brne	.-18     	; 0x3cc4 <keycode_to_action+0x16>
            clear_keyboard();
    3cd6:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <clear_keyboard>
    3cda:	2f ef       	ldi	r18, 0xFF	; 255
    3cdc:	80 e7       	ldi	r24, 0x70	; 112
    3cde:	92 e0       	ldi	r25, 0x02	; 2
    3ce0:	21 50       	subi	r18, 0x01	; 1
    3ce2:	80 40       	sbci	r24, 0x00	; 0
    3ce4:	90 40       	sbci	r25, 0x00	; 0
    3ce6:	e1 f7       	brne	.-8      	; 0x3ce0 <keycode_to_action+0x32>
    3ce8:	00 c0       	rjmp	.+0      	; 0x3cea <keycode_to_action+0x3c>
    3cea:	00 00       	nop
            bootloader_jump(); // not return
    3cec:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <bootloader_jump>
    3cf0:	e9 cf       	rjmp	.-46     	; 0x3cc4 <keycode_to_action+0x16>
    switch (keycode) {
    3cf2:	80 3f       	cpi	r24, 0xF0	; 240
    3cf4:	38 f3       	brcs	.-50     	; 0x3cc4 <keycode_to_action+0x16>
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
            return (action_t)ACTION_MOUSEKEY(keycode);
    3cf8:	90 65       	ori	r25, 0x50	; 80
    3cfa:	08 95       	ret
            return (action_t)ACTION_KEY(keycode);
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	08 95       	ret
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3d00:	31 e8       	ldi	r19, 0x81	; 129
    3d02:	85 3a       	cpi	r24, 0xA5	; 165
    3d04:	21 f0       	breq	.+8      	; 0x3d0e <keycode_to_action+0x60>
    3d06:	33 e8       	ldi	r19, 0x83	; 131
    3d08:	86 3a       	cpi	r24, 0xA6	; 166
    3d0a:	09 f4       	brne	.+2      	; 0x3d0e <keycode_to_action+0x60>
    3d0c:	32 e8       	ldi	r19, 0x82	; 130
    3d0e:	20 e4       	ldi	r18, 0x40	; 64
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3d10:	83 2f       	mov	r24, r19
    3d12:	92 2f       	mov	r25, r18
    3d14:	08 95       	ret
    3d16:	88 3a       	cpi	r24, 0xA8	; 168
    3d18:	59 f1       	breq	.+86     	; 0x3d70 <keycode_to_action+0xc2>
    3d1a:	89 3a       	cpi	r24, 0xA9	; 169
    3d1c:	61 f1       	breq	.+88     	; 0x3d76 <keycode_to_action+0xc8>
    3d1e:	8a 3a       	cpi	r24, 0xAA	; 170
    3d20:	61 f1       	breq	.+88     	; 0x3d7a <keycode_to_action+0xcc>
    3d22:	8b 3a       	cpi	r24, 0xAB	; 171
    3d24:	61 f1       	breq	.+88     	; 0x3d7e <keycode_to_action+0xd0>
    3d26:	8c 3a       	cpi	r24, 0xAC	; 172
    3d28:	61 f1       	breq	.+88     	; 0x3d82 <keycode_to_action+0xd4>
    3d2a:	8d 3a       	cpi	r24, 0xAD	; 173
    3d2c:	61 f1       	breq	.+88     	; 0x3d86 <keycode_to_action+0xd8>
    3d2e:	8e 3a       	cpi	r24, 0xAE	; 174
    3d30:	61 f1       	breq	.+88     	; 0x3d8a <keycode_to_action+0xdc>
    3d32:	8f 3a       	cpi	r24, 0xAF	; 175
    3d34:	61 f1       	breq	.+88     	; 0x3d8e <keycode_to_action+0xe0>
    3d36:	81 3b       	cpi	r24, 0xB1	; 177
    3d38:	61 f1       	breq	.+88     	; 0x3d92 <keycode_to_action+0xe4>
    3d3a:	80 3b       	cpi	r24, 0xB0	; 176
    3d3c:	61 f1       	breq	.+88     	; 0x3d96 <keycode_to_action+0xe8>
    3d3e:	82 3b       	cpi	r24, 0xB2	; 178
    3d40:	61 f1       	breq	.+88     	; 0x3d9a <keycode_to_action+0xec>
    3d42:	83 3b       	cpi	r24, 0xB3	; 179
    3d44:	69 f1       	breq	.+90     	; 0x3da0 <keycode_to_action+0xf2>
    3d46:	84 3b       	cpi	r24, 0xB4	; 180
    3d48:	69 f1       	breq	.+90     	; 0x3da4 <keycode_to_action+0xf6>
    3d4a:	85 3b       	cpi	r24, 0xB5	; 181
    3d4c:	69 f1       	breq	.+90     	; 0x3da8 <keycode_to_action+0xfa>
    3d4e:	86 3b       	cpi	r24, 0xB6	; 182
    3d50:	69 f1       	breq	.+90     	; 0x3dac <keycode_to_action+0xfe>
    3d52:	87 3b       	cpi	r24, 0xB7	; 183
    3d54:	71 f1       	breq	.+92     	; 0x3db2 <keycode_to_action+0x104>
    3d56:	88 3b       	cpi	r24, 0xB8	; 184
    3d58:	71 f1       	breq	.+92     	; 0x3db6 <keycode_to_action+0x108>
    3d5a:	89 3b       	cpi	r24, 0xB9	; 185
    3d5c:	71 f1       	breq	.+92     	; 0x3dba <keycode_to_action+0x10c>
    3d5e:	8a 3b       	cpi	r24, 0xBA	; 186
    3d60:	71 f1       	breq	.+92     	; 0x3dbe <keycode_to_action+0x110>
    3d62:	8b 3b       	cpi	r24, 0xBB	; 187
    3d64:	71 f1       	breq	.+92     	; 0x3dc2 <keycode_to_action+0x114>
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	8c 3b       	cpi	r24, 0xBC	; 188
    3d6a:	19 f4       	brne	.+6      	; 0x3d72 <keycode_to_action+0xc4>
    3d6c:	3a e2       	ldi	r19, 0x2A	; 42
    3d6e:	1f c0       	rjmp	.+62     	; 0x3dae <keycode_to_action+0x100>
    3d70:	32 ee       	ldi	r19, 0xE2	; 226
    3d72:	24 e4       	ldi	r18, 0x44	; 68
    3d74:	cd cf       	rjmp	.-102    	; 0x3d10 <keycode_to_action+0x62>
    3d76:	39 ee       	ldi	r19, 0xE9	; 233
    3d78:	fc cf       	rjmp	.-8      	; 0x3d72 <keycode_to_action+0xc4>
    3d7a:	3a ee       	ldi	r19, 0xEA	; 234
    3d7c:	fa cf       	rjmp	.-12     	; 0x3d72 <keycode_to_action+0xc4>
    3d7e:	35 eb       	ldi	r19, 0xB5	; 181
    3d80:	f8 cf       	rjmp	.-16     	; 0x3d72 <keycode_to_action+0xc4>
    3d82:	36 eb       	ldi	r19, 0xB6	; 182
    3d84:	f6 cf       	rjmp	.-20     	; 0x3d72 <keycode_to_action+0xc4>
    3d86:	33 eb       	ldi	r19, 0xB3	; 179
    3d88:	f4 cf       	rjmp	.-24     	; 0x3d72 <keycode_to_action+0xc4>
    3d8a:	34 eb       	ldi	r19, 0xB4	; 180
    3d8c:	f2 cf       	rjmp	.-28     	; 0x3d72 <keycode_to_action+0xc4>
    3d8e:	37 eb       	ldi	r19, 0xB7	; 183
    3d90:	f0 cf       	rjmp	.-32     	; 0x3d72 <keycode_to_action+0xc4>
    3d92:	3c ec       	ldi	r19, 0xCC	; 204
    3d94:	ee cf       	rjmp	.-36     	; 0x3d72 <keycode_to_action+0xc4>
    3d96:	3d ec       	ldi	r19, 0xCD	; 205
    3d98:	ec cf       	rjmp	.-40     	; 0x3d72 <keycode_to_action+0xc4>
    3d9a:	33 e8       	ldi	r19, 0x83	; 131
    3d9c:	25 e4       	ldi	r18, 0x45	; 69
    3d9e:	b8 cf       	rjmp	.-144    	; 0x3d10 <keycode_to_action+0x62>
    3da0:	3a e8       	ldi	r19, 0x8A	; 138
    3da2:	fc cf       	rjmp	.-8      	; 0x3d9c <keycode_to_action+0xee>
    3da4:	32 e9       	ldi	r19, 0x92	; 146
    3da6:	fa cf       	rjmp	.-12     	; 0x3d9c <keycode_to_action+0xee>
    3da8:	34 e9       	ldi	r19, 0x94	; 148
    3daa:	f8 cf       	rjmp	.-16     	; 0x3d9c <keycode_to_action+0xee>
    3dac:	31 e2       	ldi	r19, 0x21	; 33
    3dae:	26 e4       	ldi	r18, 0x46	; 70
    3db0:	af cf       	rjmp	.-162    	; 0x3d10 <keycode_to_action+0x62>
    3db2:	33 e2       	ldi	r19, 0x23	; 35
    3db4:	fc cf       	rjmp	.-8      	; 0x3dae <keycode_to_action+0x100>
    3db6:	34 e2       	ldi	r19, 0x24	; 36
    3db8:	fa cf       	rjmp	.-12     	; 0x3dae <keycode_to_action+0x100>
    3dba:	35 e2       	ldi	r19, 0x25	; 37
    3dbc:	f8 cf       	rjmp	.-16     	; 0x3dae <keycode_to_action+0x100>
    3dbe:	36 e2       	ldi	r19, 0x26	; 38
    3dc0:	f6 cf       	rjmp	.-20     	; 0x3dae <keycode_to_action+0x100>
    3dc2:	37 e2       	ldi	r19, 0x27	; 39
    3dc4:	f4 cf       	rjmp	.-24     	; 0x3dae <keycode_to_action+0x100>
            return (action_t)ACTION_TRANSPARENT;
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	08 95       	ret

00003dcc <action_get_macro>:
}
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	08 95       	ret

00003dd2 <action_function>:
}
    3dd2:	08 95       	ret

00003dd4 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3dd4:	e6 2f       	mov	r30, r22
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	92 e1       	ldi	r25, 0x12	; 18
    3dda:	79 9f       	mul	r23, r25
    3ddc:	e0 0d       	add	r30, r0
    3dde:	f1 1d       	adc	r31, r1
    3de0:	11 24       	eor	r1, r1
    3de2:	9c e6       	ldi	r25, 0x6C	; 108
    3de4:	89 9f       	mul	r24, r25
    3de6:	e0 0d       	add	r30, r0
    3de8:	f1 1d       	adc	r31, r1
    3dea:	11 24       	eor	r1, r1
    3dec:	e4 55       	subi	r30, 0x54	; 84
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3df2:	08 95       	ret

00003df4 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3df4:	28 2f       	mov	r18, r24
    3df6:	20 5c       	subi	r18, 0xC0	; 192
    3df8:	33 0b       	sbc	r19, r19
    3dfa:	f9 01       	movw	r30, r18
    3dfc:	ee 0f       	add	r30, r30
    3dfe:	ff 1f       	adc	r31, r31
    3e00:	e4 55       	subi	r30, 0x54	; 84
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	85 91       	lpm	r24, Z+
    3e06:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3e08:	08 95       	ret

00003e0a <action_for_key>:
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3e0a:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <keymap_key_to_keycode>
    switch (keycode) {
    3e0e:	80 3e       	cpi	r24, 0xE0	; 224
    3e10:	d0 f4       	brcc	.+52     	; 0x3e46 <action_for_key+0x3c>
    3e12:	80 3c       	cpi	r24, 0xC0	; 192
    3e14:	88 f5       	brcc	.+98     	; 0x3e78 <action_for_key+0x6e>
    3e16:	81 33       	cpi	r24, 0x31	; 49
    3e18:	09 f4       	brne	.+2      	; 0x3e1c <action_for_key+0x12>
    3e1a:	52 c0       	rjmp	.+164    	; 0x3ec0 <action_for_key+0xb6>
    3e1c:	40 f4       	brcc	.+16     	; 0x3e2e <action_for_key+0x24>
    3e1e:	89 32       	cpi	r24, 0x29	; 41
    3e20:	09 f4       	brne	.+2      	; 0x3e24 <action_for_key+0x1a>
    3e22:	48 c0       	rjmp	.+144    	; 0x3eb4 <action_for_key+0xaa>
    3e24:	8a 32       	cpi	r24, 0x2A	; 42
    3e26:	09 f4       	brne	.+2      	; 0x3e2a <action_for_key+0x20>
    3e28:	51 c0       	rjmp	.+162    	; 0x3ecc <action_for_key+0xc2>
            return keycode_to_action(keycode);
    3e2a:	0c 94 57 1e 	jmp	0x3cae	; 0x3cae <keycode_to_action>
    switch (keycode) {
    3e2e:	89 33       	cpi	r24, 0x39	; 57
    3e30:	29 f1       	breq	.+74     	; 0x3e7c <action_for_key+0x72>
    3e32:	82 38       	cpi	r24, 0x82	; 130
    3e34:	19 f1       	breq	.+70     	; 0x3e7c <action_for_key+0x72>
    3e36:	85 33       	cpi	r24, 0x35	; 53
    3e38:	c1 f7       	brne	.-16     	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    3e3a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3e3e:	85 ff       	sbrs	r24, 5
    3e40:	3d c0       	rjmp	.+122    	; 0x3ebc <action_for_key+0xb2>
                return keycode_to_action(KC_ESC);
    3e42:	89 e2       	ldi	r24, 0x29	; 41
    3e44:	f2 cf       	rjmp	.-28     	; 0x3e2a <action_for_key+0x20>
    switch (keycode) {
    3e46:	83 3e       	cpi	r24, 0xE3	; 227
    3e48:	39 f1       	breq	.+78     	; 0x3e98 <action_for_key+0x8e>
    3e4a:	60 f4       	brcc	.+24     	; 0x3e64 <action_for_key+0x5a>
    3e4c:	80 3e       	cpi	r24, 0xE0	; 224
    3e4e:	e1 f0       	breq	.+56     	; 0x3e88 <action_for_key+0x7e>
    3e50:	82 3e       	cpi	r24, 0xE2	; 226
    3e52:	59 f7       	brne	.-42     	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    3e54:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3e58:	82 ff       	sbrs	r24, 2
    3e5a:	22 c0       	rjmp	.+68     	; 0x3ea0 <action_for_key+0x96>
                if (keymap_config.no_gui) {
    3e5c:	84 ff       	sbrs	r24, 4
    3e5e:	1a c0       	rjmp	.+52     	; 0x3e94 <action_for_key+0x8a>
                    return keycode_to_action(KC_NO);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	e3 cf       	rjmp	.-58     	; 0x3e2a <action_for_key+0x20>
    switch (keycode) {
    3e64:	86 3e       	cpi	r24, 0xE6	; 230
    3e66:	f1 f0       	breq	.+60     	; 0x3ea4 <action_for_key+0x9a>
    3e68:	87 3e       	cpi	r24, 0xE7	; 231
    3e6a:	f9 f6       	brne	.-66     	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    3e6c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3e70:	83 ff       	sbrs	r24, 3
    3e72:	1c c0       	rjmp	.+56     	; 0x3eac <action_for_key+0xa2>
            return keycode_to_action(KC_RALT);
    3e74:	86 ee       	ldi	r24, 0xE6	; 230
    3e76:	d9 cf       	rjmp	.-78     	; 0x3e2a <action_for_key+0x20>
            return keymap_fn_to_action(keycode);
    3e78:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <keymap_fn_to_action>
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3e7c:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    3e80:	93 70       	andi	r25, 0x03	; 3
    3e82:	99 f2       	breq	.-90     	; 0x3e2a <action_for_key+0x20>
                return keycode_to_action(KC_LCTL);
    3e84:	80 ee       	ldi	r24, 0xE0	; 224
    3e86:	d1 cf       	rjmp	.-94     	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_control_capslock) {
    3e88:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3e8c:	80 ff       	sbrs	r24, 0
    3e8e:	fa cf       	rjmp	.-12     	; 0x3e84 <action_for_key+0x7a>
                return keycode_to_action(KC_CAPSLOCK);
    3e90:	89 e3       	ldi	r24, 0x39	; 57
    3e92:	cb cf       	rjmp	.-106    	; 0x3e2a <action_for_key+0x20>
                return keycode_to_action(KC_LGUI);
    3e94:	83 ee       	ldi	r24, 0xE3	; 227
    3e96:	c9 cf       	rjmp	.-110    	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    3e98:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3e9c:	82 ff       	sbrs	r24, 2
    3e9e:	de cf       	rjmp	.-68     	; 0x3e5c <action_for_key+0x52>
            return keycode_to_action(KC_LALT);
    3ea0:	82 ee       	ldi	r24, 0xE2	; 226
    3ea2:	c3 cf       	rjmp	.-122    	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    3ea4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3ea8:	83 ff       	sbrs	r24, 3
    3eaa:	e4 cf       	rjmp	.-56     	; 0x3e74 <action_for_key+0x6a>
            if (keymap_config.no_gui) {
    3eac:	84 fd       	sbrc	r24, 4
    3eae:	d8 cf       	rjmp	.-80     	; 0x3e60 <action_for_key+0x56>
                return keycode_to_action(KC_RGUI);
    3eb0:	87 ee       	ldi	r24, 0xE7	; 231
    3eb2:	bb cf       	rjmp	.-138    	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    3eb4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3eb8:	85 ff       	sbrs	r24, 5
    3eba:	c3 cf       	rjmp	.-122    	; 0x3e42 <action_for_key+0x38>
            return keycode_to_action(KC_GRAVE);
    3ebc:	85 e3       	ldi	r24, 0x35	; 53
    3ebe:	b5 cf       	rjmp	.-150    	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    3ec0:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3ec4:	86 ff       	sbrs	r24, 6
    3ec6:	06 c0       	rjmp	.+12     	; 0x3ed4 <action_for_key+0xca>
                return keycode_to_action(KC_BSPACE);
    3ec8:	8a e2       	ldi	r24, 0x2A	; 42
    3eca:	af cf       	rjmp	.-162    	; 0x3e2a <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    3ecc:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    3ed0:	86 ff       	sbrs	r24, 6
    3ed2:	fa cf       	rjmp	.-12     	; 0x3ec8 <action_for_key+0xbe>
            return keycode_to_action(KC_BSLASH);
    3ed4:	81 e3       	ldi	r24, 0x31	; 49
    3ed6:	a9 cf       	rjmp	.-174    	; 0x3e2a <action_for_key+0x20>

00003ed8 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3ed8:	8f 92       	push	r8
    3eda:	9f 92       	push	r9
    3edc:	af 92       	push	r10
    3ede:	bf 92       	push	r11
    3ee0:	ef 92       	push	r14
    3ee2:	ff 92       	push	r15
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	cf 93       	push	r28
    3eea:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3eec:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3eee:	8c 2f       	mov	r24, r28
    3ef0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <matrix_get_row>
    3ef4:	4b 01       	movw	r8, r22
    3ef6:	5c 01       	movw	r10, r24
    3ef8:	10 e0       	ldi	r17, 0x00	; 0
    3efa:	00 e0       	ldi	r16, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3efc:	d5 01       	movw	r26, r10
    3efe:	c4 01       	movw	r24, r8
    3f00:	00 2e       	mov	r0, r16
    3f02:	04 c0       	rjmp	.+8      	; 0x3f0c <scan_key+0x34>
    3f04:	b6 95       	lsr	r27
    3f06:	a7 95       	ror	r26
    3f08:	97 95       	ror	r25
    3f0a:	87 95       	ror	r24
    3f0c:	0a 94       	dec	r0
    3f0e:	d2 f7       	brpl	.-12     	; 0x3f04 <scan_key+0x2c>
    3f10:	80 ff       	sbrs	r24, 0
    3f12:	1d c0       	rjmp	.+58     	; 0x3f4e <scan_key+0x76>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3f14:	60 2f       	mov	r22, r16
    3f16:	7c 2f       	mov	r23, r28
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <action_for_key>
                if (action.code == code ||
    3f1e:	8e 15       	cp	r24, r14
    3f20:	9f 05       	cpc	r25, r15
    3f22:	51 f0       	breq	.+20     	; 0x3f38 <scan_key+0x60>
    3f24:	29 2f       	mov	r18, r25
    3f26:	20 7e       	andi	r18, 0xE0	; 224
    3f28:	39 2f       	mov	r19, r25
    3f2a:	30 7c       	andi	r19, 0xC0	; 192
    3f2c:	11 f0       	breq	.+4      	; 0x3f32 <scan_key+0x5a>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3f2e:	20 3a       	cpi	r18, 0xA0	; 160
    3f30:	71 f4       	brne	.+28     	; 0x3f4e <scan_key+0x76>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3f32:	8e 15       	cp	r24, r14
    3f34:	1f 04       	cpc	r1, r15
    3f36:	59 f4       	brne	.+22     	; 0x3f4e <scan_key+0x76>
                     action.key.code == code)) {
                    return true;
    3f38:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    3f3a:	cf 91       	pop	r28
    3f3c:	1f 91       	pop	r17
    3f3e:	0f 91       	pop	r16
    3f40:	ff 90       	pop	r15
    3f42:	ef 90       	pop	r14
    3f44:	bf 90       	pop	r11
    3f46:	af 90       	pop	r10
    3f48:	9f 90       	pop	r9
    3f4a:	8f 90       	pop	r8
    3f4c:	08 95       	ret
    3f4e:	0f 5f       	subi	r16, 0xFF	; 255
    3f50:	1f 4f       	sbci	r17, 0xFF	; 255
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3f52:	02 31       	cpi	r16, 0x12	; 18
    3f54:	11 05       	cpc	r17, r1
    3f56:	91 f6       	brne	.-92     	; 0x3efc <scan_key+0x24>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f58:	cf 5f       	subi	r28, 0xFF	; 255
    3f5a:	c6 30       	cpi	r28, 0x06	; 6
    3f5c:	41 f6       	brne	.-112    	; 0x3eee <scan_key+0x16>
    return false;
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	ec cf       	rjmp	.-40     	; 0x3f3a <scan_key+0x62>

00003f62 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3f62:	cf 93       	push	r28
    3f64:	df 93       	push	r29
    3f66:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3f68:	8c e2       	ldi	r24, 0x2C	; 44
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <scan_key>
    3f70:	88 23       	and	r24, r24
    3f72:	29 f0       	breq	.+10     	; 0x3f7e <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3f74:	ce 01       	movw	r24, r28
}
    3f76:	df 91       	pop	r29
    3f78:	cf 91       	pop	r28
    return scan_key(code);
    3f7a:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <scan_key>
}
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	df 91       	pop	r29
    3f82:	cf 91       	pop	r28
    3f84:	08 95       	ret

00003f86 <bootmagic>:
{
    3f86:	cf 93       	push	r28
    if (!eeconfig_is_enabled()) {
    3f88:	0e 94 05 21 	call	0x420a	; 0x420a <eeconfig_is_enabled>
    3f8c:	81 11       	cpse	r24, r1
    3f8e:	02 c0       	rjmp	.+4      	; 0x3f94 <bootmagic+0xe>
        eeconfig_init();
    3f90:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <eeconfig_init>
    print("bootmagic scan: ... ");
    3f94:	8e ec       	ldi	r24, 0xCE	; 206
    3f96:	93 e0       	ldi	r25, 0x03	; 3
    3f98:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    while (scan--) { matrix_scan(); wait_ms(10); }
    3f9c:	c5 e6       	ldi	r28, 0x65	; 101
    3f9e:	c1 50       	subi	r28, 0x01	; 1
    3fa0:	09 f0       	breq	.+2      	; 0x3fa4 <bootmagic+0x1e>
    3fa2:	e9 c0       	rjmp	.+466    	; 0x4176 <bootmagic+0x1f0>
    print("done.\n");
    3fa4:	87 ec       	ldi	r24, 0xC7	; 199
    3fa6:	93 e0       	ldi	r25, 0x03	; 3
    3fa8:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3fac:	89 e2       	ldi	r24, 0x29	; 41
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    3fb4:	81 11       	cpse	r24, r1
    3fb6:	0d c1       	rjmp	.+538    	; 0x41d2 <bootmagic+0x24c>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3fb8:	8a e2       	ldi	r24, 0x2A	; 42
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    3fc0:	81 11       	cpse	r24, r1
        eeconfig_init();
    3fc2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <eeconfig_init>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3fc6:	85 e0       	ldi	r24, 0x05	; 5
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    3fce:	81 11       	cpse	r24, r1
        bootloader_jump();
    3fd0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <bootloader_jump>
    hook_bootmagic();
    3fd4:	0e 94 57 1d 	call	0x3aae	; 0x3aae <hook_bootmagic>
    debug_config.raw = eeconfig_read_debug();
    3fd8:	0e 94 10 21 	call	0x4220	; 0x4220 <eeconfig_read_debug>
    3fdc:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3fe0:	87 e0       	ldi	r24, 0x07	; 7
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    3fe8:	88 23       	and	r24, r24
    3fea:	79 f0       	breq	.+30     	; 0x400a <bootmagic+0x84>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3fec:	8b e1       	ldi	r24, 0x1B	; 27
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    3ff4:	88 23       	and	r24, r24
    3ff6:	09 f4       	brne	.+2      	; 0x3ffa <bootmagic+0x74>
    3ff8:	c7 c0       	rjmp	.+398    	; 0x4188 <bootmagic+0x202>
            debug_config.matrix = !debug_config.matrix;
    3ffa:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <debug_config>
    3ffe:	89 2f       	mov	r24, r25
    4000:	8d 7f       	andi	r24, 0xFD	; 253
    4002:	91 ff       	sbrs	r25, 1
    4004:	82 60       	ori	r24, 0x02	; 2
            debug_config.enable = !debug_config.enable;
    4006:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <debug_config>
    eeconfig_write_debug(debug_config.raw);
    400a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    400e:	0e 94 14 21 	call	0x4228	; 0x4228 <eeconfig_write_debug>
    keymap_config.raw = eeconfig_read_keymap();
    4012:	0e 94 22 21 	call	0x4244	; 0x4244 <eeconfig_read_keymap>
    4016:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    401a:	80 ee       	ldi	r24, 0xE0	; 224
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4022:	88 23       	and	r24, r24
    4024:	41 f0       	breq	.+16     	; 0x4036 <bootmagic+0xb0>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4026:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    402a:	89 2f       	mov	r24, r25
    402c:	8e 7f       	andi	r24, 0xFE	; 254
    402e:	90 ff       	sbrs	r25, 0
    4030:	81 60       	ori	r24, 0x01	; 1
    4032:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4036:	89 e3       	ldi	r24, 0x39	; 57
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    403e:	88 23       	and	r24, r24
    4040:	41 f0       	breq	.+16     	; 0x4052 <bootmagic+0xcc>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4042:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    4046:	89 2f       	mov	r24, r25
    4048:	8d 7f       	andi	r24, 0xFD	; 253
    404a:	91 ff       	sbrs	r25, 1
    404c:	82 60       	ori	r24, 0x02	; 2
    404e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4052:	82 ee       	ldi	r24, 0xE2	; 226
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    405a:	88 23       	and	r24, r24
    405c:	41 f0       	breq	.+16     	; 0x406e <bootmagic+0xe8>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    405e:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    4062:	89 2f       	mov	r24, r25
    4064:	8b 7f       	andi	r24, 0xFB	; 251
    4066:	92 ff       	sbrs	r25, 2
    4068:	84 60       	ori	r24, 0x04	; 4
    406a:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    406e:	86 ee       	ldi	r24, 0xE6	; 230
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4076:	88 23       	and	r24, r24
    4078:	41 f0       	breq	.+16     	; 0x408a <bootmagic+0x104>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    407a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    407e:	89 2f       	mov	r24, r25
    4080:	87 7f       	andi	r24, 0xF7	; 247
    4082:	93 ff       	sbrs	r25, 3
    4084:	88 60       	ori	r24, 0x08	; 8
    4086:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    408a:	83 ee       	ldi	r24, 0xE3	; 227
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4092:	88 23       	and	r24, r24
    4094:	41 f0       	breq	.+16     	; 0x40a6 <bootmagic+0x120>
        keymap_config.no_gui = !keymap_config.no_gui;
    4096:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    409a:	89 2f       	mov	r24, r25
    409c:	8f 7e       	andi	r24, 0xEF	; 239
    409e:	94 ff       	sbrs	r25, 4
    40a0:	80 61       	ori	r24, 0x10	; 16
    40a2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    40a6:	85 e3       	ldi	r24, 0x35	; 53
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    40ae:	88 23       	and	r24, r24
    40b0:	41 f0       	breq	.+16     	; 0x40c2 <bootmagic+0x13c>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    40b2:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    40b6:	89 2f       	mov	r24, r25
    40b8:	8f 7d       	andi	r24, 0xDF	; 223
    40ba:	95 ff       	sbrs	r25, 5
    40bc:	80 62       	ori	r24, 0x20	; 32
    40be:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    40c2:	81 e3       	ldi	r24, 0x31	; 49
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    40ca:	88 23       	and	r24, r24
    40cc:	41 f0       	breq	.+16     	; 0x40de <bootmagic+0x158>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    40ce:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    40d2:	89 2f       	mov	r24, r25
    40d4:	8f 7b       	andi	r24, 0xBF	; 191
    40d6:	96 ff       	sbrs	r25, 6
    40d8:	80 64       	ori	r24, 0x40	; 64
    40da:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    40de:	81 e1       	ldi	r24, 0x11	; 17
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    40e6:	88 23       	and	r24, r24
    40e8:	41 f0       	breq	.+16     	; 0x40fa <bootmagic+0x174>
        keymap_config.nkro = !keymap_config.nkro;
    40ea:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <keymap_config>
    40ee:	89 2f       	mov	r24, r25
    40f0:	97 fb       	bst	r25, 7
    40f2:	87 f9       	bld	r24, 7
    40f4:	80 58       	subi	r24, 0x80	; 128
    40f6:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <keymap_config>
    eeconfig_write_keymap(keymap_config.raw);
    40fa:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <keymap_config>
    40fe:	0e 94 26 21 	call	0x424c	; 0x424c <eeconfig_write_keymap>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4102:	87 e2       	ldi	r24, 0x27	; 39
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    410a:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    410c:	8e e1       	ldi	r24, 0x1E	; 30
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4114:	81 11       	cpse	r24, r1
    4116:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4118:	8f e1       	ldi	r24, 0x1F	; 31
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4120:	81 11       	cpse	r24, r1
    4122:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4124:	80 e2       	ldi	r24, 0x20	; 32
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    412c:	81 11       	cpse	r24, r1
    412e:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4130:	81 e2       	ldi	r24, 0x21	; 33
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4138:	81 11       	cpse	r24, r1
    413a:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    413c:	82 e2       	ldi	r24, 0x22	; 34
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4144:	81 11       	cpse	r24, r1
    4146:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4148:	83 e2       	ldi	r24, 0x23	; 35
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4150:	81 11       	cpse	r24, r1
    4152:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4154:	84 e2       	ldi	r24, 0x24	; 36
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    415c:	88 23       	and	r24, r24
    415e:	99 f1       	breq	.+102    	; 0x41c6 <bootmagic+0x240>
    4160:	c0 68       	ori	r28, 0x80	; 128
        eeconfig_write_default_layer(default_layer);
    4162:	8c 2f       	mov	r24, r28
    4164:	0e 94 1d 21 	call	0x423a	; 0x423a <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4168:	6c 2f       	mov	r22, r28
        default_layer_set((uint32_t)default_layer);
    416a:	70 e0       	ldi	r23, 0x00	; 0
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	80 e0       	ldi	r24, 0x00	; 0
}
    4170:	cf 91       	pop	r28
        default_layer_set((uint32_t)default_layer);
    4172:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <default_layer_set>
    while (scan--) { matrix_scan(); wait_ms(10); }
    4176:	0e 94 c4 06 	call	0xd88	; 0xd88 <matrix_scan>
    417a:	8f e3       	ldi	r24, 0x3F	; 63
    417c:	9c e9       	ldi	r25, 0x9C	; 156
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	f1 f7       	brne	.-4      	; 0x417e <bootmagic+0x1f8>
    4182:	00 c0       	rjmp	.+0      	; 0x4184 <bootmagic+0x1fe>
    4184:	00 00       	nop
    4186:	0b cf       	rjmp	.-490    	; 0x3f9e <bootmagic+0x18>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4188:	8e e0       	ldi	r24, 0x0E	; 14
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    4190:	88 23       	and	r24, r24
    4192:	39 f0       	breq	.+14     	; 0x41a2 <bootmagic+0x21c>
            debug_config.keyboard = !debug_config.keyboard;
    4194:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <debug_config>
    4198:	89 2f       	mov	r24, r25
    419a:	8b 7f       	andi	r24, 0xFB	; 251
    419c:	92 ff       	sbrs	r25, 2
    419e:	84 60       	ori	r24, 0x04	; 4
    41a0:	32 cf       	rjmp	.-412    	; 0x4006 <bootmagic+0x80>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    41a2:	80 e1       	ldi	r24, 0x10	; 16
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <bootmagic_scan_key>
    41aa:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <debug_config>
    41ae:	88 23       	and	r24, r24
    41b0:	29 f0       	breq	.+10     	; 0x41bc <bootmagic+0x236>
            debug_config.mouse = !debug_config.mouse;
    41b2:	89 2f       	mov	r24, r25
    41b4:	87 7f       	andi	r24, 0xF7	; 247
    41b6:	93 ff       	sbrs	r25, 3
    41b8:	88 60       	ori	r24, 0x08	; 8
    41ba:	25 cf       	rjmp	.-438    	; 0x4006 <bootmagic+0x80>
            debug_config.enable = !debug_config.enable;
    41bc:	89 2f       	mov	r24, r25
    41be:	8e 7f       	andi	r24, 0xFE	; 254
    41c0:	90 ff       	sbrs	r25, 0
    41c2:	81 60       	ori	r24, 0x01	; 1
    41c4:	20 cf       	rjmp	.-448    	; 0x4006 <bootmagic+0x80>
    if (default_layer) {
    41c6:	c1 11       	cpse	r28, r1
    41c8:	cc cf       	rjmp	.-104    	; 0x4162 <bootmagic+0x1dc>
        default_layer = eeconfig_read_default_layer();
    41ca:	0e 94 19 21 	call	0x4232	; 0x4232 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    41ce:	68 2f       	mov	r22, r24
    41d0:	cc cf       	rjmp	.-104    	; 0x416a <bootmagic+0x1e4>
}
    41d2:	cf 91       	pop	r28
    41d4:	08 95       	ret

000041d6 <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    41d6:	6d ee       	ldi	r22, 0xED	; 237
    41d8:	7e ef       	ldi	r23, 0xFE	; 254
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	0e 94 34 2a 	call	0x5468	; 0x5468 <eeprom_write_word>
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	82 e0       	ldi	r24, 0x02	; 2
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	0e 94 26 2a 	call	0x544c	; 0x544c <eeprom_write_byte>
    41ec:	60 e0       	ldi	r22, 0x00	; 0
    41ee:	83 e0       	ldi	r24, 0x03	; 3
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	0e 94 26 2a 	call	0x544c	; 0x544c <eeprom_write_byte>
    41f6:	60 e0       	ldi	r22, 0x00	; 0
    41f8:	84 e0       	ldi	r24, 0x04	; 4
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	0e 94 26 2a 	call	0x544c	; 0x544c <eeprom_write_byte>
    4200:	60 e0       	ldi	r22, 0x00	; 0
    4202:	85 e0       	ldi	r24, 0x05	; 5
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	0c 94 26 2a 	jmp	0x544c	; 0x544c <eeprom_write_byte>

0000420a <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	0e 94 20 2a 	call	0x5440	; 0x5440 <eeprom_read_word>
    4212:	21 e0       	ldi	r18, 0x01	; 1
    4214:	8d 3e       	cpi	r24, 0xED	; 237
    4216:	9e 4f       	sbci	r25, 0xFE	; 254
    4218:	09 f0       	breq	.+2      	; 0x421c <eeconfig_is_enabled+0x12>
    421a:	20 e0       	ldi	r18, 0x00	; 0
}
    421c:	82 2f       	mov	r24, r18
    421e:	08 95       	ret

00004220 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4220:	82 e0       	ldi	r24, 0x02	; 2
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0c 94 18 2a 	jmp	0x5430	; 0x5430 <eeprom_read_byte>

00004228 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4228:	68 2f       	mov	r22, r24
    422a:	82 e0       	ldi	r24, 0x02	; 2
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	0c 94 26 2a 	jmp	0x544c	; 0x544c <eeprom_write_byte>

00004232 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4232:	83 e0       	ldi	r24, 0x03	; 3
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	0c 94 18 2a 	jmp	0x5430	; 0x5430 <eeprom_read_byte>

0000423a <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    423a:	68 2f       	mov	r22, r24
    423c:	83 e0       	ldi	r24, 0x03	; 3
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0c 94 26 2a 	jmp	0x544c	; 0x544c <eeprom_write_byte>

00004244 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4244:	84 e0       	ldi	r24, 0x04	; 4
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	0c 94 18 2a 	jmp	0x5430	; 0x5430 <eeprom_read_byte>

0000424c <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    424c:	68 2f       	mov	r22, r24
    424e:	84 e0       	ldi	r24, 0x04	; 4
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	0c 94 26 2a 	jmp	0x544c	; 0x544c <eeprom_write_byte>

00004256 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4256:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    425a:	80 ff       	sbrs	r24, 0
    425c:	12 c0       	rjmp	.+36     	; 0x4282 <move_unit+0x2c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    425e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_max_speed>
    4262:	85 e0       	ldi	r24, 0x05	; 5
    4264:	68 9f       	mul	r22, r24
    4266:	b0 01       	movw	r22, r0
    4268:	11 24       	eor	r1, r1
    426a:	75 95       	asr	r23
    426c:	67 95       	ror	r22
    426e:	75 95       	asr	r23
    4270:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4272:	60 38       	cpi	r22, 0x80	; 128
    4274:	71 05       	cpc	r23, r1
    4276:	a8 f5       	brcc	.+106    	; 0x42e2 <move_unit+0x8c>
    4278:	61 15       	cp	r22, r1
    427a:	71 05       	cpc	r23, r1
    427c:	a1 f1       	breq	.+104    	; 0x42e6 <move_unit+0x90>
    427e:	86 2f       	mov	r24, r22
    4280:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4282:	81 ff       	sbrs	r24, 1
    4284:	09 c0       	rjmp	.+18     	; 0x4298 <move_unit+0x42>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4286:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_max_speed>
    428a:	85 e0       	ldi	r24, 0x05	; 5
    428c:	68 9f       	mul	r22, r24
    428e:	b0 01       	movw	r22, r0
    4290:	11 24       	eor	r1, r1
    4292:	75 95       	asr	r23
    4294:	67 95       	ror	r22
    4296:	ed cf       	rjmp	.-38     	; 0x4272 <move_unit+0x1c>
    } else if (mousekey_accel & (1<<2)) {
    4298:	82 ff       	sbrs	r24, 2
    429a:	07 c0       	rjmp	.+14     	; 0x42aa <move_unit+0x54>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    429c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_max_speed>
    42a0:	85 e0       	ldi	r24, 0x05	; 5
    42a2:	68 9f       	mul	r22, r24
    42a4:	b0 01       	movw	r22, r0
    42a6:	11 24       	eor	r1, r1
    42a8:	e4 cf       	rjmp	.-56     	; 0x4272 <move_unit+0x1c>
    } else if (mousekey_repeat == 0) {
    42aa:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <mousekey_repeat>
    42ae:	22 23       	and	r18, r18
    42b0:	a9 f0       	breq	.+42     	; 0x42dc <move_unit+0x86>
    } else if (mousekey_repeat >= mk_time_to_max) {
    42b2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mk_time_to_max>
    42b6:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_max_speed>
    42ba:	85 e0       	ldi	r24, 0x05	; 5
    42bc:	68 9f       	mul	r22, r24
    42be:	b0 01       	movw	r22, r0
    42c0:	11 24       	eor	r1, r1
    42c2:	29 17       	cp	r18, r25
    42c4:	b0 f6       	brcc	.-84     	; 0x4272 <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    42c6:	26 9f       	mul	r18, r22
    42c8:	a0 01       	movw	r20, r0
    42ca:	27 9f       	mul	r18, r23
    42cc:	50 0d       	add	r21, r0
    42ce:	11 24       	eor	r1, r1
    42d0:	69 2f       	mov	r22, r25
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	ca 01       	movw	r24, r20
    42d6:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <__divmodhi4>
    42da:	cb cf       	rjmp	.-106    	; 0x4272 <move_unit+0x1c>
        unit = MOUSEKEY_MOVE_DELTA;
    42dc:	65 e0       	ldi	r22, 0x05	; 5
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	ce cf       	rjmp	.-100    	; 0x427e <move_unit+0x28>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    42e2:	8f e7       	ldi	r24, 0x7F	; 127
    42e4:	08 95       	ret
    42e6:	81 e0       	ldi	r24, 0x01	; 1
}
    42e8:	08 95       	ret

000042ea <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    42ea:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    42ee:	80 ff       	sbrs	r24, 0
    42f0:	0c c0       	rjmp	.+24     	; 0x430a <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    42f2:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_max_speed>
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	75 95       	asr	r23
    42fa:	67 95       	ror	r22
    42fc:	75 95       	asr	r23
    42fe:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4300:	61 15       	cp	r22, r1
    4302:	71 05       	cpc	r23, r1
    4304:	49 f1       	breq	.+82     	; 0x4358 <wheel_unit+0x6e>
    4306:	86 2f       	mov	r24, r22
    4308:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    430a:	81 ff       	sbrs	r24, 1
    430c:	06 c0       	rjmp	.+12     	; 0x431a <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    430e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_max_speed>
    4312:	70 e0       	ldi	r23, 0x00	; 0
    4314:	75 95       	asr	r23
    4316:	67 95       	ror	r22
    4318:	f3 cf       	rjmp	.-26     	; 0x4300 <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    431a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    431e:	82 fd       	sbrc	r24, 2
    4320:	0b c0       	rjmp	.+22     	; 0x4338 <wheel_unit+0x4e>
    } else if (mousekey_repeat == 0) {
    4322:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <mousekey_repeat>
    4326:	99 23       	and	r25, r25
    4328:	a1 f0       	breq	.+40     	; 0x4352 <wheel_unit+0x68>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    432a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    432e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    4332:	96 17       	cp	r25, r22
    4334:	38 f0       	brcs	.+14     	; 0x4344 <wheel_unit+0x5a>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    4336:	68 2f       	mov	r22, r24
    4338:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    433a:	60 38       	cpi	r22, 0x80	; 128
    433c:	71 05       	cpc	r23, r1
    433e:	00 f3       	brcs	.-64     	; 0x4300 <wheel_unit+0x16>
    4340:	8f e7       	ldi	r24, 0x7F	; 127
    4342:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4344:	89 9f       	mul	r24, r25
    4346:	c0 01       	movw	r24, r0
    4348:	11 24       	eor	r1, r1
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <__divmodhi4>
    4350:	f4 cf       	rjmp	.-24     	; 0x433a <wheel_unit+0x50>
        unit = MOUSEKEY_WHEEL_DELTA;
    4352:	61 e0       	ldi	r22, 0x01	; 1
    4354:	70 e0       	ldi	r23, 0x00	; 0
    4356:	d7 cf       	rjmp	.-82     	; 0x4306 <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4358:	81 e0       	ldi	r24, 0x01	; 1
}
    435a:	08 95       	ret

0000435c <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    435c:	80 3f       	cpi	r24, 0xF0	; 240
    435e:	31 f4       	brne	.+12     	; 0x436c <mousekey_on+0x10>
    4360:	0e 94 2b 21 	call	0x4256	; 0x4256 <move_unit>
    4364:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4366:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <mouse_report+0x2>
    436a:	08 95       	ret
    436c:	81 3f       	cpi	r24, 0xF1	; 241
    436e:	19 f4       	brne	.+6      	; 0x4376 <mousekey_on+0x1a>
    4370:	0e 94 2b 21 	call	0x4256	; 0x4256 <move_unit>
    4374:	f8 cf       	rjmp	.-16     	; 0x4366 <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4376:	82 3f       	cpi	r24, 0xF2	; 242
    4378:	31 f4       	brne	.+12     	; 0x4386 <mousekey_on+0x2a>
    437a:	0e 94 2b 21 	call	0x4256	; 0x4256 <move_unit>
    437e:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4380:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <mouse_report+0x1>
    4384:	08 95       	ret
    4386:	83 3f       	cpi	r24, 0xF3	; 243
    4388:	19 f4       	brne	.+6      	; 0x4390 <mousekey_on+0x34>
    438a:	0e 94 2b 21 	call	0x4256	; 0x4256 <move_unit>
    438e:	f8 cf       	rjmp	.-16     	; 0x4380 <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4390:	89 3f       	cpi	r24, 0xF9	; 249
    4392:	29 f4       	brne	.+10     	; 0x439e <mousekey_on+0x42>
    4394:	0e 94 75 21 	call	0x42ea	; 0x42ea <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4398:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mouse_report+0x3>
    439c:	08 95       	ret
    439e:	8a 3f       	cpi	r24, 0xFA	; 250
    43a0:	21 f4       	brne	.+8      	; 0x43aa <mousekey_on+0x4e>
    43a2:	0e 94 75 21 	call	0x42ea	; 0x42ea <wheel_unit>
    43a6:	81 95       	neg	r24
    43a8:	f7 cf       	rjmp	.-18     	; 0x4398 <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    43aa:	8b 3f       	cpi	r24, 0xFB	; 251
    43ac:	31 f4       	brne	.+12     	; 0x43ba <mousekey_on+0x5e>
    43ae:	0e 94 75 21 	call	0x42ea	; 0x42ea <wheel_unit>
    43b2:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    43b4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <mouse_report+0x4>
    43b8:	08 95       	ret
    43ba:	8c 3f       	cpi	r24, 0xFC	; 252
    43bc:	19 f4       	brne	.+6      	; 0x43c4 <mousekey_on+0x68>
    43be:	0e 94 75 21 	call	0x42ea	; 0x42ea <wheel_unit>
    43c2:	f8 cf       	rjmp	.-16     	; 0x43b4 <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    43c4:	84 3f       	cpi	r24, 0xF4	; 244
    43c6:	31 f4       	brne	.+12     	; 0x43d4 <mousekey_on+0x78>
    43c8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    43cc:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    43ce:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <mouse_report>
    43d2:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    43d4:	85 3f       	cpi	r24, 0xF5	; 245
    43d6:	21 f4       	brne	.+8      	; 0x43e0 <mousekey_on+0x84>
    43d8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    43dc:	82 60       	ori	r24, 0x02	; 2
    43de:	f7 cf       	rjmp	.-18     	; 0x43ce <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    43e0:	86 3f       	cpi	r24, 0xF6	; 246
    43e2:	21 f4       	brne	.+8      	; 0x43ec <mousekey_on+0x90>
    43e4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    43e8:	84 60       	ori	r24, 0x04	; 4
    43ea:	f1 cf       	rjmp	.-30     	; 0x43ce <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    43ec:	87 3f       	cpi	r24, 0xF7	; 247
    43ee:	21 f4       	brne	.+8      	; 0x43f8 <mousekey_on+0x9c>
    43f0:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    43f4:	88 60       	ori	r24, 0x08	; 8
    43f6:	eb cf       	rjmp	.-42     	; 0x43ce <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    43f8:	88 3f       	cpi	r24, 0xF8	; 248
    43fa:	21 f4       	brne	.+8      	; 0x4404 <mousekey_on+0xa8>
    43fc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    4400:	80 61       	ori	r24, 0x10	; 16
    4402:	e5 cf       	rjmp	.-54     	; 0x43ce <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4404:	8d 3f       	cpi	r24, 0xFD	; 253
    4406:	31 f4       	brne	.+12     	; 0x4414 <mousekey_on+0xb8>
    4408:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    440c:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    440e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <mousekey_accel>
}
    4412:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4414:	8e 3f       	cpi	r24, 0xFE	; 254
    4416:	21 f4       	brne	.+8      	; 0x4420 <mousekey_on+0xc4>
    4418:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    441c:	82 60       	ori	r24, 0x02	; 2
    441e:	f7 cf       	rjmp	.-18     	; 0x440e <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4420:	8f 3f       	cpi	r24, 0xFF	; 255
    4422:	b9 f7       	brne	.-18     	; 0x4412 <mousekey_on+0xb6>
    4424:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    4428:	84 60       	ori	r24, 0x04	; 4
    442a:	f1 cf       	rjmp	.-30     	; 0x440e <mousekey_on+0xb2>

0000442c <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    442c:	80 3f       	cpi	r24, 0xF0	; 240
    442e:	c1 f4       	brne	.+48     	; 0x4460 <mousekey_off+0x34>
    4430:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <mouse_report+0x2>
    4434:	87 fd       	sbrc	r24, 7
    4436:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    443a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <mouse_report+0x1>
    443e:	81 11       	cpse	r24, r1
    4440:	0e c0       	rjmp	.+28     	; 0x445e <mousekey_off+0x32>
    4442:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <mouse_report+0x2>
    4446:	81 11       	cpse	r24, r1
    4448:	0a c0       	rjmp	.+20     	; 0x445e <mousekey_off+0x32>
    444a:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <mouse_report+0x3>
    444e:	81 11       	cpse	r24, r1
    4450:	06 c0       	rjmp	.+12     	; 0x445e <mousekey_off+0x32>
    4452:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <mouse_report+0x4>
    4456:	81 11       	cpse	r24, r1
    4458:	02 c0       	rjmp	.+4      	; 0x445e <mousekey_off+0x32>
        mousekey_repeat = 0;
    445a:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <mousekey_repeat>
}
    445e:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4460:	81 3f       	cpi	r24, 0xF1	; 241
    4462:	29 f4       	brne	.+10     	; 0x446e <mousekey_off+0x42>
    4464:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <mouse_report+0x2>
    4468:	18 16       	cp	r1, r24
    446a:	2c f3       	brlt	.-54     	; 0x4436 <mousekey_off+0xa>
    446c:	e6 cf       	rjmp	.-52     	; 0x443a <mousekey_off+0xe>
    446e:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <mouse_report+0x1>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4472:	82 3f       	cpi	r24, 0xF2	; 242
    4474:	29 f4       	brne	.+10     	; 0x4480 <mousekey_off+0x54>
    4476:	97 ff       	sbrs	r25, 7
    4478:	e0 cf       	rjmp	.-64     	; 0x443a <mousekey_off+0xe>
    447a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <mouse_report+0x1>
    447e:	dd cf       	rjmp	.-70     	; 0x443a <mousekey_off+0xe>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4480:	83 3f       	cpi	r24, 0xF3	; 243
    4482:	19 f4       	brne	.+6      	; 0x448a <mousekey_off+0x5e>
    4484:	19 16       	cp	r1, r25
    4486:	cc f3       	brlt	.-14     	; 0x447a <mousekey_off+0x4e>
    4488:	d8 cf       	rjmp	.-80     	; 0x443a <mousekey_off+0xe>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    448a:	89 3f       	cpi	r24, 0xF9	; 249
    448c:	39 f4       	brne	.+14     	; 0x449c <mousekey_off+0x70>
    448e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <mouse_report+0x3>
    4492:	18 16       	cp	r1, r24
    4494:	94 f6       	brge	.-92     	; 0x443a <mousekey_off+0xe>
    4496:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <mouse_report+0x3>
    449a:	cf cf       	rjmp	.-98     	; 0x443a <mousekey_off+0xe>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    449c:	8a 3f       	cpi	r24, 0xFA	; 250
    449e:	29 f4       	brne	.+10     	; 0x44aa <mousekey_off+0x7e>
    44a0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <mouse_report+0x3>
    44a4:	87 ff       	sbrs	r24, 7
    44a6:	c9 cf       	rjmp	.-110    	; 0x443a <mousekey_off+0xe>
    44a8:	f6 cf       	rjmp	.-20     	; 0x4496 <mousekey_off+0x6a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    44aa:	8b 3f       	cpi	r24, 0xFB	; 251
    44ac:	39 f4       	brne	.+14     	; 0x44bc <mousekey_off+0x90>
    44ae:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <mouse_report+0x4>
    44b2:	87 ff       	sbrs	r24, 7
    44b4:	c2 cf       	rjmp	.-124    	; 0x443a <mousekey_off+0xe>
    44b6:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <mouse_report+0x4>
    44ba:	bf cf       	rjmp	.-130    	; 0x443a <mousekey_off+0xe>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    44bc:	8c 3f       	cpi	r24, 0xFC	; 252
    44be:	29 f4       	brne	.+10     	; 0x44ca <mousekey_off+0x9e>
    44c0:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <mouse_report+0x4>
    44c4:	18 16       	cp	r1, r24
    44c6:	bc f3       	brlt	.-18     	; 0x44b6 <mousekey_off+0x8a>
    44c8:	b8 cf       	rjmp	.-144    	; 0x443a <mousekey_off+0xe>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    44ca:	84 3f       	cpi	r24, 0xF4	; 244
    44cc:	31 f4       	brne	.+12     	; 0x44da <mousekey_off+0xae>
    44ce:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    44d2:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    44d4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <mouse_report>
    44d8:	b0 cf       	rjmp	.-160    	; 0x443a <mousekey_off+0xe>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    44da:	85 3f       	cpi	r24, 0xF5	; 245
    44dc:	21 f4       	brne	.+8      	; 0x44e6 <mousekey_off+0xba>
    44de:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    44e2:	8d 7f       	andi	r24, 0xFD	; 253
    44e4:	f7 cf       	rjmp	.-18     	; 0x44d4 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    44e6:	86 3f       	cpi	r24, 0xF6	; 246
    44e8:	21 f4       	brne	.+8      	; 0x44f2 <mousekey_off+0xc6>
    44ea:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    44ee:	8b 7f       	andi	r24, 0xFB	; 251
    44f0:	f1 cf       	rjmp	.-30     	; 0x44d4 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    44f2:	87 3f       	cpi	r24, 0xF7	; 247
    44f4:	21 f4       	brne	.+8      	; 0x44fe <mousekey_off+0xd2>
    44f6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    44fa:	87 7f       	andi	r24, 0xF7	; 247
    44fc:	eb cf       	rjmp	.-42     	; 0x44d4 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    44fe:	88 3f       	cpi	r24, 0xF8	; 248
    4500:	21 f4       	brne	.+8      	; 0x450a <mousekey_off+0xde>
    4502:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    4506:	8f 7e       	andi	r24, 0xEF	; 239
    4508:	e5 cf       	rjmp	.-54     	; 0x44d4 <mousekey_off+0xa8>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    450a:	8d 3f       	cpi	r24, 0xFD	; 253
    450c:	31 f4       	brne	.+12     	; 0x451a <mousekey_off+0xee>
    450e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    4512:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4514:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <mousekey_accel>
    4518:	90 cf       	rjmp	.-224    	; 0x443a <mousekey_off+0xe>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    451a:	8e 3f       	cpi	r24, 0xFE	; 254
    451c:	21 f4       	brne	.+8      	; 0x4526 <mousekey_off+0xfa>
    451e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    4522:	8d 7f       	andi	r24, 0xFD	; 253
    4524:	f7 cf       	rjmp	.-18     	; 0x4514 <mousekey_off+0xe8>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4526:	8f 3f       	cpi	r24, 0xFF	; 255
    4528:	09 f0       	breq	.+2      	; 0x452c <mousekey_off+0x100>
    452a:	87 cf       	rjmp	.-242    	; 0x443a <mousekey_off+0xe>
    452c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    4530:	8b 7f       	andi	r24, 0xFB	; 251
    4532:	f0 cf       	rjmp	.-32     	; 0x4514 <mousekey_off+0xe8>

00004534 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4534:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    4538:	83 ff       	sbrs	r24, 3
    453a:	7e c0       	rjmp	.+252    	; 0x4638 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    453c:	8a e0       	ldi	r24, 0x0A	; 10
    453e:	94 e0       	ldi	r25, 0x04	; 4
    4540:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    phex(mouse_report.buttons); print("|");
    4544:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <mouse_report>
    4548:	1f 92       	push	r1
    454a:	8f 93       	push	r24
    454c:	85 e0       	ldi	r24, 0x05	; 5
    454e:	94 e0       	ldi	r25, 0x04	; 4
    4550:	9f 93       	push	r25
    4552:	8f 93       	push	r24
    4554:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4558:	83 e0       	ldi	r24, 0x03	; 3
    455a:	94 e0       	ldi	r25, 0x04	; 4
    455c:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print_decs(mouse_report.x); print(" ");
    4560:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <mouse_report+0x1>
    4564:	28 2f       	mov	r18, r24
    4566:	08 2e       	mov	r0, r24
    4568:	00 0c       	add	r0, r0
    456a:	33 0b       	sbc	r19, r19
    456c:	3f 93       	push	r19
    456e:	8f 93       	push	r24
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	94 e0       	ldi	r25, 0x04	; 4
    4574:	9f 93       	push	r25
    4576:	8f 93       	push	r24
    4578:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    457c:	8e ef       	ldi	r24, 0xFE	; 254
    457e:	93 e0       	ldi	r25, 0x03	; 3
    4580:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print_decs(mouse_report.y); print(" ");
    4584:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <mouse_report+0x2>
    4588:	28 2f       	mov	r18, r24
    458a:	08 2e       	mov	r0, r24
    458c:	00 0c       	add	r0, r0
    458e:	33 0b       	sbc	r19, r19
    4590:	3f 93       	push	r19
    4592:	8f 93       	push	r24
    4594:	8b ef       	ldi	r24, 0xFB	; 251
    4596:	93 e0       	ldi	r25, 0x03	; 3
    4598:	9f 93       	push	r25
    459a:	8f 93       	push	r24
    459c:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    45a0:	89 ef       	ldi	r24, 0xF9	; 249
    45a2:	93 e0       	ldi	r25, 0x03	; 3
    45a4:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print_decs(mouse_report.v); print(" ");
    45a8:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <mouse_report+0x3>
    45ac:	28 2f       	mov	r18, r24
    45ae:	08 2e       	mov	r0, r24
    45b0:	00 0c       	add	r0, r0
    45b2:	33 0b       	sbc	r19, r19
    45b4:	3f 93       	push	r19
    45b6:	8f 93       	push	r24
    45b8:	86 ef       	ldi	r24, 0xF6	; 246
    45ba:	93 e0       	ldi	r25, 0x03	; 3
    45bc:	9f 93       	push	r25
    45be:	8f 93       	push	r24
    45c0:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    45c4:	84 ef       	ldi	r24, 0xF4	; 244
    45c6:	93 e0       	ldi	r25, 0x03	; 3
    45c8:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print_decs(mouse_report.h); print("](");
    45cc:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <mouse_report+0x4>
    45d0:	28 2f       	mov	r18, r24
    45d2:	08 2e       	mov	r0, r24
    45d4:	00 0c       	add	r0, r0
    45d6:	33 0b       	sbc	r19, r19
    45d8:	3f 93       	push	r19
    45da:	8f 93       	push	r24
    45dc:	81 ef       	ldi	r24, 0xF1	; 241
    45de:	93 e0       	ldi	r25, 0x03	; 3
    45e0:	9f 93       	push	r25
    45e2:	8f 93       	push	r24
    45e4:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    45e8:	8e ee       	ldi	r24, 0xEE	; 238
    45ea:	93 e0       	ldi	r25, 0x03	; 3
    45ec:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print_dec(mousekey_repeat); print("/");
    45f0:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <mousekey_repeat>
    45f4:	1f 92       	push	r1
    45f6:	8f 93       	push	r24
    45f8:	8b ee       	ldi	r24, 0xEB	; 235
    45fa:	93 e0       	ldi	r25, 0x03	; 3
    45fc:	9f 93       	push	r25
    45fe:	8f 93       	push	r24
    4600:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4604:	89 ee       	ldi	r24, 0xE9	; 233
    4606:	93 e0       	ldi	r25, 0x03	; 3
    4608:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print_dec(mousekey_accel); print(")\n");
    460c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <mousekey_accel>
    4610:	1f 92       	push	r1
    4612:	8f 93       	push	r24
    4614:	86 ee       	ldi	r24, 0xE6	; 230
    4616:	93 e0       	ldi	r25, 0x03	; 3
    4618:	9f 93       	push	r25
    461a:	8f 93       	push	r24
    461c:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4620:	83 ee       	ldi	r24, 0xE3	; 227
    4622:	93 e0       	ldi	r25, 0x03	; 3
    4624:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4628:	8d b7       	in	r24, 0x3d	; 61
    462a:	9e b7       	in	r25, 0x3e	; 62
    462c:	4c 96       	adiw	r24, 0x1c	; 28
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	f8 94       	cli
    4632:	9e bf       	out	0x3e, r25	; 62
    4634:	0f be       	out	0x3f, r0	; 63
    4636:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    4638:	84 e5       	ldi	r24, 0x54	; 84
    463a:	92 e0       	ldi	r25, 0x02	; 2
    463c:	0e 94 43 10 	call	0x2086	; 0x2086 <host_mouse_send>
    last_timer = timer_read();
    4640:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <timer_read>
    4644:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <last_timer+0x1>
    4648:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <last_timer>
}
    464c:	08 95       	ret

0000464e <mousekey_task>:
{
    464e:	1f 93       	push	r17
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4654:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <last_timer>
    4658:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <last_timer+0x1>
    465c:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <timer_elapsed>
    4660:	ac 01       	movw	r20, r24
    4662:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <mousekey_repeat>
    4666:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <mk_interval>
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	91 11       	cpse	r25, r1
    466e:	06 c0       	rjmp	.+12     	; 0x467c <mousekey_task+0x2e>
    4670:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mk_delay>
    4674:	8a e0       	ldi	r24, 0x0A	; 10
    4676:	28 9f       	mul	r18, r24
    4678:	90 01       	movw	r18, r0
    467a:	11 24       	eor	r1, r1
    467c:	42 17       	cp	r20, r18
    467e:	53 07       	cpc	r21, r19
    4680:	80 f0       	brcs	.+32     	; 0x46a2 <mousekey_task+0x54>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4682:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <mouse_report+0x1>
    4686:	c0 91 56 02 	lds	r28, 0x0256	; 0x800256 <mouse_report+0x2>
    468a:	10 91 57 02 	lds	r17, 0x0257	; 0x800257 <mouse_report+0x3>
    468e:	d0 91 58 02 	lds	r29, 0x0258	; 0x800258 <mouse_report+0x4>
    4692:	81 11       	cpse	r24, r1
    4694:	0a c0       	rjmp	.+20     	; 0x46aa <mousekey_task+0x5c>
    4696:	c1 11       	cpse	r28, r1
    4698:	78 c0       	rjmp	.+240    	; 0x478a <mousekey_task+0x13c>
    469a:	11 11       	cpse	r17, r1
    469c:	76 c0       	rjmp	.+236    	; 0x478a <mousekey_task+0x13c>
    469e:	d1 11       	cpse	r29, r1
    46a0:	74 c0       	rjmp	.+232    	; 0x478a <mousekey_task+0x13c>
}
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	1f 91       	pop	r17
    46a8:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    46aa:	9f 3f       	cpi	r25, 0xFF	; 255
    46ac:	19 f0       	breq	.+6      	; 0x46b4 <mousekey_task+0x66>
        mousekey_repeat++;
    46ae:	9f 5f       	subi	r25, 0xFF	; 255
    46b0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    46b4:	18 16       	cp	r1, r24
    46b6:	24 f4       	brge	.+8      	; 0x46c0 <mousekey_task+0x72>
    46b8:	0e 94 2b 21 	call	0x4256	; 0x4256 <move_unit>
    46bc:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    46c0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <mouse_report+0x1>
    46c4:	87 ff       	sbrs	r24, 7
    46c6:	05 c0       	rjmp	.+10     	; 0x46d2 <mousekey_task+0x84>
    46c8:	0e 94 2b 21 	call	0x4256	; 0x4256 <move_unit>
    46cc:	81 95       	neg	r24
    46ce:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    46d2:	1c 16       	cp	r1, r28
    46d4:	24 f4       	brge	.+8      	; 0x46de <mousekey_task+0x90>
    46d6:	0e 94 2b 21 	call	0x4256	; 0x4256 <move_unit>
    46da:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    46de:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <mouse_report+0x2>
    46e2:	87 ff       	sbrs	r24, 7
    46e4:	05 c0       	rjmp	.+10     	; 0x46f0 <mousekey_task+0xa2>
    46e6:	0e 94 2b 21 	call	0x4256	; 0x4256 <move_unit>
    46ea:	81 95       	neg	r24
    46ec:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    46f0:	60 91 55 02 	lds	r22, 0x0255	; 0x800255 <mouse_report+0x1>
    46f4:	66 23       	and	r22, r22
    46f6:	31 f1       	breq	.+76     	; 0x4744 <mousekey_task+0xf6>
    46f8:	c0 91 56 02 	lds	r28, 0x0256	; 0x800256 <mouse_report+0x2>
    46fc:	cc 23       	and	r28, r28
    46fe:	11 f1       	breq	.+68     	; 0x4744 <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    4700:	06 2e       	mov	r0, r22
    4702:	00 0c       	add	r0, r0
    4704:	77 0b       	sbc	r23, r23
    4706:	88 0b       	sbc	r24, r24
    4708:	99 0b       	sbc	r25, r25
    470a:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__floatsisf>
    470e:	23 e3       	ldi	r18, 0x33	; 51
    4710:	33 e3       	ldi	r19, 0x33	; 51
    4712:	43 e3       	ldi	r20, 0x33	; 51
    4714:	5f e3       	ldi	r21, 0x3F	; 63
    4716:	0e 94 49 29 	call	0x5292	; 0x5292 <__mulsf3>
    471a:	0e 94 ad 28 	call	0x515a	; 0x515a <__fixsfsi>
    471e:	60 93 55 02 	sts	0x0255, r22	; 0x800255 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    4722:	6c 2f       	mov	r22, r28
    4724:	cc 0f       	add	r28, r28
    4726:	77 0b       	sbc	r23, r23
    4728:	88 0b       	sbc	r24, r24
    472a:	99 0b       	sbc	r25, r25
    472c:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__floatsisf>
    4730:	23 e3       	ldi	r18, 0x33	; 51
    4732:	33 e3       	ldi	r19, 0x33	; 51
    4734:	43 e3       	ldi	r20, 0x33	; 51
    4736:	5f e3       	ldi	r21, 0x3F	; 63
    4738:	0e 94 49 29 	call	0x5292	; 0x5292 <__mulsf3>
    473c:	0e 94 ad 28 	call	0x515a	; 0x515a <__fixsfsi>
    4740:	60 93 56 02 	sts	0x0256, r22	; 0x800256 <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4744:	11 16       	cp	r1, r17
    4746:	24 f4       	brge	.+8      	; 0x4750 <mousekey_task+0x102>
    4748:	0e 94 75 21 	call	0x42ea	; 0x42ea <wheel_unit>
    474c:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4750:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <mouse_report+0x3>
    4754:	87 ff       	sbrs	r24, 7
    4756:	05 c0       	rjmp	.+10     	; 0x4762 <mousekey_task+0x114>
    4758:	0e 94 75 21 	call	0x42ea	; 0x42ea <wheel_unit>
    475c:	81 95       	neg	r24
    475e:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4762:	1d 16       	cp	r1, r29
    4764:	24 f4       	brge	.+8      	; 0x476e <mousekey_task+0x120>
    4766:	0e 94 75 21 	call	0x42ea	; 0x42ea <wheel_unit>
    476a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    476e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <mouse_report+0x4>
    4772:	87 ff       	sbrs	r24, 7
    4774:	05 c0       	rjmp	.+10     	; 0x4780 <mousekey_task+0x132>
    4776:	0e 94 75 21 	call	0x42ea	; 0x42ea <wheel_unit>
    477a:	81 95       	neg	r24
    477c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <mouse_report+0x4>
}
    4780:	df 91       	pop	r29
    4782:	cf 91       	pop	r28
    4784:	1f 91       	pop	r17
    mousekey_send();
    4786:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    478a:	9f 3f       	cpi	r25, 0xFF	; 255
    478c:	09 f0       	breq	.+2      	; 0x4790 <mousekey_task+0x142>
    478e:	8f cf       	rjmp	.-226    	; 0x46ae <mousekey_task+0x60>
    4790:	a0 cf       	rjmp	.-192    	; 0x46d2 <mousekey_task+0x84>

00004792 <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    4792:	85 e0       	ldi	r24, 0x05	; 5
    4794:	e4 e5       	ldi	r30, 0x54	; 84
    4796:	f2 e0       	ldi	r31, 0x02	; 2
    4798:	df 01       	movw	r26, r30
    479a:	1d 92       	st	X+, r1
    479c:	8a 95       	dec	r24
    479e:	e9 f7       	brne	.-6      	; 0x479a <mousekey_clear+0x8>
    mousekey_repeat = 0;
    47a0:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <mousekey_repeat>
    mousekey_accel = 0;
    47a4:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <mousekey_accel>
}
    47a8:	08 95       	ret

000047aa <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    47aa:	8d e2       	ldi	r24, 0x2D	; 45
    47ac:	96 e0       	ldi	r25, 0x06	; 6
    47ae:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    47b2:	1f 92       	push	r1
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	8f 93       	push	r24
    47b8:	1f 92       	push	r1
    47ba:	85 e0       	ldi	r24, 0x05	; 5
    47bc:	8f 93       	push	r24
    47be:	8f ed       	ldi	r24, 0xDF	; 223
    47c0:	95 e0       	ldi	r25, 0x05	; 5
    47c2:	9f 93       	push	r25
    47c4:	8f 93       	push	r24
    47c6:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    47ca:	0f 90       	pop	r0
    47cc:	0f 90       	pop	r0
    47ce:	0f 90       	pop	r0
    47d0:	0f 90       	pop	r0
    47d2:	0f 90       	pop	r0
    47d4:	0f 90       	pop	r0
    47d6:	08 95       	ret

000047d8 <mousekey_param_inc>:
    switch (param) {
    47d8:	83 30       	cpi	r24, 0x03	; 3
    47da:	09 f4       	brne	.+2      	; 0x47de <mousekey_param_inc+0x6>
    47dc:	45 c0       	rjmp	.+138    	; 0x4868 <mousekey_param_inc+0x90>
    47de:	28 f4       	brcc	.+10     	; 0x47ea <mousekey_param_inc+0x12>
    47e0:	81 30       	cpi	r24, 0x01	; 1
    47e2:	61 f0       	breq	.+24     	; 0x47fc <mousekey_param_inc+0x24>
    47e4:	82 30       	cpi	r24, 0x02	; 2
    47e6:	49 f1       	breq	.+82     	; 0x483a <mousekey_param_inc+0x62>
    47e8:	08 95       	ret
    47ea:	85 30       	cpi	r24, 0x05	; 5
    47ec:	09 f4       	brne	.+2      	; 0x47f0 <mousekey_param_inc+0x18>
    47ee:	6a c0       	rjmp	.+212    	; 0x48c4 <mousekey_param_inc+0xec>
    47f0:	08 f4       	brcc	.+2      	; 0x47f4 <mousekey_param_inc+0x1c>
    47f2:	51 c0       	rjmp	.+162    	; 0x4896 <mousekey_param_inc+0xbe>
    47f4:	86 30       	cpi	r24, 0x06	; 6
    47f6:	09 f4       	brne	.+2      	; 0x47fa <mousekey_param_inc+0x22>
    47f8:	7c c0       	rjmp	.+248    	; 0x48f2 <mousekey_param_inc+0x11a>
    47fa:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    47fc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    4800:	48 2f       	mov	r20, r24
    4802:	46 0f       	add	r20, r22
    4804:	55 27       	eor	r21, r21
    4806:	55 1f       	adc	r21, r21
    4808:	4f 3f       	cpi	r20, 0xFF	; 255
    480a:	51 05       	cpc	r21, r1
    480c:	94 f4       	brge	.+36     	; 0x4832 <mousekey_param_inc+0x5a>
                mk_delay += inc;
    480e:	68 0f       	add	r22, r24
    4810:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4814:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    4818:	1f 92       	push	r1
    481a:	8f 93       	push	r24
    481c:	88 e1       	ldi	r24, 0x18	; 24
    481e:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4820:	9f 93       	push	r25
    4822:	8f 93       	push	r24
    4824:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
            break;
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	0f 90       	pop	r0
}
    4830:	08 95       	ret
                mk_delay = UINT8_MAX;
    4832:	8f ef       	ldi	r24, 0xFF	; 255
    4834:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_delay>
    4838:	ed cf       	rjmp	.-38     	; 0x4814 <mousekey_param_inc+0x3c>
            if (mk_interval + inc < UINT8_MAX)
    483a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    483e:	48 2f       	mov	r20, r24
    4840:	46 0f       	add	r20, r22
    4842:	55 27       	eor	r21, r21
    4844:	55 1f       	adc	r21, r21
    4846:	4f 3f       	cpi	r20, 0xFF	; 255
    4848:	51 05       	cpc	r21, r1
    484a:	54 f4       	brge	.+20     	; 0x4860 <mousekey_param_inc+0x88>
                mk_interval += inc;
    484c:	68 0f       	add	r22, r24
    484e:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4852:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    4856:	1f 92       	push	r1
    4858:	8f 93       	push	r24
    485a:	86 e0       	ldi	r24, 0x06	; 6
    485c:	95 e0       	ldi	r25, 0x05	; 5
    485e:	e0 cf       	rjmp	.-64     	; 0x4820 <mousekey_param_inc+0x48>
                mk_interval = UINT8_MAX;
    4860:	8f ef       	ldi	r24, 0xFF	; 255
    4862:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_interval>
    4866:	f5 cf       	rjmp	.-22     	; 0x4852 <mousekey_param_inc+0x7a>
            if (mk_max_speed + inc < UINT8_MAX)
    4868:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    486c:	48 2f       	mov	r20, r24
    486e:	46 0f       	add	r20, r22
    4870:	55 27       	eor	r21, r21
    4872:	55 1f       	adc	r21, r21
    4874:	4f 3f       	cpi	r20, 0xFF	; 255
    4876:	51 05       	cpc	r21, r1
    4878:	54 f4       	brge	.+20     	; 0x488e <mousekey_param_inc+0xb6>
                mk_max_speed += inc;
    487a:	68 0f       	add	r22, r24
    487c:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4880:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    4884:	1f 92       	push	r1
    4886:	8f 93       	push	r24
    4888:	83 ef       	ldi	r24, 0xF3	; 243
    488a:	94 e0       	ldi	r25, 0x04	; 4
    488c:	c9 cf       	rjmp	.-110    	; 0x4820 <mousekey_param_inc+0x48>
                mk_max_speed = UINT8_MAX;
    488e:	8f ef       	ldi	r24, 0xFF	; 255
    4890:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_max_speed>
    4894:	f5 cf       	rjmp	.-22     	; 0x4880 <mousekey_param_inc+0xa8>
            if (mk_time_to_max + inc < UINT8_MAX)
    4896:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    489a:	48 2f       	mov	r20, r24
    489c:	46 0f       	add	r20, r22
    489e:	55 27       	eor	r21, r21
    48a0:	55 1f       	adc	r21, r21
    48a2:	4f 3f       	cpi	r20, 0xFF	; 255
    48a4:	51 05       	cpc	r21, r1
    48a6:	54 f4       	brge	.+20     	; 0x48bc <mousekey_param_inc+0xe4>
                mk_time_to_max += inc;
    48a8:	68 0f       	add	r22, r24
    48aa:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    48ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    48b2:	1f 92       	push	r1
    48b4:	8f 93       	push	r24
    48b6:	8e ed       	ldi	r24, 0xDE	; 222
    48b8:	94 e0       	ldi	r25, 0x04	; 4
    48ba:	b2 cf       	rjmp	.-156    	; 0x4820 <mousekey_param_inc+0x48>
                mk_time_to_max = UINT8_MAX;
    48bc:	8f ef       	ldi	r24, 0xFF	; 255
    48be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_time_to_max>
    48c2:	f5 cf       	rjmp	.-22     	; 0x48ae <mousekey_param_inc+0xd6>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    48c4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    48c8:	48 2f       	mov	r20, r24
    48ca:	46 0f       	add	r20, r22
    48cc:	55 27       	eor	r21, r21
    48ce:	55 1f       	adc	r21, r21
    48d0:	4f 3f       	cpi	r20, 0xFF	; 255
    48d2:	51 05       	cpc	r21, r1
    48d4:	54 f4       	brge	.+20     	; 0x48ea <mousekey_param_inc+0x112>
                mk_wheel_max_speed += inc;
    48d6:	68 0f       	add	r22, r24
    48d8:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    48dc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    48e0:	1f 92       	push	r1
    48e2:	8f 93       	push	r24
    48e4:	85 ec       	ldi	r24, 0xC5	; 197
    48e6:	94 e0       	ldi	r25, 0x04	; 4
    48e8:	9b cf       	rjmp	.-202    	; 0x4820 <mousekey_param_inc+0x48>
                mk_wheel_max_speed = UINT8_MAX;
    48ea:	8f ef       	ldi	r24, 0xFF	; 255
    48ec:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_max_speed>
    48f0:	f5 cf       	rjmp	.-22     	; 0x48dc <mousekey_param_inc+0x104>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    48f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    48f6:	48 2f       	mov	r20, r24
    48f8:	46 0f       	add	r20, r22
    48fa:	55 27       	eor	r21, r21
    48fc:	55 1f       	adc	r21, r21
    48fe:	4f 3f       	cpi	r20, 0xFF	; 255
    4900:	51 05       	cpc	r21, r1
    4902:	54 f4       	brge	.+20     	; 0x4918 <mousekey_param_inc+0x140>
                mk_wheel_time_to_max += inc;
    4904:	68 0f       	add	r22, r24
    4906:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    490a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    490e:	1f 92       	push	r1
    4910:	8f 93       	push	r24
    4912:	8a ea       	ldi	r24, 0xAA	; 170
    4914:	94 e0       	ldi	r25, 0x04	; 4
    4916:	84 cf       	rjmp	.-248    	; 0x4820 <mousekey_param_inc+0x48>
                mk_wheel_time_to_max = UINT8_MAX;
    4918:	8f ef       	ldi	r24, 0xFF	; 255
    491a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mk_wheel_time_to_max>
    491e:	f5 cf       	rjmp	.-22     	; 0x490a <mousekey_param_inc+0x132>

00004920 <mousekey_param_dec>:
    switch (param) {
    4920:	83 30       	cpi	r24, 0x03	; 3
    4922:	c9 f1       	breq	.+114    	; 0x4996 <mousekey_param_dec+0x76>
    4924:	28 f4       	brcc	.+10     	; 0x4930 <mousekey_param_dec+0x10>
    4926:	81 30       	cpi	r24, 0x01	; 1
    4928:	61 f0       	breq	.+24     	; 0x4942 <mousekey_param_dec+0x22>
    492a:	82 30       	cpi	r24, 0x02	; 2
    492c:	19 f1       	breq	.+70     	; 0x4974 <mousekey_param_dec+0x54>
    492e:	08 95       	ret
    4930:	85 30       	cpi	r24, 0x05	; 5
    4932:	09 f4       	brne	.+2      	; 0x4936 <mousekey_param_dec+0x16>
    4934:	52 c0       	rjmp	.+164    	; 0x49da <mousekey_param_dec+0xba>
    4936:	08 f4       	brcc	.+2      	; 0x493a <mousekey_param_dec+0x1a>
    4938:	3f c0       	rjmp	.+126    	; 0x49b8 <mousekey_param_dec+0x98>
    493a:	86 30       	cpi	r24, 0x06	; 6
    493c:	09 f4       	brne	.+2      	; 0x4940 <mousekey_param_dec+0x20>
    493e:	5e c0       	rjmp	.+188    	; 0x49fc <mousekey_param_dec+0xdc>
    4940:	08 95       	ret
            if (mk_delay > dec)
    4942:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    4946:	68 17       	cp	r22, r24
    4948:	90 f4       	brcc	.+36     	; 0x496e <mousekey_param_dec+0x4e>
                mk_delay -= dec;
    494a:	86 1b       	sub	r24, r22
    494c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4950:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    4954:	1f 92       	push	r1
    4956:	8f 93       	push	r24
    4958:	8b e9       	ldi	r24, 0x9B	; 155
    495a:	94 e0       	ldi	r25, 0x04	; 4
            PRINT_SET_VAL(mk_wheel_time_to_max);
    495c:	9f 93       	push	r25
    495e:	8f 93       	push	r24
    4960:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
            break;
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	0f 90       	pop	r0
    496a:	0f 90       	pop	r0
}
    496c:	08 95       	ret
                mk_delay = 0;
    496e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_delay>
    4972:	ee cf       	rjmp	.-36     	; 0x4950 <mousekey_param_dec+0x30>
            if (mk_interval > dec)
    4974:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    4978:	68 17       	cp	r22, r24
    497a:	50 f4       	brcc	.+20     	; 0x4990 <mousekey_param_dec+0x70>
                mk_interval -= dec;
    497c:	86 1b       	sub	r24, r22
    497e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4982:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    4986:	1f 92       	push	r1
    4988:	8f 93       	push	r24
    498a:	89 e8       	ldi	r24, 0x89	; 137
    498c:	94 e0       	ldi	r25, 0x04	; 4
    498e:	e6 cf       	rjmp	.-52     	; 0x495c <mousekey_param_dec+0x3c>
                mk_interval = 0;
    4990:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mk_interval>
    4994:	f6 cf       	rjmp	.-20     	; 0x4982 <mousekey_param_dec+0x62>
            if (mk_max_speed > dec)
    4996:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    499a:	68 17       	cp	r22, r24
    499c:	50 f4       	brcc	.+20     	; 0x49b2 <mousekey_param_dec+0x92>
                mk_max_speed -= dec;
    499e:	86 1b       	sub	r24, r22
    49a0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    49a4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    49a8:	1f 92       	push	r1
    49aa:	8f 93       	push	r24
    49ac:	86 e7       	ldi	r24, 0x76	; 118
    49ae:	94 e0       	ldi	r25, 0x04	; 4
    49b0:	d5 cf       	rjmp	.-86     	; 0x495c <mousekey_param_dec+0x3c>
                mk_max_speed = 0;
    49b2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <mk_max_speed>
    49b6:	f6 cf       	rjmp	.-20     	; 0x49a4 <mousekey_param_dec+0x84>
            if (mk_time_to_max > dec)
    49b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    49bc:	68 17       	cp	r22, r24
    49be:	50 f4       	brcc	.+20     	; 0x49d4 <mousekey_param_dec+0xb4>
                mk_time_to_max -= dec;
    49c0:	86 1b       	sub	r24, r22
    49c2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    49c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    49ca:	1f 92       	push	r1
    49cc:	8f 93       	push	r24
    49ce:	81 e6       	ldi	r24, 0x61	; 97
    49d0:	94 e0       	ldi	r25, 0x04	; 4
    49d2:	c4 cf       	rjmp	.-120    	; 0x495c <mousekey_param_dec+0x3c>
                mk_time_to_max = 0;
    49d4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mk_time_to_max>
    49d8:	f6 cf       	rjmp	.-20     	; 0x49c6 <mousekey_param_dec+0xa6>
            if (mk_wheel_max_speed > dec)
    49da:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    49de:	68 17       	cp	r22, r24
    49e0:	50 f4       	brcc	.+20     	; 0x49f6 <mousekey_param_dec+0xd6>
                mk_wheel_max_speed -= dec;
    49e2:	86 1b       	sub	r24, r22
    49e4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    49e8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    49ec:	1f 92       	push	r1
    49ee:	8f 93       	push	r24
    49f0:	88 e4       	ldi	r24, 0x48	; 72
    49f2:	94 e0       	ldi	r25, 0x04	; 4
    49f4:	b3 cf       	rjmp	.-154    	; 0x495c <mousekey_param_dec+0x3c>
                mk_wheel_max_speed = 0;
    49f6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <mk_wheel_max_speed>
    49fa:	f6 cf       	rjmp	.-20     	; 0x49e8 <mousekey_param_dec+0xc8>
            if (mk_wheel_time_to_max > dec)
    49fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    4a00:	68 17       	cp	r22, r24
    4a02:	50 f4       	brcc	.+20     	; 0x4a18 <mousekey_param_dec+0xf8>
                mk_wheel_time_to_max -= dec;
    4a04:	86 1b       	sub	r24, r22
    4a06:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4a0a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    4a0e:	1f 92       	push	r1
    4a10:	8f 93       	push	r24
    4a12:	8d e2       	ldi	r24, 0x2D	; 45
    4a14:	94 e0       	ldi	r25, 0x04	; 4
    4a16:	a2 cf       	rjmp	.-188    	; 0x495c <mousekey_param_dec+0x3c>
                mk_wheel_time_to_max = 0;
    4a18:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <mk_wheel_time_to_max>
    4a1c:	f6 cf       	rjmp	.-20     	; 0x4a0a <mousekey_param_dec+0xea>

00004a1e <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4a1e:	cf 93       	push	r28
    4a20:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4a22:	1f 92       	push	r1
    4a24:	8f 93       	push	r24
    4a26:	82 e3       	ldi	r24, 0x32	; 50
    4a28:	97 e0       	ldi	r25, 0x07	; 7
    4a2a:	9f 93       	push	r25
    4a2c:	8f 93       	push	r24
    4a2e:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    default_layer_set(1UL<<layer);
    4a32:	61 e0       	ldi	r22, 0x01	; 1
    4a34:	70 e0       	ldi	r23, 0x00	; 0
    4a36:	80 e0       	ldi	r24, 0x00	; 0
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	04 c0       	rjmp	.+8      	; 0x4a44 <switch_default_layer+0x26>
    4a3c:	66 0f       	add	r22, r22
    4a3e:	77 1f       	adc	r23, r23
    4a40:	88 1f       	adc	r24, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	ca 95       	dec	r28
    4a46:	d2 f7       	brpl	.-12     	; 0x4a3c <switch_default_layer+0x1e>
    4a48:	0e 94 c8 1a 	call	0x3590	; 0x3590 <default_layer_set>
    clear_keyboard();
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	0f 90       	pop	r0
    4a52:	0f 90       	pop	r0
}
    4a54:	cf 91       	pop	r28
    clear_keyboard();
    4a56:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <clear_keyboard>

00004a5a <command_common>:
{
    4a5a:	cf 93       	push	r28
    switch (code) {
    4a5c:	87 32       	cpi	r24, 0x27	; 39
    4a5e:	08 f0       	brcs	.+2      	; 0x4a62 <command_common+0x8>
    4a60:	43 c0       	rjmp	.+134    	; 0x4ae8 <command_common+0x8e>
    4a62:	8e 31       	cpi	r24, 0x1E	; 30
    4a64:	08 f0       	brcs	.+2      	; 0x4a68 <command_common+0xe>
    4a66:	28 c2       	rjmp	.+1104   	; 0x4eb8 <command_common+0x45e>
    4a68:	8e 30       	cpi	r24, 0x0E	; 14
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <command_common+0x14>
    4a6c:	c4 c1       	rjmp	.+904    	; 0x4df6 <command_common+0x39c>
    4a6e:	b8 f4       	brcc	.+46     	; 0x4a9e <command_common+0x44>
    4a70:	87 30       	cpi	r24, 0x07	; 7
    4a72:	09 f4       	brne	.+2      	; 0x4a76 <command_common+0x1c>
    4a74:	a6 c1       	rjmp	.+844    	; 0x4dc2 <command_common+0x368>
    4a76:	48 f4       	brcc	.+18     	; 0x4a8a <command_common+0x30>
    4a78:	86 30       	cpi	r24, 0x06	; 6
    4a7a:	09 f4       	brne	.+2      	; 0x4a7e <command_common+0x24>
    4a7c:	8f c1       	rjmp	.+798    	; 0x4d9c <command_common+0x342>
            print("?");
    4a7e:	8e e3       	ldi	r24, 0x3E	; 62
    4a80:	99 e0       	ldi	r25, 0x09	; 9
    4a82:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            return false;
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	9a c1       	rjmp	.+820    	; 0x4dbe <command_common+0x364>
    switch (code) {
    4a8a:	88 30       	cpi	r24, 0x08	; 8
    4a8c:	09 f4       	brne	.+2      	; 0x4a90 <command_common+0x36>
    4a8e:	56 c0       	rjmp	.+172    	; 0x4b3c <command_common+0xe2>
    4a90:	8b 30       	cpi	r24, 0x0B	; 11
    4a92:	a9 f7       	brne	.-22     	; 0x4a7e <command_common+0x24>
    print("\n\t- Magic -\n"
    4a94:	8e e5       	ldi	r24, 0x5E	; 94
    4a96:	97 e0       	ldi	r25, 0x07	; 7
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4a98:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4a9c:	7d c1       	rjmp	.+762    	; 0x4d98 <command_common+0x33e>
    switch (code) {
    4a9e:	86 31       	cpi	r24, 0x16	; 22
    4aa0:	09 f4       	brne	.+2      	; 0x4aa4 <command_common+0x4a>
    4aa2:	d3 c1       	rjmp	.+934    	; 0x4e4a <command_common+0x3f0>
    4aa4:	78 f4       	brcc	.+30     	; 0x4ac4 <command_common+0x6a>
    4aa6:	80 31       	cpi	r24, 0x10	; 16
    4aa8:	51 f7       	brne	.-44     	; 0x4a7e <command_common+0x24>
            debug_mouse = !debug_mouse;
    4aaa:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <debug_config>
    4aae:	89 2f       	mov	r24, r25
    4ab0:	87 7f       	andi	r24, 0xF7	; 247
    4ab2:	93 ff       	sbrs	r25, 3
    4ab4:	88 60       	ori	r24, 0x08	; 8
    4ab6:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <debug_config>
            if (debug_mouse) {
    4aba:	83 ff       	sbrs	r24, 3
    4abc:	ac c1       	rjmp	.+856    	; 0x4e16 <command_common+0x3bc>
                print("\nmouse: on\n");
    4abe:	85 eb       	ldi	r24, 0xB5	; 181
    4ac0:	9a e0       	ldi	r25, 0x0A	; 10
    4ac2:	90 c1       	rjmp	.+800    	; 0x4de4 <command_common+0x38a>
    switch (code) {
    4ac4:	89 31       	cpi	r24, 0x19	; 25
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <command_common+0x70>
    4ac8:	a9 c1       	rjmp	.+850    	; 0x4e1c <command_common+0x3c2>
    4aca:	8b 31       	cpi	r24, 0x1B	; 27
    4acc:	c1 f6       	brne	.-80     	; 0x4a7e <command_common+0x24>
            debug_matrix = !debug_matrix;
    4ace:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <debug_config>
    4ad2:	89 2f       	mov	r24, r25
    4ad4:	8d 7f       	andi	r24, 0xFD	; 253
    4ad6:	91 ff       	sbrs	r25, 1
    4ad8:	82 60       	ori	r24, 0x02	; 2
    4ada:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <debug_config>
            if (debug_matrix) {
    4ade:	81 ff       	sbrs	r24, 1
    4ae0:	87 c1       	rjmp	.+782    	; 0x4df0 <command_common+0x396>
                print("\nmatrix: on\n");
    4ae2:	8e ee       	ldi	r24, 0xEE	; 238
    4ae4:	9a e0       	ldi	r25, 0x0A	; 10
    4ae6:	7e c1       	rjmp	.+764    	; 0x4de4 <command_common+0x38a>
    switch (code) {
    4ae8:	88 33       	cpi	r24, 0x38	; 56
    4aea:	a1 f2       	breq	.-88     	; 0x4a94 <command_common+0x3a>
    4aec:	50 f4       	brcc	.+20     	; 0x4b02 <command_common+0xa8>
    4aee:	89 32       	cpi	r24, 0x29	; 41
    4af0:	21 f0       	breq	.+8      	; 0x4afa <command_common+0xa0>
    4af2:	85 33       	cpi	r24, 0x35	; 53
    4af4:	11 f0       	breq	.+4      	; 0x4afa <command_common+0xa0>
    4af6:	87 32       	cpi	r24, 0x27	; 39
    4af8:	11 f6       	brne	.-124    	; 0x4a7e <command_common+0x24>
            switch_default_layer(0);
    4afa:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    4afc:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <switch_default_layer>
    4b00:	4b c1       	rjmp	.+662    	; 0x4d98 <command_common+0x33e>
    switch (code) {
    4b02:	83 34       	cpi	r24, 0x43	; 67
    4b04:	d1 f3       	breq	.-12     	; 0x4afa <command_common+0xa0>
    4b06:	28 f4       	brcc	.+10     	; 0x4b12 <command_common+0xb8>
    4b08:	8a 33       	cpi	r24, 0x3A	; 58
    4b0a:	08 f4       	brcc	.+2      	; 0x4b0e <command_common+0xb4>
    4b0c:	b8 cf       	rjmp	.-144    	; 0x4a7e <command_common+0x24>
            switch_default_layer((code - KC_F1) + 1);
    4b0e:	89 53       	subi	r24, 0x39	; 57
    4b10:	f5 cf       	rjmp	.-22     	; 0x4afc <command_common+0xa2>
    switch (code) {
    4b12:	88 34       	cpi	r24, 0x48	; 72
    4b14:	09 f0       	breq	.+2      	; 0x4b18 <command_common+0xbe>
    4b16:	b3 cf       	rjmp	.-154    	; 0x4a7e <command_common+0x24>
            clear_keyboard();
    4b18:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <clear_keyboard>
            print("\n\nbootloader... ");
    4b1c:	84 e1       	ldi	r24, 0x14	; 20
    4b1e:	9b e0       	ldi	r25, 0x0B	; 11
    4b20:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4b24:	9f ef       	ldi	r25, 0xFF	; 255
    4b26:	23 ed       	ldi	r18, 0xD3	; 211
    4b28:	80 e3       	ldi	r24, 0x30	; 48
    4b2a:	91 50       	subi	r25, 0x01	; 1
    4b2c:	20 40       	sbci	r18, 0x00	; 0
    4b2e:	80 40       	sbci	r24, 0x00	; 0
    4b30:	e1 f7       	brne	.-8      	; 0x4b2a <command_common+0xd0>
    4b32:	00 c0       	rjmp	.+0      	; 0x4b34 <command_common+0xda>
    4b34:	00 00       	nop
            bootloader_jump(); // not return
    4b36:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <bootloader_jump>
    4b3a:	2e c1       	rjmp	.+604    	; 0x4d98 <command_common+0x33e>
            print("eeconfig:\n");
    4b3c:	89 e2       	ldi	r24, 0x29	; 41
    4b3e:	9b e0       	ldi	r25, 0x0B	; 11
    4b40:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4b44:	8e e2       	ldi	r24, 0x2E	; 46
    4b46:	99 e0       	ldi	r25, 0x09	; 9
    4b48:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4b4c:	0e 94 19 21 	call	0x4232	; 0x4232 <eeconfig_read_default_layer>
    4b50:	1f 92       	push	r1
    4b52:	8f 93       	push	r24
    4b54:	8b e2       	ldi	r24, 0x2B	; 43
    4b56:	99 e0       	ldi	r25, 0x09	; 9
    4b58:	9f 93       	push	r25
    4b5a:	8f 93       	push	r24
    4b5c:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4b60:	89 e2       	ldi	r24, 0x29	; 41
    4b62:	99 e0       	ldi	r25, 0x09	; 9
    4b64:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    dc.raw = eeconfig_read_debug();
    4b68:	0e 94 10 21 	call	0x4220	; 0x4220 <eeconfig_read_debug>
    4b6c:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4b6e:	86 e1       	ldi	r24, 0x16	; 22
    4b70:	99 e0       	ldi	r25, 0x09	; 9
    4b72:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4b76:	1f 92       	push	r1
    4b78:	cf 93       	push	r28
    4b7a:	81 e1       	ldi	r24, 0x11	; 17
    4b7c:	99 e0       	ldi	r25, 0x09	; 9
    4b7e:	9f 93       	push	r25
    4b80:	8f 93       	push	r24
    4b82:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4b86:	8f e0       	ldi	r24, 0x0F	; 15
    4b88:	99 e0       	ldi	r25, 0x09	; 9
    4b8a:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4b8e:	85 e0       	ldi	r24, 0x05	; 5
    4b90:	99 e0       	ldi	r25, 0x09	; 9
    4b92:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4b96:	8c 2f       	mov	r24, r28
    4b98:	81 70       	andi	r24, 0x01	; 1
    4b9a:	1f 92       	push	r1
    4b9c:	8f 93       	push	r24
    4b9e:	82 e0       	ldi	r24, 0x02	; 2
    4ba0:	99 e0       	ldi	r25, 0x09	; 9
    4ba2:	9f 93       	push	r25
    4ba4:	8f 93       	push	r24
    4ba6:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4baa:	80 e0       	ldi	r24, 0x00	; 0
    4bac:	99 e0       	ldi	r25, 0x09	; 9
    4bae:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4bb2:	86 ef       	ldi	r24, 0xF6	; 246
    4bb4:	98 e0       	ldi	r25, 0x08	; 8
    4bb6:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4bba:	c1 fb       	bst	r28, 1
    4bbc:	88 27       	eor	r24, r24
    4bbe:	80 f9       	bld	r24, 0
    4bc0:	1f 92       	push	r1
    4bc2:	8f 93       	push	r24
    4bc4:	83 ef       	ldi	r24, 0xF3	; 243
    4bc6:	98 e0       	ldi	r25, 0x08	; 8
    4bc8:	9f 93       	push	r25
    4bca:	8f 93       	push	r24
    4bcc:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4bd0:	81 ef       	ldi	r24, 0xF1	; 241
    4bd2:	98 e0       	ldi	r25, 0x08	; 8
    4bd4:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4bd8:	85 ee       	ldi	r24, 0xE5	; 229
    4bda:	98 e0       	ldi	r25, 0x08	; 8
    4bdc:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4be0:	c2 fb       	bst	r28, 2
    4be2:	88 27       	eor	r24, r24
    4be4:	80 f9       	bld	r24, 0
    4be6:	1f 92       	push	r1
    4be8:	8f 93       	push	r24
    4bea:	82 ee       	ldi	r24, 0xE2	; 226
    4bec:	98 e0       	ldi	r25, 0x08	; 8
    4bee:	9f 93       	push	r25
    4bf0:	8f 93       	push	r24
    4bf2:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4bf6:	80 ee       	ldi	r24, 0xE0	; 224
    4bf8:	98 e0       	ldi	r25, 0x08	; 8
    4bfa:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4bfe:	87 ed       	ldi	r24, 0xD7	; 215
    4c00:	98 e0       	ldi	r25, 0x08	; 8
    4c02:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4c06:	c3 fb       	bst	r28, 3
    4c08:	cc 27       	eor	r28, r28
    4c0a:	c0 f9       	bld	r28, 0
    4c0c:	1f 92       	push	r1
    4c0e:	cf 93       	push	r28
    4c10:	84 ed       	ldi	r24, 0xD4	; 212
    4c12:	98 e0       	ldi	r25, 0x08	; 8
    4c14:	9f 93       	push	r25
    4c16:	8f 93       	push	r24
    4c18:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4c1c:	82 ed       	ldi	r24, 0xD2	; 210
    4c1e:	98 e0       	ldi	r25, 0x08	; 8
    4c20:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    kc.raw = eeconfig_read_keymap();
    4c24:	0e 94 22 21 	call	0x4244	; 0x4244 <eeconfig_read_keymap>
    4c28:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4c2a:	8e eb       	ldi	r24, 0xBE	; 190
    4c2c:	98 e0       	ldi	r25, 0x08	; 8
    4c2e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4c32:	1f 92       	push	r1
    4c34:	cf 93       	push	r28
    4c36:	89 eb       	ldi	r24, 0xB9	; 185
    4c38:	98 e0       	ldi	r25, 0x08	; 8
    4c3a:	9f 93       	push	r25
    4c3c:	8f 93       	push	r24
    4c3e:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4c42:	87 eb       	ldi	r24, 0xB7	; 183
    4c44:	98 e0       	ldi	r25, 0x08	; 8
    4c46:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4c4a:	8e e9       	ldi	r24, 0x9E	; 158
    4c4c:	98 e0       	ldi	r25, 0x08	; 8
    4c4e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4c52:	8c 2f       	mov	r24, r28
    4c54:	81 70       	andi	r24, 0x01	; 1
    4c56:	1f 92       	push	r1
    4c58:	8f 93       	push	r24
    4c5a:	8b e9       	ldi	r24, 0x9B	; 155
    4c5c:	98 e0       	ldi	r25, 0x08	; 8
    4c5e:	9f 93       	push	r25
    4c60:	8f 93       	push	r24
    4c62:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4c66:	8d b7       	in	r24, 0x3d	; 61
    4c68:	9e b7       	in	r25, 0x3e	; 62
    4c6a:	80 96       	adiw	r24, 0x20	; 32
    4c6c:	0f b6       	in	r0, 0x3f	; 63
    4c6e:	f8 94       	cli
    4c70:	9e bf       	out	0x3e, r25	; 62
    4c72:	0f be       	out	0x3f, r0	; 63
    4c74:	8d bf       	out	0x3d, r24	; 61
    4c76:	89 e9       	ldi	r24, 0x99	; 153
    4c78:	98 e0       	ldi	r25, 0x08	; 8
    4c7a:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4c7e:	82 e8       	ldi	r24, 0x82	; 130
    4c80:	98 e0       	ldi	r25, 0x08	; 8
    4c82:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4c86:	c1 fb       	bst	r28, 1
    4c88:	88 27       	eor	r24, r24
    4c8a:	80 f9       	bld	r24, 0
    4c8c:	1f 92       	push	r1
    4c8e:	8f 93       	push	r24
    4c90:	8f e7       	ldi	r24, 0x7F	; 127
    4c92:	98 e0       	ldi	r25, 0x08	; 8
    4c94:	9f 93       	push	r25
    4c96:	8f 93       	push	r24
    4c98:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4c9c:	8d e7       	ldi	r24, 0x7D	; 125
    4c9e:	98 e0       	ldi	r25, 0x08	; 8
    4ca0:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4ca4:	8b e6       	ldi	r24, 0x6B	; 107
    4ca6:	98 e0       	ldi	r25, 0x08	; 8
    4ca8:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4cac:	c2 fb       	bst	r28, 2
    4cae:	88 27       	eor	r24, r24
    4cb0:	80 f9       	bld	r24, 0
    4cb2:	1f 92       	push	r1
    4cb4:	8f 93       	push	r24
    4cb6:	88 e6       	ldi	r24, 0x68	; 104
    4cb8:	98 e0       	ldi	r25, 0x08	; 8
    4cba:	9f 93       	push	r25
    4cbc:	8f 93       	push	r24
    4cbe:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4cc2:	86 e6       	ldi	r24, 0x66	; 102
    4cc4:	98 e0       	ldi	r25, 0x08	; 8
    4cc6:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4cca:	84 e5       	ldi	r24, 0x54	; 84
    4ccc:	98 e0       	ldi	r25, 0x08	; 8
    4cce:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4cd2:	c3 fb       	bst	r28, 3
    4cd4:	88 27       	eor	r24, r24
    4cd6:	80 f9       	bld	r24, 0
    4cd8:	1f 92       	push	r1
    4cda:	8f 93       	push	r24
    4cdc:	81 e5       	ldi	r24, 0x51	; 81
    4cde:	98 e0       	ldi	r25, 0x08	; 8
    4ce0:	9f 93       	push	r25
    4ce2:	8f 93       	push	r24
    4ce4:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4ce8:	8f e4       	ldi	r24, 0x4F	; 79
    4cea:	98 e0       	ldi	r25, 0x08	; 8
    4cec:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4cf0:	85 e4       	ldi	r24, 0x45	; 69
    4cf2:	98 e0       	ldi	r25, 0x08	; 8
    4cf4:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4cf8:	c4 fb       	bst	r28, 4
    4cfa:	88 27       	eor	r24, r24
    4cfc:	80 f9       	bld	r24, 0
    4cfe:	1f 92       	push	r1
    4d00:	8f 93       	push	r24
    4d02:	82 e4       	ldi	r24, 0x42	; 66
    4d04:	98 e0       	ldi	r25, 0x08	; 8
    4d06:	9f 93       	push	r25
    4d08:	8f 93       	push	r24
    4d0a:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4d0e:	80 e4       	ldi	r24, 0x40	; 64
    4d10:	98 e0       	ldi	r25, 0x08	; 8
    4d12:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4d16:	8e e2       	ldi	r24, 0x2E	; 46
    4d18:	98 e0       	ldi	r25, 0x08	; 8
    4d1a:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4d1e:	c5 fb       	bst	r28, 5
    4d20:	88 27       	eor	r24, r24
    4d22:	80 f9       	bld	r24, 0
    4d24:	1f 92       	push	r1
    4d26:	8f 93       	push	r24
    4d28:	8b e2       	ldi	r24, 0x2B	; 43
    4d2a:	98 e0       	ldi	r25, 0x08	; 8
    4d2c:	9f 93       	push	r25
    4d2e:	8f 93       	push	r24
    4d30:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4d34:	89 e2       	ldi	r24, 0x29	; 41
    4d36:	98 e0       	ldi	r25, 0x08	; 8
    4d38:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4d3c:	8d e0       	ldi	r24, 0x0D	; 13
    4d3e:	98 e0       	ldi	r25, 0x08	; 8
    4d40:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4d44:	c6 fb       	bst	r28, 6
    4d46:	88 27       	eor	r24, r24
    4d48:	80 f9       	bld	r24, 0
    4d4a:	1f 92       	push	r1
    4d4c:	8f 93       	push	r24
    4d4e:	8a e0       	ldi	r24, 0x0A	; 10
    4d50:	98 e0       	ldi	r25, 0x08	; 8
    4d52:	9f 93       	push	r25
    4d54:	8f 93       	push	r24
    4d56:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4d5a:	88 e0       	ldi	r24, 0x08	; 8
    4d5c:	98 e0       	ldi	r25, 0x08	; 8
    4d5e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4d62:	80 e0       	ldi	r24, 0x00	; 0
    4d64:	98 e0       	ldi	r25, 0x08	; 8
    4d66:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4d6a:	c7 fb       	bst	r28, 7
    4d6c:	cc 27       	eor	r28, r28
    4d6e:	c0 f9       	bld	r28, 0
    4d70:	1f 92       	push	r1
    4d72:	cf 93       	push	r28
    4d74:	8d ef       	ldi	r24, 0xFD	; 253
    4d76:	97 e0       	ldi	r25, 0x07	; 7
    4d78:	9f 93       	push	r25
    4d7a:	8f 93       	push	r24
    4d7c:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4d80:	8b ef       	ldi	r24, 0xFB	; 251
    4d82:	97 e0       	ldi	r25, 0x07	; 7
    4d84:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4d88:	8d b7       	in	r24, 0x3d	; 61
    4d8a:	9e b7       	in	r25, 0x3e	; 62
    4d8c:	4c 96       	adiw	r24, 0x1c	; 28
    4d8e:	0f b6       	in	r0, 0x3f	; 63
    4d90:	f8 94       	cli
    4d92:	9e bf       	out	0x3e, r25	; 62
    4d94:	0f be       	out	0x3f, r0	; 63
    4d96:	8d bf       	out	0x3d, r24	; 61
    return true;
    4d98:	81 e0       	ldi	r24, 0x01	; 1
            break;
    4d9a:	11 c0       	rjmp	.+34     	; 0x4dbe <command_common+0x364>
            debug_matrix   = false;
    4d9c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
            debug_enable   = false;
    4da0:	81 7f       	andi	r24, 0xF1	; 241
    4da2:	8e 7f       	andi	r24, 0xFE	; 254
    4da4:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <debug_config>
    print("\n\t- Console -\n"
    4da8:	87 e3       	ldi	r24, 0x37	; 55
    4daa:	97 e0       	ldi	r25, 0x07	; 7
    4dac:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            print("C> ");
    4db0:	85 e2       	ldi	r24, 0x25	; 37
    4db2:	9b e0       	ldi	r25, 0x0B	; 11
    4db4:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            command_state = CONSOLE;
    4db8:	81 e0       	ldi	r24, 0x01	; 1
    4dba:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <command_state>
}
    4dbe:	cf 91       	pop	r28
    4dc0:	08 95       	ret
            if (debug_enable) {
    4dc2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    4dc6:	80 ff       	sbrs	r24, 0
    4dc8:	0b c0       	rjmp	.+22     	; 0x4de0 <command_common+0x386>
                print("\ndebug: off\n");
    4dca:	87 e0       	ldi	r24, 0x07	; 7
    4dcc:	9b e0       	ldi	r25, 0x0B	; 11
    4dce:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
                debug_matrix   = false;
    4dd2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
                debug_enable   = false;
    4dd6:	81 7f       	andi	r24, 0xF1	; 241
    4dd8:	8e 7f       	andi	r24, 0xFE	; 254
                debug_enable = true;
    4dda:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <debug_config>
    4dde:	dc cf       	rjmp	.-72     	; 0x4d98 <command_common+0x33e>
                print("\ndebug: on\n");
    4de0:	8b ef       	ldi	r24, 0xFB	; 251
    4de2:	9a e0       	ldi	r25, 0x0A	; 10
                print("\nmouse: on\n");
    4de4:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
                debug_enable = true;
    4de8:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <debug_config>
    4dec:	81 60       	ori	r24, 0x01	; 1
    4dee:	f5 cf       	rjmp	.-22     	; 0x4dda <command_common+0x380>
                print("\nmatrix: off\n");
    4df0:	80 ee       	ldi	r24, 0xE0	; 224
    4df2:	9a e0       	ldi	r25, 0x0A	; 10
    4df4:	51 ce       	rjmp	.-862    	; 0x4a98 <command_common+0x3e>
            debug_keyboard = !debug_keyboard;
    4df6:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <debug_config>
    4dfa:	89 2f       	mov	r24, r25
    4dfc:	8b 7f       	andi	r24, 0xFB	; 251
    4dfe:	92 ff       	sbrs	r25, 2
    4e00:	84 60       	ori	r24, 0x04	; 4
    4e02:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <debug_config>
            if (debug_keyboard) {
    4e06:	82 ff       	sbrs	r24, 2
    4e08:	03 c0       	rjmp	.+6      	; 0x4e10 <command_common+0x3b6>
                print("\nkeyboard: on\n");
    4e0a:	81 ed       	ldi	r24, 0xD1	; 209
    4e0c:	9a e0       	ldi	r25, 0x0A	; 10
    4e0e:	ea cf       	rjmp	.-44     	; 0x4de4 <command_common+0x38a>
                print("\nkeyboard: off\n");
    4e10:	81 ec       	ldi	r24, 0xC1	; 193
    4e12:	9a e0       	ldi	r25, 0x0A	; 10
    4e14:	41 ce       	rjmp	.-894    	; 0x4a98 <command_common+0x3e>
                print("\nmouse: off\n");
    4e16:	88 ea       	ldi	r24, 0xA8	; 168
    4e18:	9a e0       	ldi	r25, 0x0A	; 10
    4e1a:	3e ce       	rjmp	.-900    	; 0x4a98 <command_common+0x3e>
            print("\n\t- Version -\n");
    4e1c:	89 e9       	ldi	r24, 0x99	; 153
    4e1e:	9a e0       	ldi	r25, 0x0A	; 10
    4e20:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4e24:	80 e7       	ldi	r24, 0x70	; 112
    4e26:	9a e0       	ldi	r25, 0x0A	; 10
    4e28:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4e2c:	8b e3       	ldi	r24, 0x3B	; 59
    4e2e:	9a e0       	ldi	r25, 0x0A	; 10
    4e30:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4e34:	84 e1       	ldi	r24, 0x14	; 20
    4e36:	9a e0       	ldi	r25, 0x0A	; 10
    4e38:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            print("OPTIONS:"
    4e3c:	84 ed       	ldi	r24, 0xD4	; 212
    4e3e:	99 e0       	ldi	r25, 0x09	; 9
    4e40:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4e44:	89 ea       	ldi	r24, 0xA9	; 169
    4e46:	99 e0       	ldi	r25, 0x09	; 9
    4e48:	27 ce       	rjmp	.-946    	; 0x4a98 <command_common+0x3e>
            print("\n\t- Status -\n");
    4e4a:	8b e9       	ldi	r24, 0x9B	; 155
    4e4c:	99 e0       	ldi	r25, 0x09	; 9
    4e4e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            print_val_hex8(host_keyboard_leds());
    4e52:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <host_keyboard_leds>
    4e56:	1f 92       	push	r1
    4e58:	8f 93       	push	r24
    4e5a:	81 e8       	ldi	r24, 0x81	; 129
    4e5c:	99 e0       	ldi	r25, 0x09	; 9
    4e5e:	9f 93       	push	r25
    4e60:	8f 93       	push	r24
    4e62:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4e66:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    4e6a:	1f 92       	push	r1
    4e6c:	8f 93       	push	r24
    4e6e:	8a e6       	ldi	r24, 0x6A	; 106
    4e70:	99 e0       	ldi	r25, 0x09	; 9
    4e72:	9f 93       	push	r25
    4e74:	8f 93       	push	r24
    4e76:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
            print_val_hex8(keyboard_idle);
    4e7a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <keyboard_idle>
    4e7e:	1f 92       	push	r1
    4e80:	8f 93       	push	r24
    4e82:	87 e5       	ldi	r24, 0x57	; 87
    4e84:	99 e0       	ldi	r25, 0x09	; 9
    4e86:	9f 93       	push	r25
    4e88:	8f 93       	push	r24
    4e8a:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
            print_val_hex32(timer_read32());
    4e8e:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <timer_read32>
    4e92:	9f 93       	push	r25
    4e94:	8f 93       	push	r24
    4e96:	7f 93       	push	r23
    4e98:	6f 93       	push	r22
    4e9a:	80 e4       	ldi	r24, 0x40	; 64
    4e9c:	99 e0       	ldi	r25, 0x09	; 9
    4e9e:	9f 93       	push	r25
    4ea0:	8f 93       	push	r24
    4ea2:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
            break;
    4ea6:	8d b7       	in	r24, 0x3d	; 61
    4ea8:	9e b7       	in	r25, 0x3e	; 62
    4eaa:	42 96       	adiw	r24, 0x12	; 18
    4eac:	0f b6       	in	r0, 0x3f	; 63
    4eae:	f8 94       	cli
    4eb0:	9e bf       	out	0x3e, r25	; 62
    4eb2:	0f be       	out	0x3f, r0	; 63
    4eb4:	8d bf       	out	0x3d, r24	; 61
    4eb6:	70 cf       	rjmp	.-288    	; 0x4d98 <command_common+0x33e>
            switch_default_layer((code - KC_1) + 1);
    4eb8:	8d 51       	subi	r24, 0x1D	; 29
    4eba:	20 ce       	rjmp	.-960    	; 0x4afc <command_common+0xa2>

00004ebc <command_extra>:
}
    4ebc:	80 e0       	ldi	r24, 0x00	; 0
    4ebe:	08 95       	ret

00004ec0 <command_console_extra>:
    4ec0:	0c 94 5e 27 	jmp	0x4ebc	; 0x4ebc <command_extra>

00004ec4 <command_proc>:
{
    4ec4:	cf 93       	push	r28
    4ec6:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4ec8:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <command_state>
    4ecc:	81 30       	cpi	r24, 0x01	; 1
    4ece:	d1 f0       	breq	.+52     	; 0x4f04 <command_proc+0x40>
    4ed0:	38 f0       	brcs	.+14     	; 0x4ee0 <command_proc+0x1c>
    4ed2:	82 30       	cpi	r24, 0x02	; 2
    4ed4:	09 f4       	brne	.+2      	; 0x4ed8 <command_proc+0x14>
    4ed6:	4d c0       	rjmp	.+154    	; 0x4f72 <command_proc+0xae>
            command_state = ONESHOT;
    4ed8:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <command_state>
                return false;
    4edc:	80 e0       	ldi	r24, 0x00	; 0
    4ede:	10 c0       	rjmp	.+32     	; 0x4f00 <command_proc+0x3c>
            if (!IS_COMMAND())
    4ee0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    4ee4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    4ee8:	80 81       	ld	r24, Z
    4eea:	82 32       	cpi	r24, 0x22	; 34
    4eec:	b9 f7       	brne	.-18     	; 0x4edc <command_proc+0x18>
                return (command_extra(code) || command_common(code));
    4eee:	8c 2f       	mov	r24, r28
    4ef0:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <command_extra>
    4ef4:	81 11       	cpse	r24, r1
    4ef6:	1e c0       	rjmp	.+60     	; 0x4f34 <command_proc+0x70>
    4ef8:	8c 2f       	mov	r24, r28
    4efa:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <command_common>
                return (command_console_extra(code) || command_console(code));
    4efe:	81 70       	andi	r24, 0x01	; 1
}
    4f00:	cf 91       	pop	r28
    4f02:	08 95       	ret
            if (IS_COMMAND())
    4f04:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    4f08:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    4f0c:	80 81       	ld	r24, Z
    4f0e:	82 32       	cpi	r24, 0x22	; 34
    4f10:	71 f3       	breq	.-36     	; 0x4eee <command_proc+0x2a>
                return (command_console_extra(code) || command_console(code));
    4f12:	8c 2f       	mov	r24, r28
    4f14:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <command_console_extra>
    4f18:	81 11       	cpse	r24, r1
    4f1a:	1b c0       	rjmp	.+54     	; 0x4f52 <command_proc+0x8e>
    switch (code) {
    4f1c:	c4 31       	cpi	r28, 0x14	; 20
    4f1e:	d9 f0       	breq	.+54     	; 0x4f56 <command_proc+0x92>
    4f20:	60 f4       	brcc	.+24     	; 0x4f3a <command_proc+0x76>
    4f22:	cb 30       	cpi	r28, 0x0B	; 11
    4f24:	71 f0       	breq	.+28     	; 0x4f42 <command_proc+0x7e>
    4f26:	c0 31       	cpi	r28, 0x10	; 16
    4f28:	d1 f0       	breq	.+52     	; 0x4f5e <command_proc+0x9a>
            print("?");
    4f2a:	88 e2       	ldi	r24, 0x28	; 40
    4f2c:	97 e0       	ldi	r25, 0x07	; 7
    4f2e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4f32:	13 c0       	rjmp	.+38     	; 0x4f5a <command_proc+0x96>
                return (command_extra(code) || command_common(code));
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	e2 cf       	rjmp	.-60     	; 0x4efe <command_proc+0x3a>
    switch (code) {
    4f3a:	c9 32       	cpi	r28, 0x29	; 41
    4f3c:	61 f0       	breq	.+24     	; 0x4f56 <command_proc+0x92>
    4f3e:	c8 33       	cpi	r28, 0x38	; 56
    4f40:	a1 f7       	brne	.-24     	; 0x4f2a <command_proc+0x66>
    print("\n\t- Console -\n"
    4f42:	87 e3       	ldi	r24, 0x37	; 55
    4f44:	97 e0       	ldi	r25, 0x07	; 7
    4f46:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print("C> ");
    4f4a:	8e e2       	ldi	r24, 0x2E	; 46
    4f4c:	97 e0       	ldi	r25, 0x07	; 7
    4f4e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
                return (command_console_extra(code) || command_console(code));
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	d4 cf       	rjmp	.-88     	; 0x4efe <command_proc+0x3a>
            command_state = ONESHOT;
    4f56:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <command_state>
                return (command_console_extra(code) || command_console(code));
    4f5a:	80 e0       	ldi	r24, 0x00	; 0
    4f5c:	d0 cf       	rjmp	.-96     	; 0x4efe <command_proc+0x3a>
            mousekey_console_help();
    4f5e:	0e 94 d5 23 	call	0x47aa	; 0x47aa <mousekey_console_help>
            print("M> ");
    4f62:	8a e2       	ldi	r24, 0x2A	; 42
    4f64:	97 e0       	ldi	r25, 0x07	; 7
    4f66:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
            command_state = MOUSEKEY;
    4f6a:	82 e0       	ldi	r24, 0x02	; 2
    4f6c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <command_state>
    4f70:	f0 cf       	rjmp	.-32     	; 0x4f52 <command_proc+0x8e>
    switch (code) {
    4f72:	c4 32       	cpi	r28, 0x24	; 36
    4f74:	c8 f4       	brcc	.+50     	; 0x4fa8 <command_proc+0xe4>
    4f76:	ce 31       	cpi	r28, 0x1E	; 30
    4f78:	08 f0       	brcs	.+2      	; 0x4f7c <command_proc+0xb8>
    4f7a:	be c0       	rjmp	.+380    	; 0x50f8 <command_proc+0x234>
    4f7c:	cb 30       	cpi	r28, 0x0B	; 11
    4f7e:	e1 f0       	breq	.+56     	; 0x4fb8 <command_proc+0xf4>
    4f80:	40 f4       	brcc	.+16     	; 0x4f92 <command_proc+0xce>
    4f82:	c7 30       	cpi	r28, 0x07	; 7
    4f84:	09 f4       	brne	.+2      	; 0x4f88 <command_proc+0xc4>
    4f86:	cf c0       	rjmp	.+414    	; 0x5126 <command_proc+0x262>
            print("?");
    4f88:	8c ec       	ldi	r24, 0xCC	; 204
    4f8a:	95 e0       	ldi	r25, 0x05	; 5
        print("M>" );
    4f8c:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    4f90:	26 c0       	rjmp	.+76     	; 0x4fde <command_proc+0x11a>
    switch (code) {
    4f92:	c3 31       	cpi	r28, 0x13	; 19
    4f94:	c1 f1       	breq	.+112    	; 0x5006 <command_proc+0x142>
    4f96:	c4 31       	cpi	r28, 0x14	; 20
    4f98:	b9 f7       	brne	.-18     	; 0x4f88 <command_proc+0xc4>
            if (mousekey_param) {
    4f9a:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <mousekey_param>
    4f9e:	88 23       	and	r24, r24
    4fa0:	51 f1       	breq	.+84     	; 0x4ff6 <command_proc+0x132>
                mousekey_param = 0;
    4fa2:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <mousekey_param>
    4fa6:	0a c0       	rjmp	.+20     	; 0x4fbc <command_proc+0xf8>
    switch (code) {
    4fa8:	cb 34       	cpi	r28, 0x4B	; 75
    4faa:	09 f4       	brne	.+2      	; 0x4fae <command_proc+0xea>
    4fac:	ba c0       	rjmp	.+372    	; 0x5122 <command_proc+0x25e>
    4fae:	c8 f4       	brcc	.+50     	; 0x4fe2 <command_proc+0x11e>
    4fb0:	c9 32       	cpi	r28, 0x29	; 41
    4fb2:	99 f3       	breq	.-26     	; 0x4f9a <command_proc+0xd6>
    4fb4:	c8 33       	cpi	r28, 0x38	; 56
    4fb6:	41 f7       	brne	.-48     	; 0x4f88 <command_proc+0xc4>
            mousekey_console_help();
    4fb8:	0e 94 d5 23 	call	0x47aa	; 0x47aa <mousekey_console_help>
    if (mousekey_param) {
    4fbc:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <mousekey_param>
    4fc0:	88 23       	and	r24, r24
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <command_proc+0x102>
    4fc4:	c7 c0       	rjmp	.+398    	; 0x5154 <command_proc+0x290>
        xprintf("M%d> ", mousekey_param);
    4fc6:	1f 92       	push	r1
    4fc8:	8f 93       	push	r24
    4fca:	86 ec       	ldi	r24, 0xC6	; 198
    4fcc:	95 e0       	ldi	r25, 0x05	; 5
    4fce:	9f 93       	push	r25
    4fd0:	8f 93       	push	r24
    4fd2:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    4fd6:	0f 90       	pop	r0
    4fd8:	0f 90       	pop	r0
    4fda:	0f 90       	pop	r0
    4fdc:	0f 90       	pop	r0
    return true;
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	8f cf       	rjmp	.-226    	; 0x4f00 <command_proc+0x3c>
    switch (code) {
    4fe2:	c1 35       	cpi	r28, 0x51	; 81
    4fe4:	09 f4       	brne	.+2      	; 0x4fe8 <command_proc+0x124>
    4fe6:	97 c0       	rjmp	.+302    	; 0x5116 <command_proc+0x252>
    4fe8:	c2 35       	cpi	r28, 0x52	; 82
    4fea:	09 f4       	brne	.+2      	; 0x4fee <command_proc+0x12a>
    4fec:	8e c0       	rjmp	.+284    	; 0x510a <command_proc+0x246>
    4fee:	ce 34       	cpi	r28, 0x4E	; 78
    4ff0:	59 f6       	brne	.-106    	; 0x4f88 <command_proc+0xc4>
            mousekey_param_dec(mousekey_param, 10);
    4ff2:	6a e0       	ldi	r22, 0x0A	; 10
    4ff4:	91 c0       	rjmp	.+290    	; 0x5118 <command_proc+0x254>
                print("C> ");
    4ff6:	8b ed       	ldi	r24, 0xDB	; 219
    4ff8:	95 e0       	ldi	r25, 0x05	; 5
    4ffa:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
                command_state = CONSOLE;
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <command_state>
    5004:	7d cf       	rjmp	.-262    	; 0x4f00 <command_proc+0x3c>
    print("\n\t- Values -\n");
    5006:	85 eb       	ldi	r24, 0xB5	; 181
    5008:	95 e0       	ldi	r25, 0x05	; 5
    500a:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    500e:	83 ea       	ldi	r24, 0xA3	; 163
    5010:	95 e0       	ldi	r25, 0x05	; 5
    5012:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    5016:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    501a:	1f 92       	push	r1
    501c:	8f 93       	push	r24
    501e:	80 ea       	ldi	r24, 0xA0	; 160
    5020:	95 e0       	ldi	r25, 0x05	; 5
    5022:	9f 93       	push	r25
    5024:	8f 93       	push	r24
    5026:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    502a:	8e e9       	ldi	r24, 0x9E	; 158
    502c:	95 e0       	ldi	r25, 0x05	; 5
    502e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5032:	8c e8       	ldi	r24, 0x8C	; 140
    5034:	95 e0       	ldi	r25, 0x05	; 5
    5036:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    503a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    503e:	1f 92       	push	r1
    5040:	8f 93       	push	r24
    5042:	89 e8       	ldi	r24, 0x89	; 137
    5044:	95 e0       	ldi	r25, 0x05	; 5
    5046:	9f 93       	push	r25
    5048:	8f 93       	push	r24
    504a:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    504e:	87 e8       	ldi	r24, 0x87	; 135
    5050:	95 e0       	ldi	r25, 0x05	; 5
    5052:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5056:	88 e7       	ldi	r24, 0x78	; 120
    5058:	95 e0       	ldi	r25, 0x05	; 5
    505a:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    505e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    5062:	1f 92       	push	r1
    5064:	8f 93       	push	r24
    5066:	85 e7       	ldi	r24, 0x75	; 117
    5068:	95 e0       	ldi	r25, 0x05	; 5
    506a:	9f 93       	push	r25
    506c:	8f 93       	push	r24
    506e:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    5072:	83 e7       	ldi	r24, 0x73	; 115
    5074:	95 e0       	ldi	r25, 0x05	; 5
    5076:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    507a:	82 e6       	ldi	r24, 0x62	; 98
    507c:	95 e0       	ldi	r25, 0x05	; 5
    507e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    5082:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    5086:	1f 92       	push	r1
    5088:	8f 93       	push	r24
    508a:	8f e5       	ldi	r24, 0x5F	; 95
    508c:	95 e0       	ldi	r25, 0x05	; 5
    508e:	9f 93       	push	r25
    5090:	8f 93       	push	r24
    5092:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    5096:	8d e5       	ldi	r24, 0x5D	; 93
    5098:	95 e0       	ldi	r25, 0x05	; 5
    509a:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    509e:	88 e4       	ldi	r24, 0x48	; 72
    50a0:	95 e0       	ldi	r25, 0x05	; 5
    50a2:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    50a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    50aa:	1f 92       	push	r1
    50ac:	8f 93       	push	r24
    50ae:	85 e4       	ldi	r24, 0x45	; 69
    50b0:	95 e0       	ldi	r25, 0x05	; 5
    50b2:	9f 93       	push	r25
    50b4:	8f 93       	push	r24
    50b6:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    50ba:	83 e4       	ldi	r24, 0x43	; 67
    50bc:	95 e0       	ldi	r25, 0x05	; 5
    50be:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    50c2:	8c e2       	ldi	r24, 0x2C	; 44
    50c4:	95 e0       	ldi	r25, 0x05	; 5
    50c6:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    50ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    50ce:	1f 92       	push	r1
    50d0:	8f 93       	push	r24
    50d2:	89 e2       	ldi	r24, 0x29	; 41
    50d4:	95 e0       	ldi	r25, 0x05	; 5
    50d6:	9f 93       	push	r25
    50d8:	8f 93       	push	r24
    50da:	0e 94 88 06 	call	0xd10	; 0xd10 <__xprintf>
    50de:	87 e2       	ldi	r24, 0x27	; 39
    50e0:	95 e0       	ldi	r25, 0x05	; 5
    50e2:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    50e6:	8d b7       	in	r24, 0x3d	; 61
    50e8:	9e b7       	in	r25, 0x3e	; 62
    50ea:	48 96       	adiw	r24, 0x18	; 24
    50ec:	0f b6       	in	r0, 0x3f	; 63
    50ee:	f8 94       	cli
    50f0:	9e bf       	out	0x3e, r25	; 62
    50f2:	0f be       	out	0x3f, r0	; 63
    50f4:	8d bf       	out	0x3d, r24	; 61
    50f6:	62 cf       	rjmp	.-316    	; 0x4fbc <command_proc+0xf8>
            mousekey_param = numkey2num(code);
    50f8:	ce 51       	subi	r28, 0x1E	; 30
    50fa:	ec 2f       	mov	r30, r28
    50fc:	f0 e0       	ldi	r31, 0x00	; 0
    50fe:	e7 5d       	subi	r30, 0xD7	; 215
    5100:	fe 4f       	sbci	r31, 0xFE	; 254
    5102:	80 81       	ld	r24, Z
    5104:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <mousekey_param>
    5108:	59 cf       	rjmp	.-334    	; 0x4fbc <command_proc+0xf8>
            mousekey_param_inc(mousekey_param, 1);
    510a:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_inc(mousekey_param, 10);
    510c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <mousekey_param>
    5110:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <mousekey_param_inc>
    5114:	53 cf       	rjmp	.-346    	; 0x4fbc <command_proc+0xf8>
            mousekey_param_dec(mousekey_param, 1);
    5116:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    5118:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <mousekey_param>
    511c:	0e 94 90 24 	call	0x4920	; 0x4920 <mousekey_param_dec>
    5120:	4d cf       	rjmp	.-358    	; 0x4fbc <command_proc+0xf8>
            mousekey_param_inc(mousekey_param, 10);
    5122:	6a e0       	ldi	r22, 0x0A	; 10
    5124:	f3 cf       	rjmp	.-26     	; 0x510c <command_proc+0x248>
            mk_delay = MOUSEKEY_DELAY/10;
    5126:	8e e1       	ldi	r24, 0x1E	; 30
    5128:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    512c:	82 e3       	ldi	r24, 0x32	; 50
    512e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5132:	8a e0       	ldi	r24, 0x0A	; 10
    5134:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5138:	84 e1       	ldi	r24, 0x14	; 20
    513a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    513e:	88 e0       	ldi	r24, 0x08	; 8
    5140:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5144:	88 e2       	ldi	r24, 0x28	; 40
    5146:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mk_wheel_time_to_max>
            print("set default\n");
    514a:	8e ec       	ldi	r24, 0xCE	; 206
    514c:	95 e0       	ldi	r25, 0x05	; 5
    514e:	0e 94 ef 05 	call	0xbde	; 0xbde <xputs>
    5152:	34 cf       	rjmp	.-408    	; 0x4fbc <command_proc+0xf8>
        print("M>" );
    5154:	83 ec       	ldi	r24, 0xC3	; 195
    5156:	95 e0       	ldi	r25, 0x05	; 5
    5158:	19 cf       	rjmp	.-462    	; 0x4f8c <command_proc+0xc8>

0000515a <__fixsfsi>:
    515a:	0e 94 b4 28 	call	0x5168	; 0x5168 <__fixunssfsi>
    515e:	68 94       	set
    5160:	b1 11       	cpse	r27, r1
    5162:	0c 94 43 29 	jmp	0x5286	; 0x5286 <__fp_szero>
    5166:	08 95       	ret

00005168 <__fixunssfsi>:
    5168:	0e 94 28 29 	call	0x5250	; 0x5250 <__fp_splitA>
    516c:	88 f0       	brcs	.+34     	; 0x5190 <__fixunssfsi+0x28>
    516e:	9f 57       	subi	r25, 0x7F	; 127
    5170:	98 f0       	brcs	.+38     	; 0x5198 <__fixunssfsi+0x30>
    5172:	b9 2f       	mov	r27, r25
    5174:	99 27       	eor	r25, r25
    5176:	b7 51       	subi	r27, 0x17	; 23
    5178:	b0 f0       	brcs	.+44     	; 0x51a6 <__fixunssfsi+0x3e>
    517a:	e1 f0       	breq	.+56     	; 0x51b4 <__fixunssfsi+0x4c>
    517c:	66 0f       	add	r22, r22
    517e:	77 1f       	adc	r23, r23
    5180:	88 1f       	adc	r24, r24
    5182:	99 1f       	adc	r25, r25
    5184:	1a f0       	brmi	.+6      	; 0x518c <__fixunssfsi+0x24>
    5186:	ba 95       	dec	r27
    5188:	c9 f7       	brne	.-14     	; 0x517c <__fixunssfsi+0x14>
    518a:	14 c0       	rjmp	.+40     	; 0x51b4 <__fixunssfsi+0x4c>
    518c:	b1 30       	cpi	r27, 0x01	; 1
    518e:	91 f0       	breq	.+36     	; 0x51b4 <__fixunssfsi+0x4c>
    5190:	0e 94 42 29 	call	0x5284	; 0x5284 <__fp_zero>
    5194:	b1 e0       	ldi	r27, 0x01	; 1
    5196:	08 95       	ret
    5198:	0c 94 42 29 	jmp	0x5284	; 0x5284 <__fp_zero>
    519c:	67 2f       	mov	r22, r23
    519e:	78 2f       	mov	r23, r24
    51a0:	88 27       	eor	r24, r24
    51a2:	b8 5f       	subi	r27, 0xF8	; 248
    51a4:	39 f0       	breq	.+14     	; 0x51b4 <__fixunssfsi+0x4c>
    51a6:	b9 3f       	cpi	r27, 0xF9	; 249
    51a8:	cc f3       	brlt	.-14     	; 0x519c <__fixunssfsi+0x34>
    51aa:	86 95       	lsr	r24
    51ac:	77 95       	ror	r23
    51ae:	67 95       	ror	r22
    51b0:	b3 95       	inc	r27
    51b2:	d9 f7       	brne	.-10     	; 0x51aa <__fixunssfsi+0x42>
    51b4:	3e f4       	brtc	.+14     	; 0x51c4 <__fixunssfsi+0x5c>
    51b6:	90 95       	com	r25
    51b8:	80 95       	com	r24
    51ba:	70 95       	com	r23
    51bc:	61 95       	neg	r22
    51be:	7f 4f       	sbci	r23, 0xFF	; 255
    51c0:	8f 4f       	sbci	r24, 0xFF	; 255
    51c2:	9f 4f       	sbci	r25, 0xFF	; 255
    51c4:	08 95       	ret

000051c6 <__floatunsisf>:
    51c6:	e8 94       	clt
    51c8:	09 c0       	rjmp	.+18     	; 0x51dc <__floatsisf+0x12>

000051ca <__floatsisf>:
    51ca:	97 fb       	bst	r25, 7
    51cc:	3e f4       	brtc	.+14     	; 0x51dc <__floatsisf+0x12>
    51ce:	90 95       	com	r25
    51d0:	80 95       	com	r24
    51d2:	70 95       	com	r23
    51d4:	61 95       	neg	r22
    51d6:	7f 4f       	sbci	r23, 0xFF	; 255
    51d8:	8f 4f       	sbci	r24, 0xFF	; 255
    51da:	9f 4f       	sbci	r25, 0xFF	; 255
    51dc:	99 23       	and	r25, r25
    51de:	a9 f0       	breq	.+42     	; 0x520a <__floatsisf+0x40>
    51e0:	f9 2f       	mov	r31, r25
    51e2:	96 e9       	ldi	r25, 0x96	; 150
    51e4:	bb 27       	eor	r27, r27
    51e6:	93 95       	inc	r25
    51e8:	f6 95       	lsr	r31
    51ea:	87 95       	ror	r24
    51ec:	77 95       	ror	r23
    51ee:	67 95       	ror	r22
    51f0:	b7 95       	ror	r27
    51f2:	f1 11       	cpse	r31, r1
    51f4:	f8 cf       	rjmp	.-16     	; 0x51e6 <__floatsisf+0x1c>
    51f6:	fa f4       	brpl	.+62     	; 0x5236 <__floatsisf+0x6c>
    51f8:	bb 0f       	add	r27, r27
    51fa:	11 f4       	brne	.+4      	; 0x5200 <__floatsisf+0x36>
    51fc:	60 ff       	sbrs	r22, 0
    51fe:	1b c0       	rjmp	.+54     	; 0x5236 <__floatsisf+0x6c>
    5200:	6f 5f       	subi	r22, 0xFF	; 255
    5202:	7f 4f       	sbci	r23, 0xFF	; 255
    5204:	8f 4f       	sbci	r24, 0xFF	; 255
    5206:	9f 4f       	sbci	r25, 0xFF	; 255
    5208:	16 c0       	rjmp	.+44     	; 0x5236 <__floatsisf+0x6c>
    520a:	88 23       	and	r24, r24
    520c:	11 f0       	breq	.+4      	; 0x5212 <__floatsisf+0x48>
    520e:	96 e9       	ldi	r25, 0x96	; 150
    5210:	11 c0       	rjmp	.+34     	; 0x5234 <__floatsisf+0x6a>
    5212:	77 23       	and	r23, r23
    5214:	21 f0       	breq	.+8      	; 0x521e <__floatsisf+0x54>
    5216:	9e e8       	ldi	r25, 0x8E	; 142
    5218:	87 2f       	mov	r24, r23
    521a:	76 2f       	mov	r23, r22
    521c:	05 c0       	rjmp	.+10     	; 0x5228 <__floatsisf+0x5e>
    521e:	66 23       	and	r22, r22
    5220:	71 f0       	breq	.+28     	; 0x523e <__floatsisf+0x74>
    5222:	96 e8       	ldi	r25, 0x86	; 134
    5224:	86 2f       	mov	r24, r22
    5226:	70 e0       	ldi	r23, 0x00	; 0
    5228:	60 e0       	ldi	r22, 0x00	; 0
    522a:	2a f0       	brmi	.+10     	; 0x5236 <__floatsisf+0x6c>
    522c:	9a 95       	dec	r25
    522e:	66 0f       	add	r22, r22
    5230:	77 1f       	adc	r23, r23
    5232:	88 1f       	adc	r24, r24
    5234:	da f7       	brpl	.-10     	; 0x522c <__floatsisf+0x62>
    5236:	88 0f       	add	r24, r24
    5238:	96 95       	lsr	r25
    523a:	87 95       	ror	r24
    523c:	97 f9       	bld	r25, 7
    523e:	08 95       	ret

00005240 <__fp_split3>:
    5240:	57 fd       	sbrc	r21, 7
    5242:	90 58       	subi	r25, 0x80	; 128
    5244:	44 0f       	add	r20, r20
    5246:	55 1f       	adc	r21, r21
    5248:	59 f0       	breq	.+22     	; 0x5260 <__fp_splitA+0x10>
    524a:	5f 3f       	cpi	r21, 0xFF	; 255
    524c:	71 f0       	breq	.+28     	; 0x526a <__fp_splitA+0x1a>
    524e:	47 95       	ror	r20

00005250 <__fp_splitA>:
    5250:	88 0f       	add	r24, r24
    5252:	97 fb       	bst	r25, 7
    5254:	99 1f       	adc	r25, r25
    5256:	61 f0       	breq	.+24     	; 0x5270 <__fp_splitA+0x20>
    5258:	9f 3f       	cpi	r25, 0xFF	; 255
    525a:	79 f0       	breq	.+30     	; 0x527a <__fp_splitA+0x2a>
    525c:	87 95       	ror	r24
    525e:	08 95       	ret
    5260:	12 16       	cp	r1, r18
    5262:	13 06       	cpc	r1, r19
    5264:	14 06       	cpc	r1, r20
    5266:	55 1f       	adc	r21, r21
    5268:	f2 cf       	rjmp	.-28     	; 0x524e <__fp_split3+0xe>
    526a:	46 95       	lsr	r20
    526c:	f1 df       	rcall	.-30     	; 0x5250 <__fp_splitA>
    526e:	08 c0       	rjmp	.+16     	; 0x5280 <__fp_splitA+0x30>
    5270:	16 16       	cp	r1, r22
    5272:	17 06       	cpc	r1, r23
    5274:	18 06       	cpc	r1, r24
    5276:	99 1f       	adc	r25, r25
    5278:	f1 cf       	rjmp	.-30     	; 0x525c <__fp_splitA+0xc>
    527a:	86 95       	lsr	r24
    527c:	71 05       	cpc	r23, r1
    527e:	61 05       	cpc	r22, r1
    5280:	08 94       	sec
    5282:	08 95       	ret

00005284 <__fp_zero>:
    5284:	e8 94       	clt

00005286 <__fp_szero>:
    5286:	bb 27       	eor	r27, r27
    5288:	66 27       	eor	r22, r22
    528a:	77 27       	eor	r23, r23
    528c:	cb 01       	movw	r24, r22
    528e:	97 f9       	bld	r25, 7
    5290:	08 95       	ret

00005292 <__mulsf3>:
    5292:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <__mulsf3x>
    5296:	0c 94 cd 29 	jmp	0x539a	; 0x539a <__fp_round>
    529a:	0e 94 bf 29 	call	0x537e	; 0x537e <__fp_pscA>
    529e:	38 f0       	brcs	.+14     	; 0x52ae <__mulsf3+0x1c>
    52a0:	0e 94 c6 29 	call	0x538c	; 0x538c <__fp_pscB>
    52a4:	20 f0       	brcs	.+8      	; 0x52ae <__mulsf3+0x1c>
    52a6:	95 23       	and	r25, r21
    52a8:	11 f0       	breq	.+4      	; 0x52ae <__mulsf3+0x1c>
    52aa:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__fp_inf>
    52ae:	0c 94 bc 29 	jmp	0x5378	; 0x5378 <__fp_nan>
    52b2:	11 24       	eor	r1, r1
    52b4:	0c 94 43 29 	jmp	0x5286	; 0x5286 <__fp_szero>

000052b8 <__mulsf3x>:
    52b8:	0e 94 20 29 	call	0x5240	; 0x5240 <__fp_split3>
    52bc:	70 f3       	brcs	.-36     	; 0x529a <__mulsf3+0x8>

000052be <__mulsf3_pse>:
    52be:	95 9f       	mul	r25, r21
    52c0:	c1 f3       	breq	.-16     	; 0x52b2 <__mulsf3+0x20>
    52c2:	95 0f       	add	r25, r21
    52c4:	50 e0       	ldi	r21, 0x00	; 0
    52c6:	55 1f       	adc	r21, r21
    52c8:	62 9f       	mul	r22, r18
    52ca:	f0 01       	movw	r30, r0
    52cc:	72 9f       	mul	r23, r18
    52ce:	bb 27       	eor	r27, r27
    52d0:	f0 0d       	add	r31, r0
    52d2:	b1 1d       	adc	r27, r1
    52d4:	63 9f       	mul	r22, r19
    52d6:	aa 27       	eor	r26, r26
    52d8:	f0 0d       	add	r31, r0
    52da:	b1 1d       	adc	r27, r1
    52dc:	aa 1f       	adc	r26, r26
    52de:	64 9f       	mul	r22, r20
    52e0:	66 27       	eor	r22, r22
    52e2:	b0 0d       	add	r27, r0
    52e4:	a1 1d       	adc	r26, r1
    52e6:	66 1f       	adc	r22, r22
    52e8:	82 9f       	mul	r24, r18
    52ea:	22 27       	eor	r18, r18
    52ec:	b0 0d       	add	r27, r0
    52ee:	a1 1d       	adc	r26, r1
    52f0:	62 1f       	adc	r22, r18
    52f2:	73 9f       	mul	r23, r19
    52f4:	b0 0d       	add	r27, r0
    52f6:	a1 1d       	adc	r26, r1
    52f8:	62 1f       	adc	r22, r18
    52fa:	83 9f       	mul	r24, r19
    52fc:	a0 0d       	add	r26, r0
    52fe:	61 1d       	adc	r22, r1
    5300:	22 1f       	adc	r18, r18
    5302:	74 9f       	mul	r23, r20
    5304:	33 27       	eor	r19, r19
    5306:	a0 0d       	add	r26, r0
    5308:	61 1d       	adc	r22, r1
    530a:	23 1f       	adc	r18, r19
    530c:	84 9f       	mul	r24, r20
    530e:	60 0d       	add	r22, r0
    5310:	21 1d       	adc	r18, r1
    5312:	82 2f       	mov	r24, r18
    5314:	76 2f       	mov	r23, r22
    5316:	6a 2f       	mov	r22, r26
    5318:	11 24       	eor	r1, r1
    531a:	9f 57       	subi	r25, 0x7F	; 127
    531c:	50 40       	sbci	r21, 0x00	; 0
    531e:	9a f0       	brmi	.+38     	; 0x5346 <__mulsf3_pse+0x88>
    5320:	f1 f0       	breq	.+60     	; 0x535e <__mulsf3_pse+0xa0>
    5322:	88 23       	and	r24, r24
    5324:	4a f0       	brmi	.+18     	; 0x5338 <__mulsf3_pse+0x7a>
    5326:	ee 0f       	add	r30, r30
    5328:	ff 1f       	adc	r31, r31
    532a:	bb 1f       	adc	r27, r27
    532c:	66 1f       	adc	r22, r22
    532e:	77 1f       	adc	r23, r23
    5330:	88 1f       	adc	r24, r24
    5332:	91 50       	subi	r25, 0x01	; 1
    5334:	50 40       	sbci	r21, 0x00	; 0
    5336:	a9 f7       	brne	.-22     	; 0x5322 <__mulsf3_pse+0x64>
    5338:	9e 3f       	cpi	r25, 0xFE	; 254
    533a:	51 05       	cpc	r21, r1
    533c:	80 f0       	brcs	.+32     	; 0x535e <__mulsf3_pse+0xa0>
    533e:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__fp_inf>
    5342:	0c 94 43 29 	jmp	0x5286	; 0x5286 <__fp_szero>
    5346:	5f 3f       	cpi	r21, 0xFF	; 255
    5348:	e4 f3       	brlt	.-8      	; 0x5342 <__mulsf3_pse+0x84>
    534a:	98 3e       	cpi	r25, 0xE8	; 232
    534c:	d4 f3       	brlt	.-12     	; 0x5342 <__mulsf3_pse+0x84>
    534e:	86 95       	lsr	r24
    5350:	77 95       	ror	r23
    5352:	67 95       	ror	r22
    5354:	b7 95       	ror	r27
    5356:	f7 95       	ror	r31
    5358:	e7 95       	ror	r30
    535a:	9f 5f       	subi	r25, 0xFF	; 255
    535c:	c1 f7       	brne	.-16     	; 0x534e <__mulsf3_pse+0x90>
    535e:	fe 2b       	or	r31, r30
    5360:	88 0f       	add	r24, r24
    5362:	91 1d       	adc	r25, r1
    5364:	96 95       	lsr	r25
    5366:	87 95       	ror	r24
    5368:	97 f9       	bld	r25, 7
    536a:	08 95       	ret

0000536c <__fp_inf>:
    536c:	97 f9       	bld	r25, 7
    536e:	9f 67       	ori	r25, 0x7F	; 127
    5370:	80 e8       	ldi	r24, 0x80	; 128
    5372:	70 e0       	ldi	r23, 0x00	; 0
    5374:	60 e0       	ldi	r22, 0x00	; 0
    5376:	08 95       	ret

00005378 <__fp_nan>:
    5378:	9f ef       	ldi	r25, 0xFF	; 255
    537a:	80 ec       	ldi	r24, 0xC0	; 192
    537c:	08 95       	ret

0000537e <__fp_pscA>:
    537e:	00 24       	eor	r0, r0
    5380:	0a 94       	dec	r0
    5382:	16 16       	cp	r1, r22
    5384:	17 06       	cpc	r1, r23
    5386:	18 06       	cpc	r1, r24
    5388:	09 06       	cpc	r0, r25
    538a:	08 95       	ret

0000538c <__fp_pscB>:
    538c:	00 24       	eor	r0, r0
    538e:	0a 94       	dec	r0
    5390:	12 16       	cp	r1, r18
    5392:	13 06       	cpc	r1, r19
    5394:	14 06       	cpc	r1, r20
    5396:	05 06       	cpc	r0, r21
    5398:	08 95       	ret

0000539a <__fp_round>:
    539a:	09 2e       	mov	r0, r25
    539c:	03 94       	inc	r0
    539e:	00 0c       	add	r0, r0
    53a0:	11 f4       	brne	.+4      	; 0x53a6 <__fp_round+0xc>
    53a2:	88 23       	and	r24, r24
    53a4:	52 f0       	brmi	.+20     	; 0x53ba <__fp_round+0x20>
    53a6:	bb 0f       	add	r27, r27
    53a8:	40 f4       	brcc	.+16     	; 0x53ba <__fp_round+0x20>
    53aa:	bf 2b       	or	r27, r31
    53ac:	11 f4       	brne	.+4      	; 0x53b2 <__fp_round+0x18>
    53ae:	60 ff       	sbrs	r22, 0
    53b0:	04 c0       	rjmp	.+8      	; 0x53ba <__fp_round+0x20>
    53b2:	6f 5f       	subi	r22, 0xFF	; 255
    53b4:	7f 4f       	sbci	r23, 0xFF	; 255
    53b6:	8f 4f       	sbci	r24, 0xFF	; 255
    53b8:	9f 4f       	sbci	r25, 0xFF	; 255
    53ba:	08 95       	ret

000053bc <__udivmodqi4>:
    53bc:	99 1b       	sub	r25, r25
    53be:	79 e0       	ldi	r23, 0x09	; 9
    53c0:	04 c0       	rjmp	.+8      	; 0x53ca <__udivmodqi4_ep>

000053c2 <__udivmodqi4_loop>:
    53c2:	99 1f       	adc	r25, r25
    53c4:	96 17       	cp	r25, r22
    53c6:	08 f0       	brcs	.+2      	; 0x53ca <__udivmodqi4_ep>
    53c8:	96 1b       	sub	r25, r22

000053ca <__udivmodqi4_ep>:
    53ca:	88 1f       	adc	r24, r24
    53cc:	7a 95       	dec	r23
    53ce:	c9 f7       	brne	.-14     	; 0x53c2 <__udivmodqi4_loop>
    53d0:	80 95       	com	r24
    53d2:	08 95       	ret

000053d4 <__divmodhi4>:
    53d4:	97 fb       	bst	r25, 7
    53d6:	07 2e       	mov	r0, r23
    53d8:	16 f4       	brtc	.+4      	; 0x53de <__divmodhi4+0xa>
    53da:	00 94       	com	r0
    53dc:	07 d0       	rcall	.+14     	; 0x53ec <__divmodhi4_neg1>
    53de:	77 fd       	sbrc	r23, 7
    53e0:	09 d0       	rcall	.+18     	; 0x53f4 <__divmodhi4_neg2>
    53e2:	0e 94 04 2a 	call	0x5408	; 0x5408 <__udivmodhi4>
    53e6:	07 fc       	sbrc	r0, 7
    53e8:	05 d0       	rcall	.+10     	; 0x53f4 <__divmodhi4_neg2>
    53ea:	3e f4       	brtc	.+14     	; 0x53fa <__divmodhi4_exit>

000053ec <__divmodhi4_neg1>:
    53ec:	90 95       	com	r25
    53ee:	81 95       	neg	r24
    53f0:	9f 4f       	sbci	r25, 0xFF	; 255
    53f2:	08 95       	ret

000053f4 <__divmodhi4_neg2>:
    53f4:	70 95       	com	r23
    53f6:	61 95       	neg	r22
    53f8:	7f 4f       	sbci	r23, 0xFF	; 255

000053fa <__divmodhi4_exit>:
    53fa:	08 95       	ret

000053fc <__tablejump2__>:
    53fc:	ee 0f       	add	r30, r30
    53fe:	ff 1f       	adc	r31, r31
    5400:	05 90       	lpm	r0, Z+
    5402:	f4 91       	lpm	r31, Z
    5404:	e0 2d       	mov	r30, r0
    5406:	09 94       	ijmp

00005408 <__udivmodhi4>:
    5408:	aa 1b       	sub	r26, r26
    540a:	bb 1b       	sub	r27, r27
    540c:	51 e1       	ldi	r21, 0x11	; 17
    540e:	07 c0       	rjmp	.+14     	; 0x541e <__udivmodhi4_ep>

00005410 <__udivmodhi4_loop>:
    5410:	aa 1f       	adc	r26, r26
    5412:	bb 1f       	adc	r27, r27
    5414:	a6 17       	cp	r26, r22
    5416:	b7 07       	cpc	r27, r23
    5418:	10 f0       	brcs	.+4      	; 0x541e <__udivmodhi4_ep>
    541a:	a6 1b       	sub	r26, r22
    541c:	b7 0b       	sbc	r27, r23

0000541e <__udivmodhi4_ep>:
    541e:	88 1f       	adc	r24, r24
    5420:	99 1f       	adc	r25, r25
    5422:	5a 95       	dec	r21
    5424:	a9 f7       	brne	.-22     	; 0x5410 <__udivmodhi4_loop>
    5426:	80 95       	com	r24
    5428:	90 95       	com	r25
    542a:	bc 01       	movw	r22, r24
    542c:	cd 01       	movw	r24, r26
    542e:	08 95       	ret

00005430 <eeprom_read_byte>:
    5430:	f9 99       	sbic	0x1f, 1	; 31
    5432:	fe cf       	rjmp	.-4      	; 0x5430 <eeprom_read_byte>
    5434:	92 bd       	out	0x22, r25	; 34
    5436:	81 bd       	out	0x21, r24	; 33
    5438:	f8 9a       	sbi	0x1f, 0	; 31
    543a:	99 27       	eor	r25, r25
    543c:	80 b5       	in	r24, 0x20	; 32
    543e:	08 95       	ret

00005440 <eeprom_read_word>:
    5440:	a8 e1       	ldi	r26, 0x18	; 24
    5442:	b0 e0       	ldi	r27, 0x00	; 0
    5444:	42 e0       	ldi	r20, 0x02	; 2
    5446:	50 e0       	ldi	r21, 0x00	; 0
    5448:	0c 94 3b 2a 	jmp	0x5476	; 0x5476 <eeprom_read_blraw>

0000544c <eeprom_write_byte>:
    544c:	26 2f       	mov	r18, r22

0000544e <eeprom_write_r18>:
    544e:	f9 99       	sbic	0x1f, 1	; 31
    5450:	fe cf       	rjmp	.-4      	; 0x544e <eeprom_write_r18>
    5452:	1f ba       	out	0x1f, r1	; 31
    5454:	92 bd       	out	0x22, r25	; 34
    5456:	81 bd       	out	0x21, r24	; 33
    5458:	20 bd       	out	0x20, r18	; 32
    545a:	0f b6       	in	r0, 0x3f	; 63
    545c:	f8 94       	cli
    545e:	fa 9a       	sbi	0x1f, 2	; 31
    5460:	f9 9a       	sbi	0x1f, 1	; 31
    5462:	0f be       	out	0x3f, r0	; 63
    5464:	01 96       	adiw	r24, 0x01	; 1
    5466:	08 95       	ret

00005468 <eeprom_write_word>:
    5468:	0e 94 26 2a 	call	0x544c	; 0x544c <eeprom_write_byte>
    546c:	27 2f       	mov	r18, r23
    546e:	0c 94 27 2a 	jmp	0x544e	; 0x544e <eeprom_write_r18>

00005472 <eeprom_read_block>:
    5472:	dc 01       	movw	r26, r24
    5474:	cb 01       	movw	r24, r22

00005476 <eeprom_read_blraw>:
    5476:	fc 01       	movw	r30, r24
    5478:	f9 99       	sbic	0x1f, 1	; 31
    547a:	fe cf       	rjmp	.-4      	; 0x5478 <eeprom_read_blraw+0x2>
    547c:	06 c0       	rjmp	.+12     	; 0x548a <eeprom_read_blraw+0x14>
    547e:	f2 bd       	out	0x22, r31	; 34
    5480:	e1 bd       	out	0x21, r30	; 33
    5482:	f8 9a       	sbi	0x1f, 0	; 31
    5484:	31 96       	adiw	r30, 0x01	; 1
    5486:	00 b4       	in	r0, 0x20	; 32
    5488:	0d 92       	st	X+, r0
    548a:	41 50       	subi	r20, 0x01	; 1
    548c:	50 40       	sbci	r21, 0x00	; 0
    548e:	b8 f7       	brcc	.-18     	; 0x547e <eeprom_read_blraw+0x8>
    5490:	08 95       	ret

00005492 <_exit>:
    5492:	f8 94       	cli

00005494 <__stop_program>:
    5494:	ff cf       	rjmp	.-2      	; 0x5494 <__stop_program>
