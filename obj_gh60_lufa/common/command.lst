   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB21:
  14               		.file 1 "../../tmk_core/common/command.c"
   1:../../tmk_core/common/command.c **** /*
   2:../../tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/command.c **** 
   4:../../tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/command.c **** (at your option) any later version.
   8:../../tmk_core/common/command.c **** 
   9:../../tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/command.c **** GNU General Public License for more details.
  13:../../tmk_core/common/command.c **** 
  14:../../tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/command.c **** */
  17:../../tmk_core/common/command.c **** #include <stdint.h>
  18:../../tmk_core/common/command.c **** #include <stdbool.h>
  19:../../tmk_core/common/command.c **** #include "wait.h"
  20:../../tmk_core/common/command.c **** #include "keycode.h"
  21:../../tmk_core/common/command.c **** #include "host.h"
  22:../../tmk_core/common/command.c **** #include "keymap.h"
  23:../../tmk_core/common/command.c **** #include "print.h"
  24:../../tmk_core/common/command.c **** #include "debug.h"
  25:../../tmk_core/common/command.c **** #include "util.h"
  26:../../tmk_core/common/command.c **** #include "timer.h"
  27:../../tmk_core/common/command.c **** #include "keyboard.h"
  28:../../tmk_core/common/command.c **** #include "bootloader.h"
  29:../../tmk_core/common/command.c **** #include "action_layer.h"
  30:../../tmk_core/common/command.c **** #include "action_util.h"
  31:../../tmk_core/common/command.c **** #include "eeconfig.h"
  32:../../tmk_core/common/command.c **** #include "sleep_led.h"
  33:../../tmk_core/common/command.c **** #include "led.h"
  34:../../tmk_core/common/command.c **** #include "command.h"
  35:../../tmk_core/common/command.c **** #include "backlight.h"
  36:../../tmk_core/common/command.c **** 
  37:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../tmk_core/common/command.c **** #include "mousekey.h"
  39:../../tmk_core/common/command.c **** #endif
  40:../../tmk_core/common/command.c **** 
  41:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../tmk_core/common/command.c **** #   include "usb_keyboard.h"
  43:../../tmk_core/common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../tmk_core/common/command.c **** #       include "usb_extra.h"
  45:../../tmk_core/common/command.c **** #   endif
  46:../../tmk_core/common/command.c **** #endif
  47:../../tmk_core/common/command.c **** 
  48:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../tmk_core/common/command.c **** #   include "usbdrv.h"
  50:../../tmk_core/common/command.c **** #endif
  51:../../tmk_core/common/command.c **** 
  52:../../tmk_core/common/command.c **** 
  53:../../tmk_core/common/command.c **** static bool command_common(uint8_t code);
  54:../../tmk_core/common/command.c **** static void command_common_help(void);
  55:../../tmk_core/common/command.c **** static bool command_console(uint8_t code);
  56:../../tmk_core/common/command.c **** static void command_console_help(void);
  57:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../tmk_core/common/command.c **** static void mousekey_console_help(void);
  60:../../tmk_core/common/command.c **** #endif
  61:../../tmk_core/common/command.c **** 
  62:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  64:../../tmk_core/common/command.c **** 
  65:../../tmk_core/common/command.c **** 
  66:../../tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  67:../../tmk_core/common/command.c **** 
  68:../../tmk_core/common/command.c **** 
  69:../../tmk_core/common/command.c **** bool command_proc(uint8_t code)
  70:../../tmk_core/common/command.c **** {
  71:../../tmk_core/common/command.c ****     switch (command_state) {
  72:../../tmk_core/common/command.c ****         case ONESHOT:
  73:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
  74:../../tmk_core/common/command.c ****                 return false;
  75:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  76:../../tmk_core/common/command.c ****             break;
  77:../../tmk_core/common/command.c ****         case CONSOLE:
  78:../../tmk_core/common/command.c ****             if (IS_COMMAND())
  79:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  80:../../tmk_core/common/command.c ****             else
  81:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  82:../../tmk_core/common/command.c ****             break;
  83:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  84:../../tmk_core/common/command.c ****         case MOUSEKEY:
  85:../../tmk_core/common/command.c ****             mousekey_console(code);
  86:../../tmk_core/common/command.c ****             break;
  87:../../tmk_core/common/command.c **** #endif
  88:../../tmk_core/common/command.c ****         default:
  89:../../tmk_core/common/command.c ****             command_state = ONESHOT;
  90:../../tmk_core/common/command.c ****             return false;
  91:../../tmk_core/common/command.c ****     }
  92:../../tmk_core/common/command.c ****     return true;
  93:../../tmk_core/common/command.c **** }
  94:../../tmk_core/common/command.c **** 
  95:../../tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  96:../../tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  97:../../tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  98:../../tmk_core/common/command.c **** bool command_extra(uint8_t code)
  99:../../tmk_core/common/command.c **** {
 100:../../tmk_core/common/command.c ****     (void)code;
 101:../../tmk_core/common/command.c ****     return false;
 102:../../tmk_core/common/command.c **** }
 103:../../tmk_core/common/command.c **** 
 104:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 105:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 106:../../tmk_core/common/command.c **** {
 107:../../tmk_core/common/command.c ****     (void)code;
 108:../../tmk_core/common/command.c ****     return false;
 109:../../tmk_core/common/command.c **** }
 110:../../tmk_core/common/command.c **** 
 111:../../tmk_core/common/command.c **** 
 112:../../tmk_core/common/command.c **** /***********************************************************
 113:../../tmk_core/common/command.c ****  * Command common
 114:../../tmk_core/common/command.c ****  ***********************************************************/
 115:../../tmk_core/common/command.c **** static void command_common_help(void)
 116:../../tmk_core/common/command.c **** {
 117:../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 118:../../tmk_core/common/command.c ****           "d:	debug\n"
 119:../../tmk_core/common/command.c ****           "x:	debug matrix\n"
 120:../../tmk_core/common/command.c ****           "k:	debug keyboard\n"
 121:../../tmk_core/common/command.c ****           "m:	debug mouse\n"
 122:../../tmk_core/common/command.c ****           "v:	version\n"
 123:../../tmk_core/common/command.c ****           "s:	status\n"
 124:../../tmk_core/common/command.c ****           "c:	console mode\n"
 125:../../tmk_core/common/command.c ****           "0-4:	layer0-4(F10-F4)\n"
 126:../../tmk_core/common/command.c ****           "Paus:	bootloader\n"
 127:../../tmk_core/common/command.c **** 
 128:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 129:../../tmk_core/common/command.c ****           "Caps:	Lock\n"
 130:../../tmk_core/common/command.c **** #endif
 131:../../tmk_core/common/command.c **** 
 132:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 133:../../tmk_core/common/command.c ****           "e:	eeprom\n"
 134:../../tmk_core/common/command.c **** #endif
 135:../../tmk_core/common/command.c **** 
 136:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 137:../../tmk_core/common/command.c ****           "n:	NKRO\n"
 138:../../tmk_core/common/command.c **** #endif
 139:../../tmk_core/common/command.c **** 
 140:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 141:../../tmk_core/common/command.c ****           "z:	sleep LED test\n"
 142:../../tmk_core/common/command.c **** #endif
 143:../../tmk_core/common/command.c ****     );
 144:../../tmk_core/common/command.c **** }
 145:../../tmk_core/common/command.c **** 
 146:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 147:../../tmk_core/common/command.c **** static void print_eeconfig(void)
 148:../../tmk_core/common/command.c **** {
 149:../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 150:../../tmk_core/common/command.c **** 
 151:../../tmk_core/common/command.c ****     debug_config_t dc;
 152:../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 153:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 154:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 155:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 156:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 157:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 158:../../tmk_core/common/command.c **** 
 159:../../tmk_core/common/command.c ****     keymap_config_t kc;
 160:../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 161:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 162:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 163:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 164:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 165:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 166:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 167:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 168:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 169:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 170:../../tmk_core/common/command.c **** 
 171:../../tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 172:../../tmk_core/common/command.c ****     backlight_config_t bc;
 173:../../tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 174:../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 175:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 176:../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 177:../../tmk_core/common/command.c **** #endif
 178:../../tmk_core/common/command.c **** }
 179:../../tmk_core/common/command.c **** #endif
 180:../../tmk_core/common/command.c **** 
 181:../../tmk_core/common/command.c **** static bool command_common(uint8_t code)
 182:../../tmk_core/common/command.c **** {
 183:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 184:../../tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 185:../../tmk_core/common/command.c **** #endif
 186:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 187:../../tmk_core/common/command.c ****     static bool sleep_led_test = false;
 188:../../tmk_core/common/command.c **** #endif
 189:../../tmk_core/common/command.c ****     switch (code) {
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 191:../../tmk_core/common/command.c ****         case KC_Z:
 192:../../tmk_core/common/command.c ****             // test breathing sleep LED
 193:../../tmk_core/common/command.c ****             print("Sleep LED test\n");
 194:../../tmk_core/common/command.c ****             if (sleep_led_test) {
 195:../../tmk_core/common/command.c ****                 sleep_led_disable();
 196:../../tmk_core/common/command.c ****                 led_set(host_keyboard_leds());
 197:../../tmk_core/common/command.c ****             } else {
 198:../../tmk_core/common/command.c ****                 sleep_led_enable();
 199:../../tmk_core/common/command.c ****             }
 200:../../tmk_core/common/command.c ****             sleep_led_test = !sleep_led_test;
 201:../../tmk_core/common/command.c ****             break;
 202:../../tmk_core/common/command.c **** #endif
 203:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 204:../../tmk_core/common/command.c ****         case KC_E:
 205:../../tmk_core/common/command.c ****             print("eeconfig:\n");
 206:../../tmk_core/common/command.c ****             print_eeconfig();
 207:../../tmk_core/common/command.c ****             break;
 208:../../tmk_core/common/command.c **** #endif
 209:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 210:../../tmk_core/common/command.c ****         case KC_CAPSLOCK:
 211:../../tmk_core/common/command.c ****             if (host_get_driver()) {
 212:../../tmk_core/common/command.c ****                 host_driver = host_get_driver();
 213:../../tmk_core/common/command.c ****                 clear_keyboard();
 214:../../tmk_core/common/command.c ****                 host_set_driver(0);
 215:../../tmk_core/common/command.c ****                 print("Locked.\n");
 216:../../tmk_core/common/command.c ****             } else {
 217:../../tmk_core/common/command.c ****                 host_set_driver(host_driver);
 218:../../tmk_core/common/command.c ****                 print("Unlocked.\n");
 219:../../tmk_core/common/command.c ****             }
 220:../../tmk_core/common/command.c ****             break;
 221:../../tmk_core/common/command.c **** #endif
 222:../../tmk_core/common/command.c ****         case KC_H:
 223:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 224:../../tmk_core/common/command.c ****             command_common_help();
 225:../../tmk_core/common/command.c ****             break;
 226:../../tmk_core/common/command.c ****         case KC_C:
 227:../../tmk_core/common/command.c ****             debug_matrix   = false;
 228:../../tmk_core/common/command.c ****             debug_keyboard = false;
 229:../../tmk_core/common/command.c ****             debug_mouse    = false;
 230:../../tmk_core/common/command.c ****             debug_enable   = false;
 231:../../tmk_core/common/command.c ****             command_console_help();
 232:../../tmk_core/common/command.c ****             print("C> ");
 233:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 234:../../tmk_core/common/command.c ****             break;
 235:../../tmk_core/common/command.c ****         case KC_PAUSE:
 236:../../tmk_core/common/command.c ****             clear_keyboard();
 237:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 238:../../tmk_core/common/command.c ****             wait_ms(1000);
 239:../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 240:../../tmk_core/common/command.c ****             break;
 241:../../tmk_core/common/command.c ****         case KC_D:
 242:../../tmk_core/common/command.c ****             if (debug_enable) {
 243:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 244:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 245:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 246:../../tmk_core/common/command.c ****                 debug_mouse    = false;
 247:../../tmk_core/common/command.c ****                 debug_enable   = false;
 248:../../tmk_core/common/command.c ****             } else {
 249:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 250:../../tmk_core/common/command.c ****                 debug_enable   = true;
 251:../../tmk_core/common/command.c ****             }
 252:../../tmk_core/common/command.c ****             break;
 253:../../tmk_core/common/command.c ****         case KC_X: // debug matrix toggle
 254:../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 255:../../tmk_core/common/command.c ****             if (debug_matrix) {
 256:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 257:../../tmk_core/common/command.c ****                 debug_enable = true;
 258:../../tmk_core/common/command.c ****             } else {
 259:../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 260:../../tmk_core/common/command.c ****             }
 261:../../tmk_core/common/command.c ****             break;
 262:../../tmk_core/common/command.c ****         case KC_K: // debug keyboard toggle
 263:../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 264:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 265:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 266:../../tmk_core/common/command.c ****                 debug_enable = true;
 267:../../tmk_core/common/command.c ****             } else {
 268:../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 269:../../tmk_core/common/command.c ****             }
 270:../../tmk_core/common/command.c ****             break;
 271:../../tmk_core/common/command.c ****         case KC_M: // debug mouse toggle
 272:../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 273:../../tmk_core/common/command.c ****             if (debug_mouse) {
 274:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 275:../../tmk_core/common/command.c ****                 debug_enable = true;
 276:../../tmk_core/common/command.c ****             } else {
 277:../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 278:../../tmk_core/common/command.c ****             }
 279:../../tmk_core/common/command.c ****             break;
 280:../../tmk_core/common/command.c ****         case KC_V: // print version & information
 281:../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 282:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 283:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 284:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 285:../../tmk_core/common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 286:../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 287:../../tmk_core/common/command.c ****             /* build options */
 288:../../tmk_core/common/command.c ****             print("OPTIONS:"
 289:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 290:../../tmk_core/common/command.c ****             " PJRC"
 291:../../tmk_core/common/command.c **** #endif
 292:../../tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 293:../../tmk_core/common/command.c ****             " LUFA"
 294:../../tmk_core/common/command.c **** #endif
 295:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 296:../../tmk_core/common/command.c ****             " VUSB"
 297:../../tmk_core/common/command.c **** #endif
 298:../../tmk_core/common/command.c **** #ifdef PROTOCOL_CHIBIOS
 299:../../tmk_core/common/command.c ****             " CHIBIOS"
 300:../../tmk_core/common/command.c **** #endif
 301:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 302:../../tmk_core/common/command.c ****             " BOOTMAGIC"
 303:../../tmk_core/common/command.c **** #endif
 304:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 305:../../tmk_core/common/command.c ****             " MOUSEKEY"
 306:../../tmk_core/common/command.c **** #endif
 307:../../tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 308:../../tmk_core/common/command.c ****             " EXTRAKEY"
 309:../../tmk_core/common/command.c **** #endif
 310:../../tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 311:../../tmk_core/common/command.c ****             " CONSOLE"
 312:../../tmk_core/common/command.c **** #endif
 313:../../tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 314:../../tmk_core/common/command.c ****             " COMMAND"
 315:../../tmk_core/common/command.c **** #endif
 316:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 317:../../tmk_core/common/command.c ****             " NKRO"
 318:../../tmk_core/common/command.c **** #endif
 319:../../tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 320:../../tmk_core/common/command.c ****             " KEYMAP_SECTION"
 321:../../tmk_core/common/command.c **** #endif
 322:../../tmk_core/common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 323:../../tmk_core/common/command.c **** 
 324:../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 325:../../tmk_core/common/command.c **** #if defined(__AVR__)
 326:../../tmk_core/common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 327:../../tmk_core/common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 328:../../tmk_core/common/command.c **** #elif defined(__arm__)
 329:../../tmk_core/common/command.c ****             // TODO
 330:../../tmk_core/common/command.c ****             );
 331:../../tmk_core/common/command.c **** #endif
 332:../../tmk_core/common/command.c ****             break;
 333:../../tmk_core/common/command.c ****         case KC_S:
 334:../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 335:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 336:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 337:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 338:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 339:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 340:../../tmk_core/common/command.c **** #endif
 341:../../tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 342:../../tmk_core/common/command.c **** 
 343:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 344:../../tmk_core/common/command.c ****             print_val_hex8(UDCON);
 345:../../tmk_core/common/command.c ****             print_val_hex8(UDIEN);
 346:../../tmk_core/common/command.c ****             print_val_hex8(UDINT);
 347:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_leds);
 348:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 349:../../tmk_core/common/command.c **** #endif
 350:../../tmk_core/common/command.c **** 
 351:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 352:../../tmk_core/common/command.c **** #   if USB_COUNT_SOF
 353:../../tmk_core/common/command.c ****             print_val_hex8(usbSofCount);
 354:../../tmk_core/common/command.c **** #   endif
 355:../../tmk_core/common/command.c **** #endif
 356:../../tmk_core/common/command.c ****             break;
 357:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 358:../../tmk_core/common/command.c ****         case KC_N:
 359:../../tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 360:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 361:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 362:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 363:../../tmk_core/common/command.c ****             } else {
 364:../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 365:../../tmk_core/common/command.c ****             }
 366:../../tmk_core/common/command.c ****             break;
 367:../../tmk_core/common/command.c **** #endif
 368:../../tmk_core/common/command.c ****         case KC_ESC:
 369:../../tmk_core/common/command.c ****         case KC_GRV:
 370:../../tmk_core/common/command.c ****         case KC_0:
 371:../../tmk_core/common/command.c ****         case KC_F10:
 372:../../tmk_core/common/command.c ****             switch_default_layer(0);
 373:../../tmk_core/common/command.c ****             break;
 374:../../tmk_core/common/command.c ****         case KC_1 ... KC_9:
 375:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 376:../../tmk_core/common/command.c ****             break;
 377:../../tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 378:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 379:../../tmk_core/common/command.c ****             break;
 380:../../tmk_core/common/command.c ****         default:
 381:../../tmk_core/common/command.c ****             print("?");
 382:../../tmk_core/common/command.c ****             return false;
 383:../../tmk_core/common/command.c ****     }
 384:../../tmk_core/common/command.c ****     return true;
 385:../../tmk_core/common/command.c **** }
 386:../../tmk_core/common/command.c **** 
 387:../../tmk_core/common/command.c **** 
 388:../../tmk_core/common/command.c **** /***********************************************************
 389:../../tmk_core/common/command.c ****  * Command console
 390:../../tmk_core/common/command.c ****  ***********************************************************/
 391:../../tmk_core/common/command.c **** static void command_console_help(void)
 392:../../tmk_core/common/command.c **** {
 393:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 394:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 395:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 396:../../tmk_core/common/command.c ****           "m:	mousekey\n"
 397:../../tmk_core/common/command.c **** #endif
 398:../../tmk_core/common/command.c ****     );
 399:../../tmk_core/common/command.c **** }
 400:../../tmk_core/common/command.c **** 
 401:../../tmk_core/common/command.c **** static bool command_console(uint8_t code)
 402:../../tmk_core/common/command.c **** {
 403:../../tmk_core/common/command.c ****     switch (code) {
 404:../../tmk_core/common/command.c ****         case KC_H:
 405:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 406:../../tmk_core/common/command.c ****             command_console_help();
 407:../../tmk_core/common/command.c ****             break;
 408:../../tmk_core/common/command.c ****         case KC_Q:
 409:../../tmk_core/common/command.c ****         case KC_ESC:
 410:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 411:../../tmk_core/common/command.c ****             return false;
 412:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 413:../../tmk_core/common/command.c ****         case KC_M:
 414:../../tmk_core/common/command.c ****             mousekey_console_help();
 415:../../tmk_core/common/command.c ****             print("M> ");
 416:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 417:../../tmk_core/common/command.c ****             return true;
 418:../../tmk_core/common/command.c **** #endif
 419:../../tmk_core/common/command.c ****         default:
 420:../../tmk_core/common/command.c ****             print("?");
 421:../../tmk_core/common/command.c ****             return false;
 422:../../tmk_core/common/command.c ****     }
 423:../../tmk_core/common/command.c ****     print("C> ");
 424:../../tmk_core/common/command.c ****     return true;
 425:../../tmk_core/common/command.c **** }
 426:../../tmk_core/common/command.c **** 
 427:../../tmk_core/common/command.c **** 
 428:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 429:../../tmk_core/common/command.c **** /***********************************************************
 430:../../tmk_core/common/command.c ****  * Mousekey console
 431:../../tmk_core/common/command.c ****  ***********************************************************/
 432:../../tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 433:../../tmk_core/common/command.c **** 
 434:../../tmk_core/common/command.c **** static void mousekey_param_print(void)
 435:../../tmk_core/common/command.c **** {
 436:../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 437:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 438:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 439:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 440:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 441:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 442:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 443:../../tmk_core/common/command.c **** }
 444:../../tmk_core/common/command.c **** 
 445:../../tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 446:../../tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 447:../../tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 448:../../tmk_core/common/command.c **** {
 449:../../tmk_core/common/command.c ****     switch (param) {
 450:../../tmk_core/common/command.c ****         case 1:
 451:../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 452:../../tmk_core/common/command.c ****                 mk_delay += inc;
 453:../../tmk_core/common/command.c ****             else
 454:../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 455:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 456:../../tmk_core/common/command.c ****             break;
 457:../../tmk_core/common/command.c ****         case 2:
 458:../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 459:../../tmk_core/common/command.c ****                 mk_interval += inc;
 460:../../tmk_core/common/command.c ****             else
 461:../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 462:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 463:../../tmk_core/common/command.c ****             break;
 464:../../tmk_core/common/command.c ****         case 3:
 465:../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 466:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 467:../../tmk_core/common/command.c ****             else
 468:../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 469:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 470:../../tmk_core/common/command.c ****             break;
 471:../../tmk_core/common/command.c ****         case 4:
 472:../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 473:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 474:../../tmk_core/common/command.c ****             else
 475:../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 476:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 477:../../tmk_core/common/command.c ****             break;
 478:../../tmk_core/common/command.c ****         case 5:
 479:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 480:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 481:../../tmk_core/common/command.c ****             else
 482:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 483:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 484:../../tmk_core/common/command.c ****             break;
 485:../../tmk_core/common/command.c ****         case 6:
 486:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 487:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 488:../../tmk_core/common/command.c ****             else
 489:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 490:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 491:../../tmk_core/common/command.c ****             break;
 492:../../tmk_core/common/command.c ****     }
 493:../../tmk_core/common/command.c **** }
 494:../../tmk_core/common/command.c **** 
 495:../../tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 496:../../tmk_core/common/command.c **** {
 497:../../tmk_core/common/command.c ****     switch (param) {
 498:../../tmk_core/common/command.c ****         case 1:
 499:../../tmk_core/common/command.c ****             if (mk_delay > dec)
 500:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 501:../../tmk_core/common/command.c ****             else
 502:../../tmk_core/common/command.c ****                 mk_delay = 0;
 503:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 504:../../tmk_core/common/command.c ****             break;
 505:../../tmk_core/common/command.c ****         case 2:
 506:../../tmk_core/common/command.c ****             if (mk_interval > dec)
 507:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 508:../../tmk_core/common/command.c ****             else
 509:../../tmk_core/common/command.c ****                 mk_interval = 0;
 510:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 511:../../tmk_core/common/command.c ****             break;
 512:../../tmk_core/common/command.c ****         case 3:
 513:../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 514:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 515:../../tmk_core/common/command.c ****             else
 516:../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 517:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 518:../../tmk_core/common/command.c ****             break;
 519:../../tmk_core/common/command.c ****         case 4:
 520:../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 521:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 522:../../tmk_core/common/command.c ****             else
 523:../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 524:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 525:../../tmk_core/common/command.c ****             break;
 526:../../tmk_core/common/command.c ****         case 5:
 527:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 528:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 529:../../tmk_core/common/command.c ****             else
 530:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 531:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 532:../../tmk_core/common/command.c ****             break;
 533:../../tmk_core/common/command.c ****         case 6:
 534:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 535:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 536:../../tmk_core/common/command.c ****             else
 537:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 538:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 539:../../tmk_core/common/command.c ****             break;
 540:../../tmk_core/common/command.c ****     }
 541:../../tmk_core/common/command.c **** }
 542:../../tmk_core/common/command.c **** 
 543:../../tmk_core/common/command.c **** static void mousekey_console_help(void)
 544:../../tmk_core/common/command.c **** {
  15               		.loc 1 544 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 545:../../tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 545 0
  22 0000 80E0      		ldi r24,lo8(__c.2881)
  23 0002 90E0      		ldi r25,hi8(__c.2881)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 546:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 547:../../tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 548:../../tmk_core/common/command.c ****           "2:	interval(ms)\n"
 549:../../tmk_core/common/command.c ****           "3:	max_speed\n"
 550:../../tmk_core/common/command.c ****           "4:	time_to_max\n"
 551:../../tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 552:../../tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 553:../../tmk_core/common/command.c ****           "\n"
 554:../../tmk_core/common/command.c ****           "p:	print values\n"
 555:../../tmk_core/common/command.c ****           "d:	set defaults\n"
 556:../../tmk_core/common/command.c ****           "up:	+1\n"
 557:../../tmk_core/common/command.c ****           "down:	-1\n"
 558:../../tmk_core/common/command.c ****           "pgup:	+10\n"
 559:../../tmk_core/common/command.c ****           "pgdown:	-10\n"
 560:../../tmk_core/common/command.c ****           "\n"
 561:../../tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 562:../../tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n" 
  26               		.loc 1 562 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.2883)
  42 0016 90E0      		ldi r25,hi8(__c.2883)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
 563:../../tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 564:../../tmk_core/common/command.c **** }
  51               		.loc 1 564 0
  52 0020 0F90      		pop __tmp_reg__
  53 0022 0F90      		pop __tmp_reg__
  54 0024 0F90      		pop __tmp_reg__
  55 0026 0F90      		pop __tmp_reg__
  56 0028 0F90      		pop __tmp_reg__
  57 002a 0F90      		pop __tmp_reg__
  58               	.LCFI6:
  59               		.cfi_def_cfa_offset 2
  60               	/* epilogue start */
  61 002c 0895      		ret
  62               		.cfi_endproc
  63               	.LFE21:
  65               		.section	.text.mousekey_param_inc,"ax",@progbits
  67               	mousekey_param_inc:
  68               	.LFB19:
 448:../../tmk_core/common/command.c ****     switch (param) {
  69               		.loc 1 448 0
  70               		.cfi_startproc
  71               	.LVL2:
  72               	/* prologue: function */
  73               	/* frame size = 0 */
  74               	/* stack size = 0 */
  75               	.L__stack_usage = 0
 449:../../tmk_core/common/command.c ****         case 1:
  76               		.loc 1 449 0
  77 0000 8330      		cpi r24,lo8(3)
  78 0002 01F4      		brne .+2
  79 0004 00C0      		rjmp .L4
  80 0006 00F4      		brsh .L5
  81 0008 8130      		cpi r24,lo8(1)
  82 000a 01F0      		breq .L6
  83 000c 8230      		cpi r24,lo8(2)
  84 000e 01F0      		breq .L7
  85 0010 0895      		ret
  86               	.L5:
  87 0012 8530      		cpi r24,lo8(5)
  88 0014 01F4      		brne .+2
  89 0016 00C0      		rjmp .L8
  90 0018 00F4      		brsh .+2
  91 001a 00C0      		rjmp .L9
  92 001c 8630      		cpi r24,lo8(6)
  93 001e 01F4      		brne .+2
  94 0020 00C0      		rjmp .L10
  95 0022 0895      		ret
  96               	.L6:
 451:../../tmk_core/common/command.c ****                 mk_delay += inc;
  97               		.loc 1 451 0
  98 0024 8091 0000 		lds r24,mk_delay
  99               	.LVL3:
 100 0028 482F      		mov r20,r24
 101 002a 460F      		add r20,r22
 102 002c 5527      		clr r21
 103 002e 551F      		rol r21
 104 0030 4F3F      		cpi r20,-1
 105 0032 5105      		cpc r21,__zero_reg__
 106 0034 04F4      		brge .L11
 452:../../tmk_core/common/command.c ****             else
 107               		.loc 1 452 0
 108 0036 680F      		add r22,r24
 109               	.LVL4:
 110 0038 6093 0000 		sts mk_delay,r22
 111               	.L12:
 455:../../tmk_core/common/command.c ****             break;
 112               		.loc 1 455 0
 113 003c 8091 0000 		lds r24,mk_delay
 114 0040 1F92      		push __zero_reg__
 115               	.LCFI7:
 116               		.cfi_def_cfa_offset 3
 117 0042 8F93      		push r24
 118               	.LCFI8:
 119               		.cfi_def_cfa_offset 4
 120 0044 80E0      		ldi r24,lo8(__c.2837)
 121 0046 90E0      		ldi r25,hi8(__c.2837)
 122               	.L23:
 490:../../tmk_core/common/command.c ****             break;
 123               		.loc 1 490 0
 124 0048 9F93      		push r25
 125               	.LCFI9:
 126               		.cfi_def_cfa_offset 5
 127 004a 8F93      		push r24
 128               	.LCFI10:
 129               		.cfi_def_cfa_offset 6
 130 004c 0E94 0000 		call __xprintf
 131               	.LVL5:
 491:../../tmk_core/common/command.c ****     }
 132               		.loc 1 491 0
 133 0050 0F90      		pop __tmp_reg__
 134 0052 0F90      		pop __tmp_reg__
 135 0054 0F90      		pop __tmp_reg__
 136 0056 0F90      		pop __tmp_reg__
 137               	.LCFI11:
 138               		.cfi_def_cfa_offset 2
 139               	/* epilogue start */
 493:../../tmk_core/common/command.c **** 
 140               		.loc 1 493 0
 141 0058 0895      		ret
 142               	.LVL6:
 143               	.L11:
 454:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 144               		.loc 1 454 0
 145 005a 8FEF      		ldi r24,lo8(-1)
 146 005c 8093 0000 		sts mk_delay,r24
 147 0060 00C0      		rjmp .L12
 148               	.LVL7:
 149               	.L7:
 458:../../tmk_core/common/command.c ****                 mk_interval += inc;
 150               		.loc 1 458 0
 151 0062 8091 0000 		lds r24,mk_interval
 152               	.LVL8:
 153 0066 482F      		mov r20,r24
 154 0068 460F      		add r20,r22
 155 006a 5527      		clr r21
 156 006c 551F      		rol r21
 157 006e 4F3F      		cpi r20,-1
 158 0070 5105      		cpc r21,__zero_reg__
 159 0072 04F4      		brge .L13
 459:../../tmk_core/common/command.c ****             else
 160               		.loc 1 459 0
 161 0074 680F      		add r22,r24
 162               	.LVL9:
 163 0076 6093 0000 		sts mk_interval,r22
 164               	.L14:
 462:../../tmk_core/common/command.c ****             break;
 165               		.loc 1 462 0
 166 007a 8091 0000 		lds r24,mk_interval
 167 007e 1F92      		push __zero_reg__
 168               	.LCFI12:
 169               		.cfi_remember_state
 170               		.cfi_def_cfa_offset 3
 171 0080 8F93      		push r24
 172               	.LCFI13:
 173               		.cfi_def_cfa_offset 4
 174 0082 80E0      		ldi r24,lo8(__c.2841)
 175 0084 90E0      		ldi r25,hi8(__c.2841)
 176 0086 00C0      		rjmp .L23
 177               	.LVL10:
 178               	.L13:
 179               	.LCFI14:
 180               		.cfi_restore_state
 461:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 181               		.loc 1 461 0
 182 0088 8FEF      		ldi r24,lo8(-1)
 183 008a 8093 0000 		sts mk_interval,r24
 184 008e 00C0      		rjmp .L14
 185               	.LVL11:
 186               	.L4:
 465:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 187               		.loc 1 465 0
 188 0090 8091 0000 		lds r24,mk_max_speed
 189               	.LVL12:
 190 0094 482F      		mov r20,r24
 191 0096 460F      		add r20,r22
 192 0098 5527      		clr r21
 193 009a 551F      		rol r21
 194 009c 4F3F      		cpi r20,-1
 195 009e 5105      		cpc r21,__zero_reg__
 196 00a0 04F4      		brge .L15
 466:../../tmk_core/common/command.c ****             else
 197               		.loc 1 466 0
 198 00a2 680F      		add r22,r24
 199               	.LVL13:
 200 00a4 6093 0000 		sts mk_max_speed,r22
 201               	.L16:
 469:../../tmk_core/common/command.c ****             break;
 202               		.loc 1 469 0
 203 00a8 8091 0000 		lds r24,mk_max_speed
 204 00ac 1F92      		push __zero_reg__
 205               	.LCFI15:
 206               		.cfi_remember_state
 207               		.cfi_def_cfa_offset 3
 208 00ae 8F93      		push r24
 209               	.LCFI16:
 210               		.cfi_def_cfa_offset 4
 211 00b0 80E0      		ldi r24,lo8(__c.2844)
 212 00b2 90E0      		ldi r25,hi8(__c.2844)
 213 00b4 00C0      		rjmp .L23
 214               	.LVL14:
 215               	.L15:
 216               	.LCFI17:
 217               		.cfi_restore_state
 468:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 218               		.loc 1 468 0
 219 00b6 8FEF      		ldi r24,lo8(-1)
 220 00b8 8093 0000 		sts mk_max_speed,r24
 221 00bc 00C0      		rjmp .L16
 222               	.LVL15:
 223               	.L9:
 472:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 224               		.loc 1 472 0
 225 00be 8091 0000 		lds r24,mk_time_to_max
 226               	.LVL16:
 227 00c2 482F      		mov r20,r24
 228 00c4 460F      		add r20,r22
 229 00c6 5527      		clr r21
 230 00c8 551F      		rol r21
 231 00ca 4F3F      		cpi r20,-1
 232 00cc 5105      		cpc r21,__zero_reg__
 233 00ce 04F4      		brge .L17
 473:../../tmk_core/common/command.c ****             else
 234               		.loc 1 473 0
 235 00d0 680F      		add r22,r24
 236               	.LVL17:
 237 00d2 6093 0000 		sts mk_time_to_max,r22
 238               	.L18:
 476:../../tmk_core/common/command.c ****             break;
 239               		.loc 1 476 0
 240 00d6 8091 0000 		lds r24,mk_time_to_max
 241 00da 1F92      		push __zero_reg__
 242               	.LCFI18:
 243               		.cfi_remember_state
 244               		.cfi_def_cfa_offset 3
 245 00dc 8F93      		push r24
 246               	.LCFI19:
 247               		.cfi_def_cfa_offset 4
 248 00de 80E0      		ldi r24,lo8(__c.2847)
 249 00e0 90E0      		ldi r25,hi8(__c.2847)
 250 00e2 00C0      		rjmp .L23
 251               	.LVL18:
 252               	.L17:
 253               	.LCFI20:
 254               		.cfi_restore_state
 475:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 255               		.loc 1 475 0
 256 00e4 8FEF      		ldi r24,lo8(-1)
 257 00e6 8093 0000 		sts mk_time_to_max,r24
 258 00ea 00C0      		rjmp .L18
 259               	.LVL19:
 260               	.L8:
 479:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 261               		.loc 1 479 0
 262 00ec 8091 0000 		lds r24,mk_wheel_max_speed
 263               	.LVL20:
 264 00f0 482F      		mov r20,r24
 265 00f2 460F      		add r20,r22
 266 00f4 5527      		clr r21
 267 00f6 551F      		rol r21
 268 00f8 4F3F      		cpi r20,-1
 269 00fa 5105      		cpc r21,__zero_reg__
 270 00fc 04F4      		brge .L19
 480:../../tmk_core/common/command.c ****             else
 271               		.loc 1 480 0
 272 00fe 680F      		add r22,r24
 273               	.LVL21:
 274 0100 6093 0000 		sts mk_wheel_max_speed,r22
 275               	.L20:
 483:../../tmk_core/common/command.c ****             break;
 276               		.loc 1 483 0
 277 0104 8091 0000 		lds r24,mk_wheel_max_speed
 278 0108 1F92      		push __zero_reg__
 279               	.LCFI21:
 280               		.cfi_remember_state
 281               		.cfi_def_cfa_offset 3
 282 010a 8F93      		push r24
 283               	.LCFI22:
 284               		.cfi_def_cfa_offset 4
 285 010c 80E0      		ldi r24,lo8(__c.2850)
 286 010e 90E0      		ldi r25,hi8(__c.2850)
 287 0110 00C0      		rjmp .L23
 288               	.LVL22:
 289               	.L19:
 290               	.LCFI23:
 291               		.cfi_restore_state
 482:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 292               		.loc 1 482 0
 293 0112 8FEF      		ldi r24,lo8(-1)
 294 0114 8093 0000 		sts mk_wheel_max_speed,r24
 295 0118 00C0      		rjmp .L20
 296               	.LVL23:
 297               	.L10:
 486:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 298               		.loc 1 486 0
 299 011a 8091 0000 		lds r24,mk_wheel_time_to_max
 300               	.LVL24:
 301 011e 482F      		mov r20,r24
 302 0120 460F      		add r20,r22
 303 0122 5527      		clr r21
 304 0124 551F      		rol r21
 305 0126 4F3F      		cpi r20,-1
 306 0128 5105      		cpc r21,__zero_reg__
 307 012a 04F4      		brge .L21
 487:../../tmk_core/common/command.c ****             else
 308               		.loc 1 487 0
 309 012c 680F      		add r22,r24
 310               	.LVL25:
 311 012e 6093 0000 		sts mk_wheel_time_to_max,r22
 312               	.L22:
 490:../../tmk_core/common/command.c ****             break;
 313               		.loc 1 490 0
 314 0132 8091 0000 		lds r24,mk_wheel_time_to_max
 315 0136 1F92      		push __zero_reg__
 316               	.LCFI24:
 317               		.cfi_remember_state
 318               		.cfi_def_cfa_offset 3
 319 0138 8F93      		push r24
 320               	.LCFI25:
 321               		.cfi_def_cfa_offset 4
 322 013a 80E0      		ldi r24,lo8(__c.2853)
 323 013c 90E0      		ldi r25,hi8(__c.2853)
 324 013e 00C0      		rjmp .L23
 325               	.LVL26:
 326               	.L21:
 327               	.LCFI26:
 328               		.cfi_restore_state
 489:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 329               		.loc 1 489 0
 330 0140 8FEF      		ldi r24,lo8(-1)
 331 0142 8093 0000 		sts mk_wheel_time_to_max,r24
 332 0146 00C0      		rjmp .L22
 333               		.cfi_endproc
 334               	.LFE19:
 336               		.section	.text.mousekey_param_dec,"ax",@progbits
 338               	mousekey_param_dec:
 339               	.LFB20:
 496:../../tmk_core/common/command.c ****     switch (param) {
 340               		.loc 1 496 0
 341               		.cfi_startproc
 342               	.LVL27:
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 0 */
 346               	.L__stack_usage = 0
 497:../../tmk_core/common/command.c ****         case 1:
 347               		.loc 1 497 0
 348 0000 8330      		cpi r24,lo8(3)
 349 0002 01F0      		breq .L26
 350 0004 00F4      		brsh .L27
 351 0006 8130      		cpi r24,lo8(1)
 352 0008 01F0      		breq .L28
 353 000a 8230      		cpi r24,lo8(2)
 354 000c 01F0      		breq .L29
 355 000e 0895      		ret
 356               	.L27:
 357 0010 8530      		cpi r24,lo8(5)
 358 0012 01F4      		brne .+2
 359 0014 00C0      		rjmp .L30
 360 0016 00F4      		brsh .+2
 361 0018 00C0      		rjmp .L31
 362 001a 8630      		cpi r24,lo8(6)
 363 001c 01F4      		brne .+2
 364 001e 00C0      		rjmp .L32
 365 0020 0895      		ret
 366               	.L28:
 499:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 367               		.loc 1 499 0
 368 0022 8091 0000 		lds r24,mk_delay
 369               	.LVL28:
 370 0026 6817      		cp r22,r24
 371 0028 00F4      		brsh .L33
 500:../../tmk_core/common/command.c ****             else
 372               		.loc 1 500 0
 373 002a 861B      		sub r24,r22
 374 002c 8093 0000 		sts mk_delay,r24
 375               	.L34:
 503:../../tmk_core/common/command.c ****             break;
 376               		.loc 1 503 0
 377 0030 8091 0000 		lds r24,mk_delay
 378 0034 1F92      		push __zero_reg__
 379               	.LCFI27:
 380               		.cfi_def_cfa_offset 3
 381 0036 8F93      		push r24
 382               	.LCFI28:
 383               		.cfi_def_cfa_offset 4
 384 0038 80E0      		ldi r24,lo8(__c.2860)
 385 003a 90E0      		ldi r25,hi8(__c.2860)
 386               	.L45:
 538:../../tmk_core/common/command.c ****             break;
 387               		.loc 1 538 0
 388 003c 9F93      		push r25
 389               	.LCFI29:
 390               		.cfi_def_cfa_offset 5
 391 003e 8F93      		push r24
 392               	.LCFI30:
 393               		.cfi_def_cfa_offset 6
 394 0040 0E94 0000 		call __xprintf
 395               	.LVL29:
 539:../../tmk_core/common/command.c ****     }
 396               		.loc 1 539 0
 397 0044 0F90      		pop __tmp_reg__
 398 0046 0F90      		pop __tmp_reg__
 399 0048 0F90      		pop __tmp_reg__
 400 004a 0F90      		pop __tmp_reg__
 401               	.LCFI31:
 402               		.cfi_def_cfa_offset 2
 403               	/* epilogue start */
 541:../../tmk_core/common/command.c **** 
 404               		.loc 1 541 0
 405 004c 0895      		ret
 406               	.LVL30:
 407               	.L33:
 502:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 408               		.loc 1 502 0
 409 004e 1092 0000 		sts mk_delay,__zero_reg__
 410 0052 00C0      		rjmp .L34
 411               	.LVL31:
 412               	.L29:
 506:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 413               		.loc 1 506 0
 414 0054 8091 0000 		lds r24,mk_interval
 415               	.LVL32:
 416 0058 6817      		cp r22,r24
 417 005a 00F4      		brsh .L35
 507:../../tmk_core/common/command.c ****             else
 418               		.loc 1 507 0
 419 005c 861B      		sub r24,r22
 420 005e 8093 0000 		sts mk_interval,r24
 421               	.L36:
 510:../../tmk_core/common/command.c ****             break;
 422               		.loc 1 510 0
 423 0062 8091 0000 		lds r24,mk_interval
 424 0066 1F92      		push __zero_reg__
 425               	.LCFI32:
 426               		.cfi_remember_state
 427               		.cfi_def_cfa_offset 3
 428 0068 8F93      		push r24
 429               	.LCFI33:
 430               		.cfi_def_cfa_offset 4
 431 006a 80E0      		ldi r24,lo8(__c.2864)
 432 006c 90E0      		ldi r25,hi8(__c.2864)
 433 006e 00C0      		rjmp .L45
 434               	.L35:
 435               	.LCFI34:
 436               		.cfi_restore_state
 509:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 437               		.loc 1 509 0
 438 0070 1092 0000 		sts mk_interval,__zero_reg__
 439 0074 00C0      		rjmp .L36
 440               	.LVL33:
 441               	.L26:
 513:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 442               		.loc 1 513 0
 443 0076 8091 0000 		lds r24,mk_max_speed
 444               	.LVL34:
 445 007a 6817      		cp r22,r24
 446 007c 00F4      		brsh .L37
 514:../../tmk_core/common/command.c ****             else
 447               		.loc 1 514 0
 448 007e 861B      		sub r24,r22
 449 0080 8093 0000 		sts mk_max_speed,r24
 450               	.L38:
 517:../../tmk_core/common/command.c ****             break;
 451               		.loc 1 517 0
 452 0084 8091 0000 		lds r24,mk_max_speed
 453 0088 1F92      		push __zero_reg__
 454               	.LCFI35:
 455               		.cfi_remember_state
 456               		.cfi_def_cfa_offset 3
 457 008a 8F93      		push r24
 458               	.LCFI36:
 459               		.cfi_def_cfa_offset 4
 460 008c 80E0      		ldi r24,lo8(__c.2867)
 461 008e 90E0      		ldi r25,hi8(__c.2867)
 462 0090 00C0      		rjmp .L45
 463               	.L37:
 464               	.LCFI37:
 465               		.cfi_restore_state
 516:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 466               		.loc 1 516 0
 467 0092 1092 0000 		sts mk_max_speed,__zero_reg__
 468 0096 00C0      		rjmp .L38
 469               	.LVL35:
 470               	.L31:
 520:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 471               		.loc 1 520 0
 472 0098 8091 0000 		lds r24,mk_time_to_max
 473               	.LVL36:
 474 009c 6817      		cp r22,r24
 475 009e 00F4      		brsh .L39
 521:../../tmk_core/common/command.c ****             else
 476               		.loc 1 521 0
 477 00a0 861B      		sub r24,r22
 478 00a2 8093 0000 		sts mk_time_to_max,r24
 479               	.L40:
 524:../../tmk_core/common/command.c ****             break;
 480               		.loc 1 524 0
 481 00a6 8091 0000 		lds r24,mk_time_to_max
 482 00aa 1F92      		push __zero_reg__
 483               	.LCFI38:
 484               		.cfi_remember_state
 485               		.cfi_def_cfa_offset 3
 486 00ac 8F93      		push r24
 487               	.LCFI39:
 488               		.cfi_def_cfa_offset 4
 489 00ae 80E0      		ldi r24,lo8(__c.2870)
 490 00b0 90E0      		ldi r25,hi8(__c.2870)
 491 00b2 00C0      		rjmp .L45
 492               	.L39:
 493               	.LCFI40:
 494               		.cfi_restore_state
 523:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 495               		.loc 1 523 0
 496 00b4 1092 0000 		sts mk_time_to_max,__zero_reg__
 497 00b8 00C0      		rjmp .L40
 498               	.LVL37:
 499               	.L30:
 527:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 500               		.loc 1 527 0
 501 00ba 8091 0000 		lds r24,mk_wheel_max_speed
 502               	.LVL38:
 503 00be 6817      		cp r22,r24
 504 00c0 00F4      		brsh .L41
 528:../../tmk_core/common/command.c ****             else
 505               		.loc 1 528 0
 506 00c2 861B      		sub r24,r22
 507 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 508               	.L42:
 531:../../tmk_core/common/command.c ****             break;
 509               		.loc 1 531 0
 510 00c8 8091 0000 		lds r24,mk_wheel_max_speed
 511 00cc 1F92      		push __zero_reg__
 512               	.LCFI41:
 513               		.cfi_remember_state
 514               		.cfi_def_cfa_offset 3
 515 00ce 8F93      		push r24
 516               	.LCFI42:
 517               		.cfi_def_cfa_offset 4
 518 00d0 80E0      		ldi r24,lo8(__c.2873)
 519 00d2 90E0      		ldi r25,hi8(__c.2873)
 520 00d4 00C0      		rjmp .L45
 521               	.L41:
 522               	.LCFI43:
 523               		.cfi_restore_state
 530:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 524               		.loc 1 530 0
 525 00d6 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 526 00da 00C0      		rjmp .L42
 527               	.LVL39:
 528               	.L32:
 534:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 529               		.loc 1 534 0
 530 00dc 8091 0000 		lds r24,mk_wheel_time_to_max
 531               	.LVL40:
 532 00e0 6817      		cp r22,r24
 533 00e2 00F4      		brsh .L43
 535:../../tmk_core/common/command.c ****             else
 534               		.loc 1 535 0
 535 00e4 861B      		sub r24,r22
 536 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 537               	.L44:
 538:../../tmk_core/common/command.c ****             break;
 538               		.loc 1 538 0
 539 00ea 8091 0000 		lds r24,mk_wheel_time_to_max
 540 00ee 1F92      		push __zero_reg__
 541               	.LCFI44:
 542               		.cfi_remember_state
 543               		.cfi_def_cfa_offset 3
 544 00f0 8F93      		push r24
 545               	.LCFI45:
 546               		.cfi_def_cfa_offset 4
 547 00f2 80E0      		ldi r24,lo8(__c.2876)
 548 00f4 90E0      		ldi r25,hi8(__c.2876)
 549 00f6 00C0      		rjmp .L45
 550               	.L43:
 551               	.LCFI46:
 552               		.cfi_restore_state
 537:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 553               		.loc 1 537 0
 554 00f8 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 555 00fc 00C0      		rjmp .L44
 556               		.cfi_endproc
 557               	.LFE20:
 559               		.section	.text.switch_default_layer,"ax",@progbits
 561               	switch_default_layer:
 562               	.LFB24:
 565:../../tmk_core/common/command.c **** 
 566:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 567:../../tmk_core/common/command.c **** {
 568:../../tmk_core/common/command.c ****     switch (code) {
 569:../../tmk_core/common/command.c ****         case KC_H:
 570:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 571:../../tmk_core/common/command.c ****             mousekey_console_help();
 572:../../tmk_core/common/command.c ****             break;
 573:../../tmk_core/common/command.c ****         case KC_Q:
 574:../../tmk_core/common/command.c ****         case KC_ESC:
 575:../../tmk_core/common/command.c ****             if (mousekey_param) {
 576:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 577:../../tmk_core/common/command.c ****             } else {
 578:../../tmk_core/common/command.c ****                 print("C> ");
 579:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 580:../../tmk_core/common/command.c ****                 return false;
 581:../../tmk_core/common/command.c ****             }
 582:../../tmk_core/common/command.c ****             break;
 583:../../tmk_core/common/command.c ****         case KC_P:
 584:../../tmk_core/common/command.c ****             mousekey_param_print();
 585:../../tmk_core/common/command.c ****             break;
 586:../../tmk_core/common/command.c ****         case KC_1:
 587:../../tmk_core/common/command.c ****         case KC_2:
 588:../../tmk_core/common/command.c ****         case KC_3:
 589:../../tmk_core/common/command.c ****         case KC_4:
 590:../../tmk_core/common/command.c ****         case KC_5:
 591:../../tmk_core/common/command.c ****         case KC_6:
 592:../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 593:../../tmk_core/common/command.c ****             break;
 594:../../tmk_core/common/command.c ****         case KC_UP:
 595:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 596:../../tmk_core/common/command.c ****             break;
 597:../../tmk_core/common/command.c ****         case KC_DOWN:
 598:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 599:../../tmk_core/common/command.c ****             break;
 600:../../tmk_core/common/command.c ****         case KC_PGUP:
 601:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 602:../../tmk_core/common/command.c ****             break;
 603:../../tmk_core/common/command.c ****         case KC_PGDN:
 604:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 605:../../tmk_core/common/command.c ****             break;
 606:../../tmk_core/common/command.c ****         case KC_D:
 607:../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 608:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 609:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 610:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 611:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 612:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 613:../../tmk_core/common/command.c ****             print("set default\n");
 614:../../tmk_core/common/command.c ****             break;
 615:../../tmk_core/common/command.c ****         default:
 616:../../tmk_core/common/command.c ****             print("?");
 617:../../tmk_core/common/command.c ****             return false;
 618:../../tmk_core/common/command.c ****     }
 619:../../tmk_core/common/command.c ****     if (mousekey_param) {
 620:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 621:../../tmk_core/common/command.c ****     } else {
 622:../../tmk_core/common/command.c ****         print("M>" );
 623:../../tmk_core/common/command.c ****     }
 624:../../tmk_core/common/command.c ****     return true;
 625:../../tmk_core/common/command.c **** }
 626:../../tmk_core/common/command.c **** #endif
 627:../../tmk_core/common/command.c **** 
 628:../../tmk_core/common/command.c **** 
 629:../../tmk_core/common/command.c **** /***********************************************************
 630:../../tmk_core/common/command.c ****  * Utilities
 631:../../tmk_core/common/command.c ****  ***********************************************************/
 632:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code)
 633:../../tmk_core/common/command.c **** {
 634:../../tmk_core/common/command.c ****     switch (code) {
 635:../../tmk_core/common/command.c ****         case KC_1: return 1;
 636:../../tmk_core/common/command.c ****         case KC_2: return 2;
 637:../../tmk_core/common/command.c ****         case KC_3: return 3;
 638:../../tmk_core/common/command.c ****         case KC_4: return 4;
 639:../../tmk_core/common/command.c ****         case KC_5: return 5;
 640:../../tmk_core/common/command.c ****         case KC_6: return 6;
 641:../../tmk_core/common/command.c ****         case KC_7: return 7;
 642:../../tmk_core/common/command.c ****         case KC_8: return 8;
 643:../../tmk_core/common/command.c ****         case KC_9: return 9;
 644:../../tmk_core/common/command.c ****         case KC_0: return 0;
 645:../../tmk_core/common/command.c ****     }
 646:../../tmk_core/common/command.c ****     return 0;
 647:../../tmk_core/common/command.c **** }
 648:../../tmk_core/common/command.c **** 
 649:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 650:../../tmk_core/common/command.c **** {
 563               		.loc 1 650 0
 564               		.cfi_startproc
 565               	.LVL41:
 566 0000 CF93      		push r28
 567               	.LCFI47:
 568               		.cfi_def_cfa_offset 3
 569               		.cfi_offset 28, -2
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 1 */
 573               	.L__stack_usage = 1
 574 0002 C82F      		mov r28,r24
 651:../../tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 575               		.loc 1 651 0
 576 0004 1F92      		push __zero_reg__
 577               	.LCFI48:
 578               		.cfi_def_cfa_offset 4
 579 0006 8F93      		push r24
 580               	.LCFI49:
 581               		.cfi_def_cfa_offset 5
 582 0008 80E0      		ldi r24,lo8(__c.2932)
 583 000a 90E0      		ldi r25,hi8(__c.2932)
 584               	.LVL42:
 585 000c 9F93      		push r25
 586               	.LCFI50:
 587               		.cfi_def_cfa_offset 6
 588 000e 8F93      		push r24
 589               	.LCFI51:
 590               		.cfi_def_cfa_offset 7
 591 0010 0E94 0000 		call __xprintf
 592               	.LVL43:
 652:../../tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 593               		.loc 1 652 0
 594 0014 61E0      		ldi r22,lo8(1)
 595 0016 70E0      		ldi r23,0
 596 0018 80E0      		ldi r24,0
 597 001a 90E0      		ldi r25,0
 598 001c 00C0      		rjmp 2f
 599               		1:
 600 001e 660F      		lsl r22
 601 0020 771F      		rol r23
 602 0022 881F      		rol r24
 603 0024 991F      		rol r25
 604               		2:
 605 0026 CA95      		dec r28
 606 0028 02F4      		brpl 1b
 607 002a 0E94 0000 		call default_layer_set
 608               	.LVL44:
 653:../../tmk_core/common/command.c ****     clear_keyboard();
 609               		.loc 1 653 0
 610 002e 0F90      		pop __tmp_reg__
 611 0030 0F90      		pop __tmp_reg__
 612 0032 0F90      		pop __tmp_reg__
 613 0034 0F90      		pop __tmp_reg__
 614               	.LCFI52:
 615               		.cfi_def_cfa_offset 3
 616               	/* epilogue start */
 654:../../tmk_core/common/command.c **** }
 617               		.loc 1 654 0
 618 0036 CF91      		pop r28
 619               	.LVL45:
 653:../../tmk_core/common/command.c ****     clear_keyboard();
 620               		.loc 1 653 0
 621 0038 0C94 0000 		jmp clear_keyboard
 622               	.LVL46:
 623               		.cfi_endproc
 624               	.LFE24:
 626               		.section	.text.command_common,"ax",@progbits
 628               	command_common:
 629               	.LFB15:
 182:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 630               		.loc 1 182 0
 631               		.cfi_startproc
 632 0000 CF93      		push r28
 633               	.LCFI53:
 634               		.cfi_def_cfa_offset 3
 635               		.cfi_offset 28, -2
 636               	/* prologue: function */
 637               	/* frame size = 0 */
 638               	/* stack size = 1 */
 639               	.L__stack_usage = 1
 189:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 640               		.loc 1 189 0
 641 0002 8732      		cpi r24,lo8(39)
 642 0004 00F0      		brlo .+2
 643 0006 00C0      		rjmp .L49
 644 0008 8E31      		cpi r24,lo8(30)
 645 000a 00F0      		brlo .+2
 646 000c 00C0      		rjmp .L50
 647 000e 8E30      		cpi r24,lo8(14)
 648 0010 01F4      		brne .+2
 649 0012 00C0      		rjmp .L51
 650 0014 00F4      		brsh .L52
 651 0016 8730      		cpi r24,lo8(7)
 652 0018 01F4      		brne .+2
 653 001a 00C0      		rjmp .L53
 654 001c 00F4      		brsh .L54
 655 001e 8630      		cpi r24,lo8(6)
 656 0020 01F4      		brne .+2
 657 0022 00C0      		rjmp .L55
 658               	.L48:
 381:../../tmk_core/common/command.c ****             return false;
 659               		.loc 1 381 0
 660 0024 80E0      		ldi r24,lo8(__c.2767)
 661 0026 90E0      		ldi r25,hi8(__c.2767)
 662 0028 0E94 0000 		call xputs
 382:../../tmk_core/common/command.c ****     }
 663               		.loc 1 382 0
 664 002c 80E0      		ldi r24,0
 665 002e 00C0      		rjmp .L47
 666               	.L54:
 189:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 667               		.loc 1 189 0
 668 0030 8830      		cpi r24,lo8(8)
 669 0032 01F4      		brne .+2
 670 0034 00C0      		rjmp .L56
 671 0036 8B30      		cpi r24,lo8(11)
 672 0038 01F4      		brne .L48
 673               	.L57:
 674               	.LBB105:
 675               	.LBB106:
 117:../../tmk_core/common/command.c ****           "d:	debug\n"
 676               		.loc 1 117 0
 677 003a 80E0      		ldi r24,lo8(__c.2604)
 678 003c 90E0      		ldi r25,hi8(__c.2604)
 679               	.L94:
 680               	.LBE106:
 681               	.LBE105:
 324:../../tmk_core/common/command.c **** #if defined(__AVR__)
 682               		.loc 1 324 0
 683 003e 0E94 0000 		call xputs
 684 0042 00C0      		rjmp .L93
 685               	.L52:
 189:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 686               		.loc 1 189 0
 687 0044 8631      		cpi r24,lo8(22)
 688 0046 01F4      		brne .+2
 689 0048 00C0      		rjmp .L58
 690 004a 00F4      		brsh .L59
 691 004c 8031      		cpi r24,lo8(16)
 692 004e 01F4      		brne .L48
 272:../../tmk_core/common/command.c ****             if (debug_mouse) {
 693               		.loc 1 272 0
 694 0050 9091 0000 		lds r25,debug_config
 695 0054 892F      		mov r24,r25
 696 0056 877F      		andi r24,~(1<<3)
 697 0058 93FF      		sbrs r25,3
 698 005a 8860      		ori r24,1<<3
 699 005c 8093 0000 		sts debug_config,r24
 273:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 700               		.loc 1 273 0
 701 0060 83FF      		sbrs r24,3
 702 0062 00C0      		rjmp .L72
 274:../../tmk_core/common/command.c ****                 debug_enable = true;
 703               		.loc 1 274 0
 704 0064 80E0      		ldi r24,lo8(__c.2732)
 705 0066 90E0      		ldi r25,hi8(__c.2732)
 706 0068 00C0      		rjmp .L96
 707               	.L59:
 189:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 708               		.loc 1 189 0
 709 006a 8931      		cpi r24,lo8(25)
 710 006c 01F4      		brne .+2
 711 006e 00C0      		rjmp .L61
 712 0070 8B31      		cpi r24,lo8(27)
 713 0072 01F4      		brne .L48
 254:../../tmk_core/common/command.c ****             if (debug_matrix) {
 714               		.loc 1 254 0
 715 0074 9091 0000 		lds r25,debug_config
 716 0078 892F      		mov r24,r25
 717 007a 8D7F      		andi r24,~(1<<1)
 718 007c 91FF      		sbrs r25,1
 719 007e 8260      		ori r24,1<<1
 720 0080 8093 0000 		sts debug_config,r24
 255:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 721               		.loc 1 255 0
 722 0084 81FF      		sbrs r24,1
 723 0086 00C0      		rjmp .L70
 256:../../tmk_core/common/command.c ****                 debug_enable = true;
 724               		.loc 1 256 0
 725 0088 80E0      		ldi r24,lo8(__c.2722)
 726 008a 90E0      		ldi r25,hi8(__c.2722)
 727 008c 00C0      		rjmp .L96
 728               	.L49:
 189:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 729               		.loc 1 189 0
 730 008e 8833      		cpi r24,lo8(56)
 731 0090 01F0      		breq .L57
 732 0092 00F4      		brsh .L63
 733 0094 8932      		cpi r24,lo8(41)
 734 0096 01F0      		breq .L64
 735 0098 8533      		cpi r24,lo8(53)
 736 009a 01F0      		breq .L64
 737 009c 8732      		cpi r24,lo8(39)
 738 009e 01F4      		brne .L48
 739               	.L64:
 372:../../tmk_core/common/command.c ****             break;
 740               		.loc 1 372 0
 741 00a0 80E0      		ldi r24,0
 742               	.L92:
 378:../../tmk_core/common/command.c ****             break;
 743               		.loc 1 378 0
 744 00a2 0E94 0000 		call switch_default_layer
 745 00a6 00C0      		rjmp .L93
 746               	.L63:
 189:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 747               		.loc 1 189 0
 748 00a8 8334      		cpi r24,lo8(67)
 749 00aa 01F0      		breq .L64
 750 00ac 00F4      		brsh .L65
 751 00ae 8A33      		cpi r24,lo8(58)
 752 00b0 00F4      		brsh .+2
 753 00b2 00C0      		rjmp .L48
 378:../../tmk_core/common/command.c ****             break;
 754               		.loc 1 378 0
 755 00b4 8953      		subi r24,lo8(-(-57))
 756 00b6 00C0      		rjmp .L92
 757               	.L65:
 189:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 758               		.loc 1 189 0
 759 00b8 8834      		cpi r24,lo8(72)
 760 00ba 01F0      		breq .+2
 761 00bc 00C0      		rjmp .L48
 236:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 762               		.loc 1 236 0
 763 00be 0E94 0000 		call clear_keyboard
 237:../../tmk_core/common/command.c ****             wait_ms(1000);
 764               		.loc 1 237 0
 765 00c2 80E0      		ldi r24,lo8(__c.2714)
 766 00c4 90E0      		ldi r25,hi8(__c.2714)
 767 00c6 0E94 0000 		call xputs
 768               	.LBB107:
 769               	.LBB108:
 770               		.file 2 "c:\\avr-gcc-7.2.0-x64-mingw\\avr\\include\\util\\delay.h"
   1:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    All rights reserved.
   5:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
   6:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
   9:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  12:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      distribution.
  16:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  17:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  21:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  33:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  35:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  38:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #  endif
  42:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  44:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #include <math.h>
  47:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  48:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /** \file */
  49:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \code
  51:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \endcode
  55:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  56:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     used.
  60:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  61:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  70:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  79:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  83:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** */
  84:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  85:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif
  89:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  90:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \def F_CPU
  95:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  97:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 103:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     integer value.
 107:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****  */
 108:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif
 110:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 111:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif
 114:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 115:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #  include <math.h>
 119:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif
 120:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 121:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /**
 122:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 124:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 126:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 129:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 131:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 137:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 142:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 147:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    respectively.
 151:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 152:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    \note
 153:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 154:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 164:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****  */
 165:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** void
 166:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** {
 168:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 176:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 179:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 182:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	#else
 183:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 		//round up by default
 184:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	#endif
 186:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 187:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 771               		.loc 2 187 0
 772 00ca 9FEF      		ldi r25,lo8(3199999)
 773 00cc 23ED      		ldi r18,hi8(3199999)
 774 00ce 80E3      		ldi r24,hlo8(3199999)
 775 00d0 9150      	1:	subi r25,1
 776 00d2 2040      		sbci r18,0
 777 00d4 8040      		sbci r24,0
 778 00d6 01F4      		brne 1b
 779 00d8 00C0      		rjmp .
 780 00da 0000      		nop
 781               	.LBE108:
 782               	.LBE107:
 239:../../tmk_core/common/command.c ****             break;
 783               		.loc 1 239 0
 784 00dc 0E94 0000 		call bootloader_jump
 785 00e0 00C0      		rjmp .L93
 786               	.L56:
 205:../../tmk_core/common/command.c ****             print_eeconfig();
 787               		.loc 1 205 0
 788 00e2 80E0      		ldi r24,lo8(__c.2705)
 789 00e4 90E0      		ldi r25,hi8(__c.2705)
 790 00e6 0E94 0000 		call xputs
 791               	.LBB109:
 792               	.LBB110:
 149:../../tmk_core/common/command.c **** 
 793               		.loc 1 149 0
 794 00ea 80E0      		ldi r24,lo8(__c.2609)
 795 00ec 90E0      		ldi r25,hi8(__c.2609)
 796 00ee 0E94 0000 		call xputs
 797 00f2 0E94 0000 		call eeconfig_read_default_layer
 798 00f6 1F92      		push __zero_reg__
 799               	.LCFI54:
 800               		.cfi_def_cfa_offset 4
 801 00f8 8F93      		push r24
 802               	.LCFI55:
 803               		.cfi_def_cfa_offset 5
 804 00fa 80E0      		ldi r24,lo8(__c.2611)
 805 00fc 90E0      		ldi r25,hi8(__c.2611)
 806 00fe 9F93      		push r25
 807               	.LCFI56:
 808               		.cfi_def_cfa_offset 6
 809 0100 8F93      		push r24
 810               	.LCFI57:
 811               		.cfi_def_cfa_offset 7
 812 0102 0E94 0000 		call __xprintf
 813 0106 80E0      		ldi r24,lo8(__c.2613)
 814 0108 90E0      		ldi r25,hi8(__c.2613)
 815 010a 0E94 0000 		call xputs
 152:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 816               		.loc 1 152 0
 817 010e 0E94 0000 		call eeconfig_read_debug
 818 0112 C82F      		mov r28,r24
 153:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 819               		.loc 1 153 0
 820 0114 80E0      		ldi r24,lo8(__c.2616)
 821 0116 90E0      		ldi r25,hi8(__c.2616)
 822 0118 0E94 0000 		call xputs
 823 011c 1F92      		push __zero_reg__
 824               	.LCFI58:
 825               		.cfi_def_cfa_offset 8
 826 011e CF93      		push r28
 827               	.LCFI59:
 828               		.cfi_def_cfa_offset 9
 829 0120 80E0      		ldi r24,lo8(__c.2618)
 830 0122 90E0      		ldi r25,hi8(__c.2618)
 831 0124 9F93      		push r25
 832               	.LCFI60:
 833               		.cfi_def_cfa_offset 10
 834 0126 8F93      		push r24
 835               	.LCFI61:
 836               		.cfi_def_cfa_offset 11
 837 0128 0E94 0000 		call __xprintf
 838 012c 80E0      		ldi r24,lo8(__c.2620)
 839 012e 90E0      		ldi r25,hi8(__c.2620)
 840 0130 0E94 0000 		call xputs
 154:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 841               		.loc 1 154 0
 842 0134 80E0      		ldi r24,lo8(__c.2622)
 843 0136 90E0      		ldi r25,hi8(__c.2622)
 844 0138 0E94 0000 		call xputs
 845 013c 8C2F      		mov r24,r28
 846 013e 8170      		andi r24,1
 847 0140 1F92      		push __zero_reg__
 848               	.LCFI62:
 849               		.cfi_def_cfa_offset 12
 850 0142 8F93      		push r24
 851               	.LCFI63:
 852               		.cfi_def_cfa_offset 13
 853 0144 80E0      		ldi r24,lo8(__c.2624)
 854 0146 90E0      		ldi r25,hi8(__c.2624)
 855 0148 9F93      		push r25
 856               	.LCFI64:
 857               		.cfi_def_cfa_offset 14
 858 014a 8F93      		push r24
 859               	.LCFI65:
 860               		.cfi_def_cfa_offset 15
 861 014c 0E94 0000 		call __xprintf
 862 0150 80E0      		ldi r24,lo8(__c.2626)
 863 0152 90E0      		ldi r25,hi8(__c.2626)
 864 0154 0E94 0000 		call xputs
 155:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 865               		.loc 1 155 0
 866 0158 80E0      		ldi r24,lo8(__c.2628)
 867 015a 90E0      		ldi r25,hi8(__c.2628)
 868 015c 0E94 0000 		call xputs
 869 0160 C1FB      		bst r28,1
 870 0162 8827      		clr r24
 871 0164 80F9      		bld r24,0
 872 0166 1F92      		push __zero_reg__
 873               	.LCFI66:
 874               		.cfi_def_cfa_offset 16
 875 0168 8F93      		push r24
 876               	.LCFI67:
 877               		.cfi_def_cfa_offset 17
 878 016a 80E0      		ldi r24,lo8(__c.2630)
 879 016c 90E0      		ldi r25,hi8(__c.2630)
 880 016e 9F93      		push r25
 881               	.LCFI68:
 882               		.cfi_def_cfa_offset 18
 883 0170 8F93      		push r24
 884               	.LCFI69:
 885               		.cfi_def_cfa_offset 19
 886 0172 0E94 0000 		call __xprintf
 887 0176 80E0      		ldi r24,lo8(__c.2632)
 888 0178 90E0      		ldi r25,hi8(__c.2632)
 889 017a 0E94 0000 		call xputs
 156:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 890               		.loc 1 156 0
 891 017e 80E0      		ldi r24,lo8(__c.2634)
 892 0180 90E0      		ldi r25,hi8(__c.2634)
 893 0182 0E94 0000 		call xputs
 894 0186 C2FB      		bst r28,2
 895 0188 8827      		clr r24
 896 018a 80F9      		bld r24,0
 897 018c 1F92      		push __zero_reg__
 898               	.LCFI70:
 899               		.cfi_def_cfa_offset 20
 900 018e 8F93      		push r24
 901               	.LCFI71:
 902               		.cfi_def_cfa_offset 21
 903 0190 80E0      		ldi r24,lo8(__c.2636)
 904 0192 90E0      		ldi r25,hi8(__c.2636)
 905 0194 9F93      		push r25
 906               	.LCFI72:
 907               		.cfi_def_cfa_offset 22
 908 0196 8F93      		push r24
 909               	.LCFI73:
 910               		.cfi_def_cfa_offset 23
 911 0198 0E94 0000 		call __xprintf
 912 019c 80E0      		ldi r24,lo8(__c.2638)
 913 019e 90E0      		ldi r25,hi8(__c.2638)
 914 01a0 0E94 0000 		call xputs
 157:../../tmk_core/common/command.c **** 
 915               		.loc 1 157 0
 916 01a4 80E0      		ldi r24,lo8(__c.2640)
 917 01a6 90E0      		ldi r25,hi8(__c.2640)
 918 01a8 0E94 0000 		call xputs
 919 01ac C3FB      		bst r28,3
 920 01ae CC27      		clr r28
 921 01b0 C0F9      		bld r28,0
 922 01b2 1F92      		push __zero_reg__
 923               	.LCFI74:
 924               		.cfi_def_cfa_offset 24
 925 01b4 CF93      		push r28
 926               	.LCFI75:
 927               		.cfi_def_cfa_offset 25
 928 01b6 80E0      		ldi r24,lo8(__c.2642)
 929 01b8 90E0      		ldi r25,hi8(__c.2642)
 930 01ba 9F93      		push r25
 931               	.LCFI76:
 932               		.cfi_def_cfa_offset 26
 933 01bc 8F93      		push r24
 934               	.LCFI77:
 935               		.cfi_def_cfa_offset 27
 936 01be 0E94 0000 		call __xprintf
 937 01c2 80E0      		ldi r24,lo8(__c.2644)
 938 01c4 90E0      		ldi r25,hi8(__c.2644)
 939 01c6 0E94 0000 		call xputs
 160:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 940               		.loc 1 160 0
 941 01ca 0E94 0000 		call eeconfig_read_keymap
 942 01ce C82F      		mov r28,r24
 161:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 943               		.loc 1 161 0
 944 01d0 80E0      		ldi r24,lo8(__c.2647)
 945 01d2 90E0      		ldi r25,hi8(__c.2647)
 946 01d4 0E94 0000 		call xputs
 947 01d8 1F92      		push __zero_reg__
 948               	.LCFI78:
 949               		.cfi_def_cfa_offset 28
 950 01da CF93      		push r28
 951               	.LCFI79:
 952               		.cfi_def_cfa_offset 29
 953 01dc 80E0      		ldi r24,lo8(__c.2649)
 954 01de 90E0      		ldi r25,hi8(__c.2649)
 955 01e0 9F93      		push r25
 956               	.LCFI80:
 957               		.cfi_def_cfa_offset 30
 958 01e2 8F93      		push r24
 959               	.LCFI81:
 960               		.cfi_def_cfa_offset 31
 961 01e4 0E94 0000 		call __xprintf
 962 01e8 80E0      		ldi r24,lo8(__c.2651)
 963 01ea 90E0      		ldi r25,hi8(__c.2651)
 964 01ec 0E94 0000 		call xputs
 162:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 965               		.loc 1 162 0
 966 01f0 80E0      		ldi r24,lo8(__c.2653)
 967 01f2 90E0      		ldi r25,hi8(__c.2653)
 968 01f4 0E94 0000 		call xputs
 969 01f8 8C2F      		mov r24,r28
 970 01fa 8170      		andi r24,1
 971 01fc 1F92      		push __zero_reg__
 972               	.LCFI82:
 973               		.cfi_def_cfa_offset 32
 974 01fe 8F93      		push r24
 975               	.LCFI83:
 976               		.cfi_def_cfa_offset 33
 977 0200 80E0      		ldi r24,lo8(__c.2655)
 978 0202 90E0      		ldi r25,hi8(__c.2655)
 979 0204 9F93      		push r25
 980               	.LCFI84:
 981               		.cfi_def_cfa_offset 34
 982 0206 8F93      		push r24
 983               	.LCFI85:
 984               		.cfi_def_cfa_offset 35
 985 0208 0E94 0000 		call __xprintf
 986 020c 8DB7      		in r24,__SP_L__
 987 020e 9EB7      		in r25,__SP_H__
 988 0210 8096      		adiw r24,32
 989 0212 0FB6      		in __tmp_reg__,__SREG__
 990 0214 F894      		cli
 991 0216 9EBF      		out __SP_H__,r25
 992 0218 0FBE      		out __SREG__,__tmp_reg__
 993 021a 8DBF      		out __SP_L__,r24
 994               	.LCFI86:
 995               		.cfi_def_cfa_offset 3
 996 021c 80E0      		ldi r24,lo8(__c.2657)
 997 021e 90E0      		ldi r25,hi8(__c.2657)
 998 0220 0E94 0000 		call xputs
 163:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 999               		.loc 1 163 0
 1000 0224 80E0      		ldi r24,lo8(__c.2659)
 1001 0226 90E0      		ldi r25,hi8(__c.2659)
 1002 0228 0E94 0000 		call xputs
 1003 022c C1FB      		bst r28,1
 1004 022e 8827      		clr r24
 1005 0230 80F9      		bld r24,0
 1006 0232 1F92      		push __zero_reg__
 1007               	.LCFI87:
 1008               		.cfi_def_cfa_offset 4
 1009 0234 8F93      		push r24
 1010               	.LCFI88:
 1011               		.cfi_def_cfa_offset 5
 1012 0236 80E0      		ldi r24,lo8(__c.2661)
 1013 0238 90E0      		ldi r25,hi8(__c.2661)
 1014 023a 9F93      		push r25
 1015               	.LCFI89:
 1016               		.cfi_def_cfa_offset 6
 1017 023c 8F93      		push r24
 1018               	.LCFI90:
 1019               		.cfi_def_cfa_offset 7
 1020 023e 0E94 0000 		call __xprintf
 1021 0242 80E0      		ldi r24,lo8(__c.2663)
 1022 0244 90E0      		ldi r25,hi8(__c.2663)
 1023 0246 0E94 0000 		call xputs
 164:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 1024               		.loc 1 164 0
 1025 024a 80E0      		ldi r24,lo8(__c.2665)
 1026 024c 90E0      		ldi r25,hi8(__c.2665)
 1027 024e 0E94 0000 		call xputs
 1028 0252 C2FB      		bst r28,2
 1029 0254 8827      		clr r24
 1030 0256 80F9      		bld r24,0
 1031 0258 1F92      		push __zero_reg__
 1032               	.LCFI91:
 1033               		.cfi_def_cfa_offset 8
 1034 025a 8F93      		push r24
 1035               	.LCFI92:
 1036               		.cfi_def_cfa_offset 9
 1037 025c 80E0      		ldi r24,lo8(__c.2667)
 1038 025e 90E0      		ldi r25,hi8(__c.2667)
 1039 0260 9F93      		push r25
 1040               	.LCFI93:
 1041               		.cfi_def_cfa_offset 10
 1042 0262 8F93      		push r24
 1043               	.LCFI94:
 1044               		.cfi_def_cfa_offset 11
 1045 0264 0E94 0000 		call __xprintf
 1046 0268 80E0      		ldi r24,lo8(__c.2669)
 1047 026a 90E0      		ldi r25,hi8(__c.2669)
 1048 026c 0E94 0000 		call xputs
 165:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1049               		.loc 1 165 0
 1050 0270 80E0      		ldi r24,lo8(__c.2671)
 1051 0272 90E0      		ldi r25,hi8(__c.2671)
 1052 0274 0E94 0000 		call xputs
 1053 0278 C3FB      		bst r28,3
 1054 027a 8827      		clr r24
 1055 027c 80F9      		bld r24,0
 1056 027e 1F92      		push __zero_reg__
 1057               	.LCFI95:
 1058               		.cfi_def_cfa_offset 12
 1059 0280 8F93      		push r24
 1060               	.LCFI96:
 1061               		.cfi_def_cfa_offset 13
 1062 0282 80E0      		ldi r24,lo8(__c.2673)
 1063 0284 90E0      		ldi r25,hi8(__c.2673)
 1064 0286 9F93      		push r25
 1065               	.LCFI97:
 1066               		.cfi_def_cfa_offset 14
 1067 0288 8F93      		push r24
 1068               	.LCFI98:
 1069               		.cfi_def_cfa_offset 15
 1070 028a 0E94 0000 		call __xprintf
 1071 028e 80E0      		ldi r24,lo8(__c.2675)
 1072 0290 90E0      		ldi r25,hi8(__c.2675)
 1073 0292 0E94 0000 		call xputs
 166:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1074               		.loc 1 166 0
 1075 0296 80E0      		ldi r24,lo8(__c.2677)
 1076 0298 90E0      		ldi r25,hi8(__c.2677)
 1077 029a 0E94 0000 		call xputs
 1078 029e C4FB      		bst r28,4
 1079 02a0 8827      		clr r24
 1080 02a2 80F9      		bld r24,0
 1081 02a4 1F92      		push __zero_reg__
 1082               	.LCFI99:
 1083               		.cfi_def_cfa_offset 16
 1084 02a6 8F93      		push r24
 1085               	.LCFI100:
 1086               		.cfi_def_cfa_offset 17
 1087 02a8 80E0      		ldi r24,lo8(__c.2679)
 1088 02aa 90E0      		ldi r25,hi8(__c.2679)
 1089 02ac 9F93      		push r25
 1090               	.LCFI101:
 1091               		.cfi_def_cfa_offset 18
 1092 02ae 8F93      		push r24
 1093               	.LCFI102:
 1094               		.cfi_def_cfa_offset 19
 1095 02b0 0E94 0000 		call __xprintf
 1096 02b4 80E0      		ldi r24,lo8(__c.2681)
 1097 02b6 90E0      		ldi r25,hi8(__c.2681)
 1098 02b8 0E94 0000 		call xputs
 167:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1099               		.loc 1 167 0
 1100 02bc 80E0      		ldi r24,lo8(__c.2683)
 1101 02be 90E0      		ldi r25,hi8(__c.2683)
 1102 02c0 0E94 0000 		call xputs
 1103 02c4 C5FB      		bst r28,5
 1104 02c6 8827      		clr r24
 1105 02c8 80F9      		bld r24,0
 1106 02ca 1F92      		push __zero_reg__
 1107               	.LCFI103:
 1108               		.cfi_def_cfa_offset 20
 1109 02cc 8F93      		push r24
 1110               	.LCFI104:
 1111               		.cfi_def_cfa_offset 21
 1112 02ce 80E0      		ldi r24,lo8(__c.2685)
 1113 02d0 90E0      		ldi r25,hi8(__c.2685)
 1114 02d2 9F93      		push r25
 1115               	.LCFI105:
 1116               		.cfi_def_cfa_offset 22
 1117 02d4 8F93      		push r24
 1118               	.LCFI106:
 1119               		.cfi_def_cfa_offset 23
 1120 02d6 0E94 0000 		call __xprintf
 1121 02da 80E0      		ldi r24,lo8(__c.2687)
 1122 02dc 90E0      		ldi r25,hi8(__c.2687)
 1123 02de 0E94 0000 		call xputs
 168:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1124               		.loc 1 168 0
 1125 02e2 80E0      		ldi r24,lo8(__c.2689)
 1126 02e4 90E0      		ldi r25,hi8(__c.2689)
 1127 02e6 0E94 0000 		call xputs
 1128 02ea C6FB      		bst r28,6
 1129 02ec 8827      		clr r24
 1130 02ee 80F9      		bld r24,0
 1131 02f0 1F92      		push __zero_reg__
 1132               	.LCFI107:
 1133               		.cfi_def_cfa_offset 24
 1134 02f2 8F93      		push r24
 1135               	.LCFI108:
 1136               		.cfi_def_cfa_offset 25
 1137 02f4 80E0      		ldi r24,lo8(__c.2691)
 1138 02f6 90E0      		ldi r25,hi8(__c.2691)
 1139 02f8 9F93      		push r25
 1140               	.LCFI109:
 1141               		.cfi_def_cfa_offset 26
 1142 02fa 8F93      		push r24
 1143               	.LCFI110:
 1144               		.cfi_def_cfa_offset 27
 1145 02fc 0E94 0000 		call __xprintf
 1146 0300 80E0      		ldi r24,lo8(__c.2693)
 1147 0302 90E0      		ldi r25,hi8(__c.2693)
 1148 0304 0E94 0000 		call xputs
 169:../../tmk_core/common/command.c **** 
 1149               		.loc 1 169 0
 1150 0308 80E0      		ldi r24,lo8(__c.2695)
 1151 030a 90E0      		ldi r25,hi8(__c.2695)
 1152 030c 0E94 0000 		call xputs
 1153 0310 C7FB      		bst r28,7
 1154 0312 CC27      		clr r28
 1155 0314 C0F9      		bld r28,0
 1156 0316 1F92      		push __zero_reg__
 1157               	.LCFI111:
 1158               		.cfi_def_cfa_offset 28
 1159 0318 CF93      		push r28
 1160               	.LCFI112:
 1161               		.cfi_def_cfa_offset 29
 1162 031a 80E0      		ldi r24,lo8(__c.2697)
 1163 031c 90E0      		ldi r25,hi8(__c.2697)
 1164 031e 9F93      		push r25
 1165               	.LCFI113:
 1166               		.cfi_def_cfa_offset 30
 1167 0320 8F93      		push r24
 1168               	.LCFI114:
 1169               		.cfi_def_cfa_offset 31
 1170 0322 0E94 0000 		call __xprintf
 1171 0326 80E0      		ldi r24,lo8(__c.2699)
 1172 0328 90E0      		ldi r25,hi8(__c.2699)
 1173 032a 0E94 0000 		call xputs
 1174 032e 8DB7      		in r24,__SP_L__
 1175 0330 9EB7      		in r25,__SP_H__
 1176 0332 4C96      		adiw r24,28
 1177 0334 0FB6      		in __tmp_reg__,__SREG__
 1178 0336 F894      		cli
 1179 0338 9EBF      		out __SP_H__,r25
 1180 033a 0FBE      		out __SREG__,__tmp_reg__
 1181 033c 8DBF      		out __SP_L__,r24
 1182               	.LCFI115:
 1183               		.cfi_def_cfa_offset 3
 1184               	.L93:
 1185               	.LBE110:
 1186               	.LBE109:
 384:../../tmk_core/common/command.c **** }
 1187               		.loc 1 384 0
 1188 033e 81E0      		ldi r24,lo8(1)
 379:../../tmk_core/common/command.c ****         default:
 1189               		.loc 1 379 0
 1190 0340 00C0      		rjmp .L47
 1191               	.L55:
 227:../../tmk_core/common/command.c ****             debug_keyboard = false;
 1192               		.loc 1 227 0
 1193 0342 8091 0000 		lds r24,debug_config
 230:../../tmk_core/common/command.c ****             command_console_help();
 1194               		.loc 1 230 0
 1195 0346 817F      		andi r24,lo8(-15)
 1196 0348 8E7F      		andi r24,lo8(~(1<<0))
 1197 034a 8093 0000 		sts debug_config,r24
 1198               	.LBB111:
 1199               	.LBB112:
 393:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1200               		.loc 1 393 0
 1201 034e 80E0      		ldi r24,lo8(__c.2772)
 1202 0350 90E0      		ldi r25,hi8(__c.2772)
 1203 0352 0E94 0000 		call xputs
 1204               	.LBE112:
 1205               	.LBE111:
 232:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 1206               		.loc 1 232 0
 1207 0356 80E0      		ldi r24,lo8(__c.2711)
 1208 0358 90E0      		ldi r25,hi8(__c.2711)
 1209 035a 0E94 0000 		call xputs
 233:../../tmk_core/common/command.c ****             break;
 1210               		.loc 1 233 0
 1211 035e 81E0      		ldi r24,lo8(1)
 1212 0360 8093 0000 		sts command_state,r24
 1213               	.L47:
 1214               	/* epilogue start */
 385:../../tmk_core/common/command.c **** 
 1215               		.loc 1 385 0
 1216 0364 CF91      		pop r28
 1217 0366 0895      		ret
 1218               	.L53:
 242:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 1219               		.loc 1 242 0
 1220 0368 8091 0000 		lds r24,debug_config
 1221 036c 80FF      		sbrs r24,0
 1222 036e 00C0      		rjmp .L69
 243:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 1223               		.loc 1 243 0
 1224 0370 80E0      		ldi r24,lo8(__c.2717)
 1225 0372 90E0      		ldi r25,hi8(__c.2717)
 1226 0374 0E94 0000 		call xputs
 244:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 1227               		.loc 1 244 0
 1228 0378 8091 0000 		lds r24,debug_config
 247:../../tmk_core/common/command.c ****             } else {
 1229               		.loc 1 247 0
 1230 037c 817F      		andi r24,lo8(-15)
 1231 037e 8E7F      		andi r24,lo8(~(1<<0))
 1232               	.L95:
 275:../../tmk_core/common/command.c ****             } else {
 1233               		.loc 1 275 0
 1234 0380 8093 0000 		sts debug_config,r24
 1235 0384 00C0      		rjmp .L93
 1236               	.L69:
 249:../../tmk_core/common/command.c ****                 debug_enable   = true;
 1237               		.loc 1 249 0
 1238 0386 80E0      		ldi r24,lo8(__c.2719)
 1239 0388 90E0      		ldi r25,hi8(__c.2719)
 1240               	.L96:
 274:../../tmk_core/common/command.c ****                 debug_enable = true;
 1241               		.loc 1 274 0
 1242 038a 0E94 0000 		call xputs
 275:../../tmk_core/common/command.c ****             } else {
 1243               		.loc 1 275 0
 1244 038e 8091 0000 		lds r24,debug_config
 1245 0392 8160      		ori r24,lo8(1<<0)
 1246 0394 00C0      		rjmp .L95
 1247               	.L70:
 259:../../tmk_core/common/command.c ****             }
 1248               		.loc 1 259 0
 1249 0396 80E0      		ldi r24,lo8(__c.2724)
 1250 0398 90E0      		ldi r25,hi8(__c.2724)
 1251 039a 00C0      		rjmp .L94
 1252               	.L51:
 263:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 1253               		.loc 1 263 0
 1254 039c 9091 0000 		lds r25,debug_config
 1255 03a0 892F      		mov r24,r25
 1256 03a2 8B7F      		andi r24,~(1<<2)
 1257 03a4 92FF      		sbrs r25,2
 1258 03a6 8460      		ori r24,1<<2
 1259 03a8 8093 0000 		sts debug_config,r24
 264:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 1260               		.loc 1 264 0
 1261 03ac 82FF      		sbrs r24,2
 1262 03ae 00C0      		rjmp .L71
 265:../../tmk_core/common/command.c ****                 debug_enable = true;
 1263               		.loc 1 265 0
 1264 03b0 80E0      		ldi r24,lo8(__c.2727)
 1265 03b2 90E0      		ldi r25,hi8(__c.2727)
 1266 03b4 00C0      		rjmp .L96
 1267               	.L71:
 268:../../tmk_core/common/command.c ****             }
 1268               		.loc 1 268 0
 1269 03b6 80E0      		ldi r24,lo8(__c.2729)
 1270 03b8 90E0      		ldi r25,hi8(__c.2729)
 1271 03ba 00C0      		rjmp .L94
 1272               	.L72:
 277:../../tmk_core/common/command.c ****             }
 1273               		.loc 1 277 0
 1274 03bc 80E0      		ldi r24,lo8(__c.2734)
 1275 03be 90E0      		ldi r25,hi8(__c.2734)
 1276 03c0 00C0      		rjmp .L94
 1277               	.L61:
 281:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 1278               		.loc 1 281 0
 1279 03c2 80E0      		ldi r24,lo8(__c.2737)
 1280 03c4 90E0      		ldi r25,hi8(__c.2737)
 1281 03c6 0E94 0000 		call xputs
 282:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 1282               		.loc 1 282 0
 1283 03ca 80E0      		ldi r24,lo8(__c.2739)
 1284 03cc 90E0      		ldi r25,hi8(__c.2739)
 1285 03ce 0E94 0000 		call xputs
 283:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 1286               		.loc 1 283 0
 1287 03d2 80E0      		ldi r24,lo8(__c.2741)
 1288 03d4 90E0      		ldi r25,hi8(__c.2741)
 1289 03d6 0E94 0000 		call xputs
 286:../../tmk_core/common/command.c ****             /* build options */
 1290               		.loc 1 286 0
 1291 03da 80E0      		ldi r24,lo8(__c.2743)
 1292 03dc 90E0      		ldi r25,hi8(__c.2743)
 1293 03de 0E94 0000 		call xputs
 288:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 1294               		.loc 1 288 0
 1295 03e2 80E0      		ldi r24,lo8(__c.2745)
 1296 03e4 90E0      		ldi r25,hi8(__c.2745)
 1297 03e6 0E94 0000 		call xputs
 324:../../tmk_core/common/command.c **** #if defined(__AVR__)
 1298               		.loc 1 324 0
 1299 03ea 80E0      		ldi r24,lo8(__c.2747)
 1300 03ec 90E0      		ldi r25,hi8(__c.2747)
 1301 03ee 00C0      		rjmp .L94
 1302               	.L58:
 334:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 1303               		.loc 1 334 0
 1304 03f0 80E0      		ldi r24,lo8(__c.2750)
 1305 03f2 90E0      		ldi r25,hi8(__c.2750)
 1306 03f4 0E94 0000 		call xputs
 335:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 1307               		.loc 1 335 0
 1308 03f8 0E94 0000 		call host_keyboard_leds
 1309 03fc 1F92      		push __zero_reg__
 1310               	.LCFI116:
 1311               		.cfi_def_cfa_offset 4
 1312 03fe 8F93      		push r24
 1313               	.LCFI117:
 1314               		.cfi_def_cfa_offset 5
 1315 0400 80E0      		ldi r24,lo8(__c.2752)
 1316 0402 90E0      		ldi r25,hi8(__c.2752)
 1317 0404 9F93      		push r25
 1318               	.LCFI118:
 1319               		.cfi_def_cfa_offset 6
 1320 0406 8F93      		push r24
 1321               	.LCFI119:
 1322               		.cfi_def_cfa_offset 7
 1323 0408 0E94 0000 		call __xprintf
 336:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 1324               		.loc 1 336 0
 1325 040c 8091 0000 		lds r24,keyboard_protocol
 1326 0410 1F92      		push __zero_reg__
 1327               	.LCFI120:
 1328               		.cfi_def_cfa_offset 8
 1329 0412 8F93      		push r24
 1330               	.LCFI121:
 1331               		.cfi_def_cfa_offset 9
 1332 0414 80E0      		ldi r24,lo8(__c.2754)
 1333 0416 90E0      		ldi r25,hi8(__c.2754)
 1334 0418 9F93      		push r25
 1335               	.LCFI122:
 1336               		.cfi_def_cfa_offset 10
 1337 041a 8F93      		push r24
 1338               	.LCFI123:
 1339               		.cfi_def_cfa_offset 11
 1340 041c 0E94 0000 		call __xprintf
 337:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1341               		.loc 1 337 0
 1342 0420 8091 0000 		lds r24,keyboard_idle
 1343 0424 1F92      		push __zero_reg__
 1344               	.LCFI124:
 1345               		.cfi_def_cfa_offset 12
 1346 0426 8F93      		push r24
 1347               	.LCFI125:
 1348               		.cfi_def_cfa_offset 13
 1349 0428 80E0      		ldi r24,lo8(__c.2756)
 1350 042a 90E0      		ldi r25,hi8(__c.2756)
 1351 042c 9F93      		push r25
 1352               	.LCFI126:
 1353               		.cfi_def_cfa_offset 14
 1354 042e 8F93      		push r24
 1355               	.LCFI127:
 1356               		.cfi_def_cfa_offset 15
 1357 0430 0E94 0000 		call __xprintf
 341:../../tmk_core/common/command.c **** 
 1358               		.loc 1 341 0
 1359 0434 0E94 0000 		call timer_read32
 1360 0438 9F93      		push r25
 1361               	.LCFI128:
 1362               		.cfi_def_cfa_offset 16
 1363 043a 8F93      		push r24
 1364               	.LCFI129:
 1365               		.cfi_def_cfa_offset 17
 1366 043c 7F93      		push r23
 1367               	.LCFI130:
 1368               		.cfi_def_cfa_offset 18
 1369 043e 6F93      		push r22
 1370               	.LCFI131:
 1371               		.cfi_def_cfa_offset 19
 1372 0440 80E0      		ldi r24,lo8(__c.2758)
 1373 0442 90E0      		ldi r25,hi8(__c.2758)
 1374 0444 9F93      		push r25
 1375               	.LCFI132:
 1376               		.cfi_def_cfa_offset 20
 1377 0446 8F93      		push r24
 1378               	.LCFI133:
 1379               		.cfi_def_cfa_offset 21
 1380 0448 0E94 0000 		call __xprintf
 356:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1381               		.loc 1 356 0
 1382 044c 8DB7      		in r24,__SP_L__
 1383 044e 9EB7      		in r25,__SP_H__
 1384 0450 4296      		adiw r24,18
 1385 0452 0FB6      		in __tmp_reg__,__SREG__
 1386 0454 F894      		cli
 1387 0456 9EBF      		out __SP_H__,r25
 1388 0458 0FBE      		out __SREG__,__tmp_reg__
 1389 045a 8DBF      		out __SP_L__,r24
 1390               	.LCFI134:
 1391               		.cfi_def_cfa_offset 3
 1392 045c 00C0      		rjmp .L93
 1393               	.L50:
 375:../../tmk_core/common/command.c ****             break;
 1394               		.loc 1 375 0
 1395 045e 8D51      		subi r24,lo8(-(-29))
 1396 0460 00C0      		rjmp .L92
 1397               		.cfi_endproc
 1398               	.LFE15:
 1400               		.section	.text.command_extra,"ax",@progbits
 1401               		.weak	command_extra
 1403               	command_extra:
 1404               	.LFB11:
  99:../../tmk_core/common/command.c ****     (void)code;
 1405               		.loc 1 99 0
 1406               		.cfi_startproc
 1407               	.LVL47:
 1408               	/* prologue: function */
 1409               	/* frame size = 0 */
 1410               	/* stack size = 0 */
 1411               	.L__stack_usage = 0
 102:../../tmk_core/common/command.c **** 
 1412               		.loc 1 102 0
 1413 0000 80E0      		ldi r24,0
 1414               	.LVL48:
 1415               	/* epilogue start */
 1416 0002 0895      		ret
 1417               		.cfi_endproc
 1418               	.LFE11:
 1420               		.set	command_extra.localalias.0,command_extra
 1421               		.section	.text.command_console_extra,"ax",@progbits
 1422               		.weak	command_console_extra
 1424               	command_console_extra:
 1425               	.LFB26:
 1426               		.cfi_startproc
 1427               	/* prologue: function */
 1428               	/* frame size = 0 */
 1429               	/* stack size = 0 */
 1430               	.L__stack_usage = 0
 1431 0000 0C94 0000 		jmp command_extra.localalias.0
 1432               		.cfi_endproc
 1433               	.LFE26:
 1435               		.section	.text.command_proc,"ax",@progbits
 1436               	.global	command_proc
 1438               	command_proc:
 1439               	.LFB10:
  70:../../tmk_core/common/command.c ****     switch (command_state) {
 1440               		.loc 1 70 0
 1441               		.cfi_startproc
  70:../../tmk_core/common/command.c ****     switch (command_state) {
 1442               		.loc 1 70 0
 1443 0000 CF93      		push r28
 1444               	.LCFI135:
 1445               		.cfi_def_cfa_offset 3
 1446               		.cfi_offset 28, -2
 1447               	/* prologue: function */
 1448               	/* frame size = 0 */
 1449               	/* stack size = 1 */
 1450               	.L__stack_usage = 1
 1451 0002 C82F      		mov r28,r24
  71:../../tmk_core/common/command.c ****         case ONESHOT:
 1452               		.loc 1 71 0
 1453 0004 8091 0000 		lds r24,command_state
 1454 0008 8130      		cpi r24,lo8(1)
 1455 000a 01F0      		breq .L101
 1456 000c 00F0      		brlo .L102
 1457 000e 8230      		cpi r24,lo8(2)
 1458 0010 01F4      		brne .+2
 1459 0012 00C0      		rjmp .L103
  89:../../tmk_core/common/command.c ****             return false;
 1460               		.loc 1 89 0
 1461 0014 1092 0000 		sts command_state,__zero_reg__
 1462               	.L130:
  74:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1463               		.loc 1 74 0
 1464 0018 80E0      		ldi r24,0
 1465 001a 00C0      		rjmp .L99
 1466               	.L102:
  73:../../tmk_core/common/command.c ****                 return false;
 1467               		.loc 1 73 0
 1468 001c E091 0000 		lds r30,keyboard_report
 1469 0020 F091 0000 		lds r31,keyboard_report+1
 1470 0024 8081      		ld r24,Z
 1471 0026 8232      		cpi r24,lo8(34)
 1472 0028 01F4      		brne .L130
 1473               	.L166:
  79:../../tmk_core/common/command.c ****             else
 1474               		.loc 1 79 0
 1475 002a 8C2F      		mov r24,r28
 1476 002c 0E94 0000 		call command_extra
 1477 0030 8111      		cpse r24,__zero_reg__
 1478 0032 00C0      		rjmp .L132
  79:../../tmk_core/common/command.c ****             else
 1479               		.loc 1 79 0 is_stmt 0 discriminator 2
 1480 0034 8C2F      		mov r24,r28
 1481 0036 0E94 0000 		call command_common
 1482               	.L108:
  81:../../tmk_core/common/command.c ****             break;
 1483               		.loc 1 81 0 is_stmt 1 discriminator 6
 1484 003a 8170      		andi r24,lo8(1)
 1485               	.L99:
 1486               	/* epilogue start */
  93:../../tmk_core/common/command.c **** 
 1487               		.loc 1 93 0
 1488 003c CF91      		pop r28
 1489 003e 0895      		ret
 1490               	.L101:
  78:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1491               		.loc 1 78 0
 1492 0040 E091 0000 		lds r30,keyboard_report
 1493 0044 F091 0000 		lds r31,keyboard_report+1
 1494 0048 8081      		ld r24,Z
 1495 004a 8232      		cpi r24,lo8(34)
 1496 004c 01F0      		breq .L166
  81:../../tmk_core/common/command.c ****             break;
 1497               		.loc 1 81 0
 1498 004e 8C2F      		mov r24,r28
 1499 0050 0E94 0000 		call command_console_extra
 1500 0054 8111      		cpse r24,__zero_reg__
 1501 0056 00C0      		rjmp .L133
 1502               	.LBB151:
 1503               	.LBB152:
 403:../../tmk_core/common/command.c ****         case KC_H:
 1504               		.loc 1 403 0
 1505 0058 C431      		cpi r28,lo8(20)
 1506 005a 01F0      		breq .L110
 1507 005c 00F4      		brsh .L111
 1508 005e CB30      		cpi r28,lo8(11)
 1509 0060 01F0      		breq .L112
 1510 0062 C031      		cpi r28,lo8(16)
 1511 0064 01F0      		breq .L113
 1512               	.L109:
 420:../../tmk_core/common/command.c ****             return false;
 1513               		.loc 1 420 0
 1514 0066 80E0      		ldi r24,lo8(__c.2786)
 1515 0068 90E0      		ldi r25,hi8(__c.2786)
 1516 006a 0E94 0000 		call xputs
 1517 006e 00C0      		rjmp .L159
 1518               	.L132:
 1519               	.LBE152:
 1520               	.LBE151:
  79:../../tmk_core/common/command.c ****             else
 1521               		.loc 1 79 0
 1522 0070 81E0      		ldi r24,lo8(1)
 1523 0072 90E0      		ldi r25,0
 1524 0074 00C0      		rjmp .L108
 1525               	.L111:
 1526               	.LBB158:
 1527               	.LBB155:
 403:../../tmk_core/common/command.c ****         case KC_H:
 1528               		.loc 1 403 0
 1529 0076 C932      		cpi r28,lo8(41)
 1530 0078 01F0      		breq .L110
 1531 007a C833      		cpi r28,lo8(56)
 1532 007c 01F4      		brne .L109
 1533               	.L112:
 1534               	.LBB153:
 1535               	.LBB154:
 393:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1536               		.loc 1 393 0
 1537 007e 80E0      		ldi r24,lo8(__c.2772)
 1538 0080 90E0      		ldi r25,hi8(__c.2772)
 1539 0082 0E94 0000 		call xputs
 1540               	.LBE154:
 1541               	.LBE153:
 423:../../tmk_core/common/command.c ****     return true;
 1542               		.loc 1 423 0
 1543 0086 80E0      		ldi r24,lo8(__c.2788)
 1544 0088 90E0      		ldi r25,hi8(__c.2788)
 1545 008a 0E94 0000 		call xputs
 1546               	.L133:
 1547               	.LBE155:
 1548               	.LBE158:
  81:../../tmk_core/common/command.c ****             break;
 1549               		.loc 1 81 0
 1550 008e 81E0      		ldi r24,lo8(1)
 1551 0090 00C0      		rjmp .L108
 1552               	.L110:
 1553               	.LBB159:
 1554               	.LBB156:
 410:../../tmk_core/common/command.c ****             return false;
 1555               		.loc 1 410 0
 1556 0092 1092 0000 		sts command_state,__zero_reg__
 1557               	.L159:
 1558               	.LBE156:
 1559               	.LBE159:
  81:../../tmk_core/common/command.c ****             break;
 1560               		.loc 1 81 0
 1561 0096 80E0      		ldi r24,0
 1562 0098 00C0      		rjmp .L108
 1563               	.L113:
 1564               	.LBB160:
 1565               	.LBB157:
 414:../../tmk_core/common/command.c ****             print("M> ");
 1566               		.loc 1 414 0
 1567 009a 0E94 0000 		call mousekey_console_help
 415:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1568               		.loc 1 415 0
 1569 009e 80E0      		ldi r24,lo8(__c.2783)
 1570 00a0 90E0      		ldi r25,hi8(__c.2783)
 1571 00a2 0E94 0000 		call xputs
 416:../../tmk_core/common/command.c ****             return true;
 1572               		.loc 1 416 0
 1573 00a6 82E0      		ldi r24,lo8(2)
 1574 00a8 8093 0000 		sts command_state,r24
 1575 00ac 00C0      		rjmp .L133
 1576               	.L103:
 1577               	.LBE157:
 1578               	.LBE160:
 1579               	.LBB161:
 1580               	.LBB162:
 568:../../tmk_core/common/command.c ****         case KC_H:
 1581               		.loc 1 568 0
 1582 00ae C432      		cpi r28,lo8(36)
 1583 00b0 00F4      		brsh .L115
 1584 00b2 CE31      		cpi r28,lo8(30)
 1585 00b4 00F0      		brlo .+2
 1586 00b6 00C0      		rjmp .L116
 1587 00b8 CB30      		cpi r28,lo8(11)
 1588 00ba 01F0      		breq .L117
 1589 00bc 00F4      		brsh .L118
 1590 00be C730      		cpi r28,lo8(7)
 1591 00c0 01F4      		brne .+2
 1592 00c2 00C0      		rjmp .L119
 1593               	.L114:
 616:../../tmk_core/common/command.c ****             return false;
 1594               		.loc 1 616 0
 1595 00c4 80E0      		ldi r24,lo8(__c.2910)
 1596 00c6 90E0      		ldi r25,hi8(__c.2910)
 1597               	.L163:
 622:../../tmk_core/common/command.c ****     }
 1598               		.loc 1 622 0
 1599 00c8 0E94 0000 		call xputs
 1600 00cc 00C0      		rjmp .L162
 1601               	.L118:
 568:../../tmk_core/common/command.c ****         case KC_H:
 1602               		.loc 1 568 0
 1603 00ce C331      		cpi r28,lo8(19)
 1604 00d0 01F0      		breq .L120
 1605 00d2 C431      		cpi r28,lo8(20)
 1606 00d4 01F4      		brne .L114
 1607               	.L121:
 575:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 1608               		.loc 1 575 0
 1609 00d6 8091 0000 		lds r24,mousekey_param
 1610 00da 8823      		tst r24
 1611 00dc 01F0      		breq .L128
 576:../../tmk_core/common/command.c ****             } else {
 1612               		.loc 1 576 0
 1613 00de 1092 0000 		sts mousekey_param,__zero_reg__
 1614 00e2 00C0      		rjmp .L127
 1615               	.L115:
 568:../../tmk_core/common/command.c ****         case KC_H:
 1616               		.loc 1 568 0
 1617 00e4 CB34      		cpi r28,lo8(75)
 1618 00e6 01F4      		brne .+2
 1619 00e8 00C0      		rjmp .L122
 1620 00ea 00F4      		brsh .L123
 1621 00ec C932      		cpi r28,lo8(41)
 1622 00ee 01F0      		breq .L121
 1623 00f0 C833      		cpi r28,lo8(56)
 1624 00f2 01F4      		brne .L114
 1625               	.L117:
 571:../../tmk_core/common/command.c ****             break;
 1626               		.loc 1 571 0
 1627 00f4 0E94 0000 		call mousekey_console_help
 1628               	.L127:
 619:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1629               		.loc 1 619 0
 1630 00f8 8091 0000 		lds r24,mousekey_param
 1631 00fc 8823      		tst r24
 1632 00fe 01F4      		brne .+2
 1633 0100 00C0      		rjmp .L129
 620:../../tmk_core/common/command.c ****     } else {
 1634               		.loc 1 620 0
 1635 0102 1F92      		push __zero_reg__
 1636               	.LCFI136:
 1637               		.cfi_def_cfa_offset 4
 1638 0104 8F93      		push r24
 1639               	.LCFI137:
 1640               		.cfi_def_cfa_offset 5
 1641 0106 80E0      		ldi r24,lo8(__c.2912)
 1642 0108 90E0      		ldi r25,hi8(__c.2912)
 1643 010a 9F93      		push r25
 1644               	.LCFI138:
 1645               		.cfi_def_cfa_offset 6
 1646 010c 8F93      		push r24
 1647               	.LCFI139:
 1648               		.cfi_def_cfa_offset 7
 1649 010e 0E94 0000 		call __xprintf
 1650 0112 0F90      		pop __tmp_reg__
 1651 0114 0F90      		pop __tmp_reg__
 1652 0116 0F90      		pop __tmp_reg__
 1653 0118 0F90      		pop __tmp_reg__
 1654               	.LCFI140:
 1655               		.cfi_def_cfa_offset 3
 1656               	.L162:
 1657               	.LBE162:
 1658               	.LBE161:
  92:../../tmk_core/common/command.c **** }
 1659               		.loc 1 92 0
 1660 011a 81E0      		ldi r24,lo8(1)
 1661 011c 00C0      		rjmp .L99
 1662               	.L123:
 1663               	.LBB166:
 1664               	.LBB165:
 568:../../tmk_core/common/command.c ****         case KC_H:
 1665               		.loc 1 568 0
 1666 011e C135      		cpi r28,lo8(81)
 1667 0120 01F4      		brne .+2
 1668 0122 00C0      		rjmp .L124
 1669 0124 C235      		cpi r28,lo8(82)
 1670 0126 01F4      		brne .+2
 1671 0128 00C0      		rjmp .L125
 1672 012a CE34      		cpi r28,lo8(78)
 1673 012c 01F4      		brne .L114
 604:../../tmk_core/common/command.c ****             break;
 1674               		.loc 1 604 0
 1675 012e 6AE0      		ldi r22,lo8(10)
 1676 0130 00C0      		rjmp .L161
 1677               	.L128:
 578:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 1678               		.loc 1 578 0
 1679 0132 80E0      		ldi r24,lo8(__c.2893)
 1680 0134 90E0      		ldi r25,hi8(__c.2893)
 1681 0136 0E94 0000 		call xputs
 579:../../tmk_core/common/command.c ****                 return false;
 1682               		.loc 1 579 0
 1683 013a 81E0      		ldi r24,lo8(1)
 1684 013c 8093 0000 		sts command_state,r24
 1685 0140 00C0      		rjmp .L99
 1686               	.L120:
 1687               	.LBB163:
 1688               	.LBB164:
 436:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1689               		.loc 1 436 0
 1690 0142 80E0      		ldi r24,lo8(__c.2794)
 1691 0144 90E0      		ldi r25,hi8(__c.2794)
 1692 0146 0E94 0000 		call xputs
 437:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1693               		.loc 1 437 0
 1694 014a 80E0      		ldi r24,lo8(__c.2796)
 1695 014c 90E0      		ldi r25,hi8(__c.2796)
 1696 014e 0E94 0000 		call xputs
 1697 0152 8091 0000 		lds r24,mk_delay
 1698 0156 1F92      		push __zero_reg__
 1699               	.LCFI141:
 1700               		.cfi_def_cfa_offset 4
 1701 0158 8F93      		push r24
 1702               	.LCFI142:
 1703               		.cfi_def_cfa_offset 5
 1704 015a 80E0      		ldi r24,lo8(__c.2798)
 1705 015c 90E0      		ldi r25,hi8(__c.2798)
 1706 015e 9F93      		push r25
 1707               	.LCFI143:
 1708               		.cfi_def_cfa_offset 6
 1709 0160 8F93      		push r24
 1710               	.LCFI144:
 1711               		.cfi_def_cfa_offset 7
 1712 0162 0E94 0000 		call __xprintf
 1713 0166 80E0      		ldi r24,lo8(__c.2800)
 1714 0168 90E0      		ldi r25,hi8(__c.2800)
 1715 016a 0E94 0000 		call xputs
 438:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1716               		.loc 1 438 0
 1717 016e 80E0      		ldi r24,lo8(__c.2802)
 1718 0170 90E0      		ldi r25,hi8(__c.2802)
 1719 0172 0E94 0000 		call xputs
 1720 0176 8091 0000 		lds r24,mk_interval
 1721 017a 1F92      		push __zero_reg__
 1722               	.LCFI145:
 1723               		.cfi_def_cfa_offset 8
 1724 017c 8F93      		push r24
 1725               	.LCFI146:
 1726               		.cfi_def_cfa_offset 9
 1727 017e 80E0      		ldi r24,lo8(__c.2804)
 1728 0180 90E0      		ldi r25,hi8(__c.2804)
 1729 0182 9F93      		push r25
 1730               	.LCFI147:
 1731               		.cfi_def_cfa_offset 10
 1732 0184 8F93      		push r24
 1733               	.LCFI148:
 1734               		.cfi_def_cfa_offset 11
 1735 0186 0E94 0000 		call __xprintf
 1736 018a 80E0      		ldi r24,lo8(__c.2806)
 1737 018c 90E0      		ldi r25,hi8(__c.2806)
 1738 018e 0E94 0000 		call xputs
 439:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1739               		.loc 1 439 0
 1740 0192 80E0      		ldi r24,lo8(__c.2808)
 1741 0194 90E0      		ldi r25,hi8(__c.2808)
 1742 0196 0E94 0000 		call xputs
 1743 019a 8091 0000 		lds r24,mk_max_speed
 1744 019e 1F92      		push __zero_reg__
 1745               	.LCFI149:
 1746               		.cfi_def_cfa_offset 12
 1747 01a0 8F93      		push r24
 1748               	.LCFI150:
 1749               		.cfi_def_cfa_offset 13
 1750 01a2 80E0      		ldi r24,lo8(__c.2810)
 1751 01a4 90E0      		ldi r25,hi8(__c.2810)
 1752 01a6 9F93      		push r25
 1753               	.LCFI151:
 1754               		.cfi_def_cfa_offset 14
 1755 01a8 8F93      		push r24
 1756               	.LCFI152:
 1757               		.cfi_def_cfa_offset 15
 1758 01aa 0E94 0000 		call __xprintf
 1759 01ae 80E0      		ldi r24,lo8(__c.2812)
 1760 01b0 90E0      		ldi r25,hi8(__c.2812)
 1761 01b2 0E94 0000 		call xputs
 440:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1762               		.loc 1 440 0
 1763 01b6 80E0      		ldi r24,lo8(__c.2814)
 1764 01b8 90E0      		ldi r25,hi8(__c.2814)
 1765 01ba 0E94 0000 		call xputs
 1766 01be 8091 0000 		lds r24,mk_time_to_max
 1767 01c2 1F92      		push __zero_reg__
 1768               	.LCFI153:
 1769               		.cfi_def_cfa_offset 16
 1770 01c4 8F93      		push r24
 1771               	.LCFI154:
 1772               		.cfi_def_cfa_offset 17
 1773 01c6 80E0      		ldi r24,lo8(__c.2816)
 1774 01c8 90E0      		ldi r25,hi8(__c.2816)
 1775 01ca 9F93      		push r25
 1776               	.LCFI155:
 1777               		.cfi_def_cfa_offset 18
 1778 01cc 8F93      		push r24
 1779               	.LCFI156:
 1780               		.cfi_def_cfa_offset 19
 1781 01ce 0E94 0000 		call __xprintf
 1782 01d2 80E0      		ldi r24,lo8(__c.2818)
 1783 01d4 90E0      		ldi r25,hi8(__c.2818)
 1784 01d6 0E94 0000 		call xputs
 441:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1785               		.loc 1 441 0
 1786 01da 80E0      		ldi r24,lo8(__c.2820)
 1787 01dc 90E0      		ldi r25,hi8(__c.2820)
 1788 01de 0E94 0000 		call xputs
 1789 01e2 8091 0000 		lds r24,mk_wheel_max_speed
 1790 01e6 1F92      		push __zero_reg__
 1791               	.LCFI157:
 1792               		.cfi_def_cfa_offset 20
 1793 01e8 8F93      		push r24
 1794               	.LCFI158:
 1795               		.cfi_def_cfa_offset 21
 1796 01ea 80E0      		ldi r24,lo8(__c.2822)
 1797 01ec 90E0      		ldi r25,hi8(__c.2822)
 1798 01ee 9F93      		push r25
 1799               	.LCFI159:
 1800               		.cfi_def_cfa_offset 22
 1801 01f0 8F93      		push r24
 1802               	.LCFI160:
 1803               		.cfi_def_cfa_offset 23
 1804 01f2 0E94 0000 		call __xprintf
 1805 01f6 80E0      		ldi r24,lo8(__c.2824)
 1806 01f8 90E0      		ldi r25,hi8(__c.2824)
 1807 01fa 0E94 0000 		call xputs
 442:../../tmk_core/common/command.c **** }
 1808               		.loc 1 442 0
 1809 01fe 80E0      		ldi r24,lo8(__c.2826)
 1810 0200 90E0      		ldi r25,hi8(__c.2826)
 1811 0202 0E94 0000 		call xputs
 1812 0206 8091 0000 		lds r24,mk_wheel_time_to_max
 1813 020a 1F92      		push __zero_reg__
 1814               	.LCFI161:
 1815               		.cfi_def_cfa_offset 24
 1816 020c 8F93      		push r24
 1817               	.LCFI162:
 1818               		.cfi_def_cfa_offset 25
 1819 020e 80E0      		ldi r24,lo8(__c.2828)
 1820 0210 90E0      		ldi r25,hi8(__c.2828)
 1821 0212 9F93      		push r25
 1822               	.LCFI163:
 1823               		.cfi_def_cfa_offset 26
 1824 0214 8F93      		push r24
 1825               	.LCFI164:
 1826               		.cfi_def_cfa_offset 27
 1827 0216 0E94 0000 		call __xprintf
 1828 021a 80E0      		ldi r24,lo8(__c.2830)
 1829 021c 90E0      		ldi r25,hi8(__c.2830)
 1830 021e 0E94 0000 		call xputs
 1831 0222 8DB7      		in r24,__SP_L__
 1832 0224 9EB7      		in r25,__SP_H__
 1833 0226 4896      		adiw r24,24
 1834 0228 0FB6      		in __tmp_reg__,__SREG__
 1835 022a F894      		cli
 1836 022c 9EBF      		out __SP_H__,r25
 1837 022e 0FBE      		out __SREG__,__tmp_reg__
 1838 0230 8DBF      		out __SP_L__,r24
 1839               	.LCFI165:
 1840               		.cfi_def_cfa_offset 3
 1841 0232 00C0      		rjmp .L127
 1842               	.L116:
 1843               	.LBE164:
 1844               	.LBE163:
 592:../../tmk_core/common/command.c ****             break;
 1845               		.loc 1 592 0
 1846 0234 CE51      		subi r28,lo8(-(-30))
 1847 0236 EC2F      		mov r30,r28
 1848 0238 F0E0      		ldi r31,0
 1849 023a E050      		subi r30,lo8(-(CSWTCH.59))
 1850 023c F040      		sbci r31,hi8(-(CSWTCH.59))
 1851 023e 8081      		ld r24,Z
 1852 0240 8093 0000 		sts mousekey_param,r24
 1853 0244 00C0      		rjmp .L127
 1854               	.L125:
 595:../../tmk_core/common/command.c ****             break;
 1855               		.loc 1 595 0
 1856 0246 61E0      		ldi r22,lo8(1)
 1857               	.L160:
 601:../../tmk_core/common/command.c ****             break;
 1858               		.loc 1 601 0
 1859 0248 8091 0000 		lds r24,mousekey_param
 1860 024c 0E94 0000 		call mousekey_param_inc
 1861 0250 00C0      		rjmp .L127
 1862               	.L124:
 598:../../tmk_core/common/command.c ****             break;
 1863               		.loc 1 598 0
 1864 0252 61E0      		ldi r22,lo8(1)
 1865               	.L161:
 604:../../tmk_core/common/command.c ****             break;
 1866               		.loc 1 604 0
 1867 0254 8091 0000 		lds r24,mousekey_param
 1868 0258 0E94 0000 		call mousekey_param_dec
 1869 025c 00C0      		rjmp .L127
 1870               	.L122:
 601:../../tmk_core/common/command.c ****             break;
 1871               		.loc 1 601 0
 1872 025e 6AE0      		ldi r22,lo8(10)
 1873 0260 00C0      		rjmp .L160
 1874               	.L119:
 607:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1875               		.loc 1 607 0
 1876 0262 8EE1      		ldi r24,lo8(30)
 1877 0264 8093 0000 		sts mk_delay,r24
 608:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1878               		.loc 1 608 0
 1879 0268 82E3      		ldi r24,lo8(50)
 1880 026a 8093 0000 		sts mk_interval,r24
 609:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1881               		.loc 1 609 0
 1882 026e 8AE0      		ldi r24,lo8(10)
 1883 0270 8093 0000 		sts mk_max_speed,r24
 610:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1884               		.loc 1 610 0
 1885 0274 84E1      		ldi r24,lo8(20)
 1886 0276 8093 0000 		sts mk_time_to_max,r24
 611:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1887               		.loc 1 611 0
 1888 027a 88E0      		ldi r24,lo8(8)
 1889 027c 8093 0000 		sts mk_wheel_max_speed,r24
 612:../../tmk_core/common/command.c ****             print("set default\n");
 1890               		.loc 1 612 0
 1891 0280 88E2      		ldi r24,lo8(40)
 1892 0282 8093 0000 		sts mk_wheel_time_to_max,r24
 613:../../tmk_core/common/command.c ****             break;
 1893               		.loc 1 613 0
 1894 0286 80E0      		ldi r24,lo8(__c.2907)
 1895 0288 90E0      		ldi r25,hi8(__c.2907)
 1896 028a 0E94 0000 		call xputs
 1897 028e 00C0      		rjmp .L127
 1898               	.L129:
 622:../../tmk_core/common/command.c ****     }
 1899               		.loc 1 622 0
 1900 0290 80E0      		ldi r24,lo8(__c.2914)
 1901 0292 90E0      		ldi r25,hi8(__c.2914)
 1902 0294 00C0      		rjmp .L163
 1903               	.LBE165:
 1904               	.LBE166:
 1905               		.cfi_endproc
 1906               	.LFE10:
 1908               		.section	.rodata.CSWTCH.59,"a",@progbits
 1911               	CSWTCH.59:
 1912 0000 01        		.byte	1
 1913 0001 02        		.byte	2
 1914 0002 03        		.byte	3
 1915 0003 04        		.byte	4
 1916 0004 05        		.byte	5
 1917 0005 06        		.byte	6
 1918 0006 07        		.byte	7
 1919 0007 08        		.byte	8
 1920 0008 09        		.byte	9
 1921 0009 00        		.byte	0
 1922               		.section	.progmem.data.__c.2876,"a",@progbits
 1925               	__c.2876:
 1926 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1926      6865 656C 
 1926      5F74 696D 
 1926      655F 746F 
 1926      5F6D 6178 
 1927               		.section	.progmem.data.__c.2873,"a",@progbits
 1930               	__c.2873:
 1931 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1931      6865 656C 
 1931      5F6D 6178 
 1931      5F73 7065 
 1931      6564 203D 
 1932               		.section	.progmem.data.__c.2870,"a",@progbits
 1935               	__c.2870:
 1936 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1936      696D 655F 
 1936      746F 5F6D 
 1936      6178 203D 
 1936      2025 640A 
 1937               		.section	.progmem.data.__c.2867,"a",@progbits
 1940               	__c.2867:
 1941 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1941      6178 5F73 
 1941      7065 6564 
 1941      203D 2025 
 1941      640A 00
 1942               		.section	.progmem.data.__c.2864,"a",@progbits
 1945               	__c.2864:
 1946 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1946      6E74 6572 
 1946      7661 6C20 
 1946      3D20 2564 
 1946      0A00 
 1947               		.section	.progmem.data.__c.2860,"a",@progbits
 1950               	__c.2860:
 1951 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1951      656C 6179 
 1951      203D 2025 
 1951      640A 00
 1952               		.section	.progmem.data.__c.2853,"a",@progbits
 1955               	__c.2853:
 1956 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1956      6865 656C 
 1956      5F74 696D 
 1956      655F 746F 
 1956      5F6D 6178 
 1957               		.section	.progmem.data.__c.2850,"a",@progbits
 1960               	__c.2850:
 1961 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1961      6865 656C 
 1961      5F6D 6178 
 1961      5F73 7065 
 1961      6564 203D 
 1962               		.section	.progmem.data.__c.2847,"a",@progbits
 1965               	__c.2847:
 1966 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1966      696D 655F 
 1966      746F 5F6D 
 1966      6178 203D 
 1966      2025 640A 
 1967               		.section	.progmem.data.__c.2844,"a",@progbits
 1970               	__c.2844:
 1971 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1971      6178 5F73 
 1971      7065 6564 
 1971      203D 2025 
 1971      640A 00
 1972               		.section	.progmem.data.__c.2841,"a",@progbits
 1975               	__c.2841:
 1976 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1976      6E74 6572 
 1976      7661 6C20 
 1976      3D20 2564 
 1976      0A00 
 1977               		.section	.progmem.data.__c.2837,"a",@progbits
 1980               	__c.2837:
 1981 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1981      656C 6179 
 1981      203D 2025 
 1981      640A 00
 1982               		.section	.progmem.data.__c.2830,"a",@progbits
 1985               	__c.2830:
 1986 0000 0A00      		.string	"\n"
 1987               		.section	.progmem.data.__c.2828,"a",@progbits
 1990               	__c.2828:
 1991 0000 2575 00   		.string	"%u"
 1992               		.section	.progmem.data.__c.2826,"a",@progbits
 1995               	__c.2826:
 1996 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 1996      6865 656C 
 1996      5F74 696D 
 1996      655F 746F 
 1996      5F6D 6178 
 1997               		.section	.progmem.data.__c.2824,"a",@progbits
 2000               	__c.2824:
 2001 0000 0A00      		.string	"\n"
 2002               		.section	.progmem.data.__c.2822,"a",@progbits
 2005               	__c.2822:
 2006 0000 2575 00   		.string	"%u"
 2007               		.section	.progmem.data.__c.2820,"a",@progbits
 2010               	__c.2820:
 2011 0000 353A 2077 		.string	"5: wheel_max_speed: "
 2011      6865 656C 
 2011      5F6D 6178 
 2011      5F73 7065 
 2011      6564 3A20 
 2012               		.section	.progmem.data.__c.2818,"a",@progbits
 2015               	__c.2818:
 2016 0000 0A00      		.string	"\n"
 2017               		.section	.progmem.data.__c.2816,"a",@progbits
 2020               	__c.2816:
 2021 0000 2575 00   		.string	"%u"
 2022               		.section	.progmem.data.__c.2814,"a",@progbits
 2025               	__c.2814:
 2026 0000 343A 2074 		.string	"4: time_to_max: "
 2026      696D 655F 
 2026      746F 5F6D 
 2026      6178 3A20 
 2026      00
 2027               		.section	.progmem.data.__c.2812,"a",@progbits
 2030               	__c.2812:
 2031 0000 0A00      		.string	"\n"
 2032               		.section	.progmem.data.__c.2810,"a",@progbits
 2035               	__c.2810:
 2036 0000 2575 00   		.string	"%u"
 2037               		.section	.progmem.data.__c.2808,"a",@progbits
 2040               	__c.2808:
 2041 0000 333A 206D 		.string	"3: max_speed: "
 2041      6178 5F73 
 2041      7065 6564 
 2041      3A20 00
 2042               		.section	.progmem.data.__c.2806,"a",@progbits
 2045               	__c.2806:
 2046 0000 0A00      		.string	"\n"
 2047               		.section	.progmem.data.__c.2804,"a",@progbits
 2050               	__c.2804:
 2051 0000 2575 00   		.string	"%u"
 2052               		.section	.progmem.data.__c.2802,"a",@progbits
 2055               	__c.2802:
 2056 0000 323A 2069 		.string	"2: interval(ms): "
 2056      6E74 6572 
 2056      7661 6C28 
 2056      6D73 293A 
 2056      2000 
 2057               		.section	.progmem.data.__c.2800,"a",@progbits
 2060               	__c.2800:
 2061 0000 0A00      		.string	"\n"
 2062               		.section	.progmem.data.__c.2798,"a",@progbits
 2065               	__c.2798:
 2066 0000 2575 00   		.string	"%u"
 2067               		.section	.progmem.data.__c.2796,"a",@progbits
 2070               	__c.2796:
 2071 0000 313A 2064 		.string	"1: delay(*10ms): "
 2071      656C 6179 
 2071      282A 3130 
 2071      6D73 293A 
 2071      2000 
 2072               		.section	.progmem.data.__c.2794,"a",@progbits
 2075               	__c.2794:
 2076 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 2076      5661 6C75 
 2076      6573 202D 
 2076      0A00 
 2077               		.section	.progmem.data.__c.2914,"a",@progbits
 2080               	__c.2914:
 2081 0000 4D3E 00   		.string	"M>"
 2082               		.section	.progmem.data.__c.2912,"a",@progbits
 2085               	__c.2912:
 2086 0000 4D25 643E 		.string	"M%d> "
 2086      2000 
 2087               		.section	.progmem.data.__c.2910,"a",@progbits
 2090               	__c.2910:
 2091 0000 3F00      		.string	"?"
 2092               		.section	.progmem.data.__c.2907,"a",@progbits
 2095               	__c.2907:
 2096 0000 7365 7420 		.string	"set default\n"
 2096      6465 6661 
 2096      756C 740A 
 2096      00
 2097               		.section	.progmem.data.__c.2893,"a",@progbits
 2100               	__c.2893:
 2101 0000 433E 2000 		.string	"C> "
 2102               		.section	.progmem.data.__c.2883,"a",@progbits
 2105               	__c.2883:
 2106 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 2106      6520 6465 
 2106      6C74 613A 
 2106      2063 7572 
 2106      736F 723D 
 2107               		.section	.progmem.data.__c.2881,"a",@progbits
 2110               	__c.2881:
 2111 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 2111      4D6F 7573 
 2111      656B 6579 
 2111      202D 0A45 
 2111      5343 2F71 
 2112               		.section	.progmem.data.__c.2786,"a",@progbits
 2115               	__c.2786:
 2116 0000 3F00      		.string	"?"
 2117               		.section	.progmem.data.__c.2783,"a",@progbits
 2120               	__c.2783:
 2121 0000 4D3E 2000 		.string	"M> "
 2122               		.section	.progmem.data.__c.2788,"a",@progbits
 2125               	__c.2788:
 2126 0000 433E 2000 		.string	"C> "
 2127               		.section	.progmem.data.__c.2932,"a",@progbits
 2130               	__c.2932:
 2131 0000 4C25 640A 		.string	"L%d\n"
 2131      00
 2132               		.section	.progmem.data.__c.2772,"a",@progbits
 2135               	__c.2772:
 2136 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 2136      436F 6E73 
 2136      6F6C 6520 
 2136      2D0A 4553 
 2136      432F 713A 
 2137               		.section	.progmem.data.__c.2604,"a",@progbits
 2140               	__c.2604:
 2141 0000 0A09 2D20 		.string	"\n\t- Magic -\nd:\tdebug\nx:\tdebug matrix\nk:\tdebug keyboard\nm:\tdebug mouse\nv:\tvers
 2141      4D61 6769 
 2141      6320 2D0A 
 2141      643A 0964 
 2141      6562 7567 
 2142               		.section	.progmem.data.__c.2699,"a",@progbits
 2145               	__c.2699:
 2146 0000 0A00      		.string	"\n"
 2147               		.section	.progmem.data.__c.2697,"a",@progbits
 2150               	__c.2697:
 2151 0000 2575 00   		.string	"%u"
 2152               		.section	.progmem.data.__c.2695,"a",@progbits
 2155               	__c.2695:
 2156 0000 2E6E 6B72 		.string	".nkro: "
 2156      6F3A 2000 
 2157               		.section	.progmem.data.__c.2693,"a",@progbits
 2160               	__c.2693:
 2161 0000 0A00      		.string	"\n"
 2162               		.section	.progmem.data.__c.2691,"a",@progbits
 2165               	__c.2691:
 2166 0000 2575 00   		.string	"%u"
 2167               		.section	.progmem.data.__c.2689,"a",@progbits
 2170               	__c.2689:
 2171 0000 2E73 7761 		.string	".swap_backslash_backspace: "
 2171      705F 6261 
 2171      636B 736C 
 2171      6173 685F 
 2171      6261 636B 
 2172               		.section	.progmem.data.__c.2687,"a",@progbits
 2175               	__c.2687:
 2176 0000 0A00      		.string	"\n"
 2177               		.section	.progmem.data.__c.2685,"a",@progbits
 2180               	__c.2685:
 2181 0000 2575 00   		.string	"%u"
 2182               		.section	.progmem.data.__c.2683,"a",@progbits
 2185               	__c.2683:
 2186 0000 2E73 7761 		.string	".swap_grave_esc: "
 2186      705F 6772 
 2186      6176 655F 
 2186      6573 633A 
 2186      2000 
 2187               		.section	.progmem.data.__c.2681,"a",@progbits
 2190               	__c.2681:
 2191 0000 0A00      		.string	"\n"
 2192               		.section	.progmem.data.__c.2679,"a",@progbits
 2195               	__c.2679:
 2196 0000 2575 00   		.string	"%u"
 2197               		.section	.progmem.data.__c.2677,"a",@progbits
 2200               	__c.2677:
 2201 0000 2E6E 6F5F 		.string	".no_gui: "
 2201      6775 693A 
 2201      2000 
 2202               		.section	.progmem.data.__c.2675,"a",@progbits
 2205               	__c.2675:
 2206 0000 0A00      		.string	"\n"
 2207               		.section	.progmem.data.__c.2673,"a",@progbits
 2210               	__c.2673:
 2211 0000 2575 00   		.string	"%u"
 2212               		.section	.progmem.data.__c.2671,"a",@progbits
 2215               	__c.2671:
 2216 0000 2E73 7761 		.string	".swap_ralt_rgui: "
 2216      705F 7261 
 2216      6C74 5F72 
 2216      6775 693A 
 2216      2000 
 2217               		.section	.progmem.data.__c.2669,"a",@progbits
 2220               	__c.2669:
 2221 0000 0A00      		.string	"\n"
 2222               		.section	.progmem.data.__c.2667,"a",@progbits
 2225               	__c.2667:
 2226 0000 2575 00   		.string	"%u"
 2227               		.section	.progmem.data.__c.2665,"a",@progbits
 2230               	__c.2665:
 2231 0000 2E73 7761 		.string	".swap_lalt_lgui: "
 2231      705F 6C61 
 2231      6C74 5F6C 
 2231      6775 693A 
 2231      2000 
 2232               		.section	.progmem.data.__c.2663,"a",@progbits
 2235               	__c.2663:
 2236 0000 0A00      		.string	"\n"
 2237               		.section	.progmem.data.__c.2661,"a",@progbits
 2240               	__c.2661:
 2241 0000 2575 00   		.string	"%u"
 2242               		.section	.progmem.data.__c.2659,"a",@progbits
 2245               	__c.2659:
 2246 0000 2E63 6170 		.string	".capslock_to_control: "
 2246      736C 6F63 
 2246      6B5F 746F 
 2246      5F63 6F6E 
 2246      7472 6F6C 
 2247               		.section	.progmem.data.__c.2657,"a",@progbits
 2250               	__c.2657:
 2251 0000 0A00      		.string	"\n"
 2252               		.section	.progmem.data.__c.2655,"a",@progbits
 2255               	__c.2655:
 2256 0000 2575 00   		.string	"%u"
 2257               		.section	.progmem.data.__c.2653,"a",@progbits
 2260               	__c.2653:
 2261 0000 2E73 7761 		.string	".swap_control_capslock: "
 2261      705F 636F 
 2261      6E74 726F 
 2261      6C5F 6361 
 2261      7073 6C6F 
 2262               		.section	.progmem.data.__c.2651,"a",@progbits
 2265               	__c.2651:
 2266 0000 0A00      		.string	"\n"
 2267               		.section	.progmem.data.__c.2649,"a",@progbits
 2270               	__c.2649:
 2271 0000 2530 3258 		.string	"%02X"
 2271      00
 2272               		.section	.progmem.data.__c.2647,"a",@progbits
 2275               	__c.2647:
 2276 0000 6B65 796D 		.string	"keymap_config.raw: "
 2276      6170 5F63 
 2276      6F6E 6669 
 2276      672E 7261 
 2276      773A 2000 
 2277               		.section	.progmem.data.__c.2644,"a",@progbits
 2280               	__c.2644:
 2281 0000 0A00      		.string	"\n"
 2282               		.section	.progmem.data.__c.2642,"a",@progbits
 2285               	__c.2642:
 2286 0000 2575 00   		.string	"%u"
 2287               		.section	.progmem.data.__c.2640,"a",@progbits
 2290               	__c.2640:
 2291 0000 2E6D 6F75 		.string	".mouse: "
 2291      7365 3A20 
 2291      00
 2292               		.section	.progmem.data.__c.2638,"a",@progbits
 2295               	__c.2638:
 2296 0000 0A00      		.string	"\n"
 2297               		.section	.progmem.data.__c.2636,"a",@progbits
 2300               	__c.2636:
 2301 0000 2575 00   		.string	"%u"
 2302               		.section	.progmem.data.__c.2634,"a",@progbits
 2305               	__c.2634:
 2306 0000 2E6B 6579 		.string	".keyboard: "
 2306      626F 6172 
 2306      643A 2000 
 2307               		.section	.progmem.data.__c.2632,"a",@progbits
 2310               	__c.2632:
 2311 0000 0A00      		.string	"\n"
 2312               		.section	.progmem.data.__c.2630,"a",@progbits
 2315               	__c.2630:
 2316 0000 2575 00   		.string	"%u"
 2317               		.section	.progmem.data.__c.2628,"a",@progbits
 2320               	__c.2628:
 2321 0000 2E6D 6174 		.string	".matrix: "
 2321      7269 783A 
 2321      2000 
 2322               		.section	.progmem.data.__c.2626,"a",@progbits
 2325               	__c.2626:
 2326 0000 0A00      		.string	"\n"
 2327               		.section	.progmem.data.__c.2624,"a",@progbits
 2330               	__c.2624:
 2331 0000 2575 00   		.string	"%u"
 2332               		.section	.progmem.data.__c.2622,"a",@progbits
 2335               	__c.2622:
 2336 0000 2E65 6E61 		.string	".enable: "
 2336      626C 653A 
 2336      2000 
 2337               		.section	.progmem.data.__c.2620,"a",@progbits
 2340               	__c.2620:
 2341 0000 0A00      		.string	"\n"
 2342               		.section	.progmem.data.__c.2618,"a",@progbits
 2345               	__c.2618:
 2346 0000 2530 3258 		.string	"%02X"
 2346      00
 2347               		.section	.progmem.data.__c.2616,"a",@progbits
 2350               	__c.2616:
 2351 0000 6465 6275 		.string	"debug_config.raw: "
 2351      675F 636F 
 2351      6E66 6967 
 2351      2E72 6177 
 2351      3A20 00
 2352               		.section	.progmem.data.__c.2613,"a",@progbits
 2355               	__c.2613:
 2356 0000 0A00      		.string	"\n"
 2357               		.section	.progmem.data.__c.2611,"a",@progbits
 2360               	__c.2611:
 2361 0000 2575 00   		.string	"%u"
 2362               		.section	.progmem.data.__c.2609,"a",@progbits
 2365               	__c.2609:
 2366 0000 6465 6661 		.string	"default_layer: "
 2366      756C 745F 
 2366      6C61 7965 
 2366      723A 2000 
 2367               		.section	.progmem.data.__c.2767,"a",@progbits
 2370               	__c.2767:
 2371 0000 3F00      		.string	"?"
 2372               		.section	.progmem.data.__c.2758,"a",@progbits
 2375               	__c.2758:
 2376 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 2376      725F 7265 
 2376      6164 3332 
 2376      2829 3A20 
 2376      2530 346C 
 2377               		.section	.progmem.data.__c.2756,"a",@progbits
 2380               	__c.2756:
 2381 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 2381      6F61 7264 
 2381      5F69 646C 
 2381      653A 2025 
 2381      580A 00
 2382               		.section	.progmem.data.__c.2754,"a",@progbits
 2385               	__c.2754:
 2386 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 2386      6F61 7264 
 2386      5F70 726F 
 2386      746F 636F 
 2386      6C3A 2025 
 2387               		.section	.progmem.data.__c.2752,"a",@progbits
 2390               	__c.2752:
 2391 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 2391      5F6B 6579 
 2391      626F 6172 
 2391      645F 6C65 
 2391      6473 2829 
 2392               		.section	.progmem.data.__c.2750,"a",@progbits
 2395               	__c.2750:
 2396 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 2396      5374 6174 
 2396      7573 202D 
 2396      0A00 
 2397               		.section	.progmem.data.__c.2747,"a",@progbits
 2400               	__c.2747:
 2401 0000 4743 433A 		.string	"GCC: 7.2.0 AVR-LIBC: 2.0.0 AVR_ARCH: avr5\n"
 2401      2037 2E32 
 2401      2E30 2041 
 2401      5652 2D4C 
 2401      4942 433A 
 2402               		.section	.progmem.data.__c.2745,"a",@progbits
 2405               	__c.2745:
 2406 0000 4F50 5449 		.string	"OPTIONS: LUFA BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND 4096\n"
 2406      4F4E 533A 
 2406      204C 5546 
 2406      4120 424F 
 2406      4F54 4D41 
 2407               		.section	.progmem.data.__c.2743,"a",@progbits
 2410               	__c.2743:
 2411 0000 4255 494C 		.string	"BUILD: unknown (01:05:47 Aug 28 2017)\n"
 2411      443A 2075 
 2411      6E6B 6E6F 
 2411      776E 2028 
 2411      3031 3A30 
 2412               		.section	.progmem.data.__c.2741,"a",@progbits
 2415               	__c.2741:
 2416 0000 5649 443A 		.string	"VID: 0xFEED(geekhack) PID: 0x6060(GH60) VER: 0x0001\n"
 2416      2030 7846 
 2416      4545 4428 
 2416      6765 656B 
 2416      6861 636B 
 2417               		.section	.progmem.data.__c.2739,"a",@progbits
 2420               	__c.2739:
 2421 0000 4445 5343 		.string	"DESC: t.m.k. keyboard firmware for GH60\n"
 2421      3A20 742E 
 2421      6D2E 6B2E 
 2421      206B 6579 
 2421      626F 6172 
 2422               		.section	.progmem.data.__c.2737,"a",@progbits
 2425               	__c.2737:
 2426 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 2426      5665 7273 
 2426      696F 6E20 
 2426      2D0A 00
 2427               		.section	.progmem.data.__c.2734,"a",@progbits
 2430               	__c.2734:
 2431 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 2431      7365 3A20 
 2431      6F66 660A 
 2431      00
 2432               		.section	.progmem.data.__c.2732,"a",@progbits
 2435               	__c.2732:
 2436 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 2436      7365 3A20 
 2436      6F6E 0A00 
 2437               		.section	.progmem.data.__c.2729,"a",@progbits
 2440               	__c.2729:
 2441 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 2441      626F 6172 
 2441      643A 206F 
 2441      6666 0A00 
 2442               		.section	.progmem.data.__c.2727,"a",@progbits
 2445               	__c.2727:
 2446 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 2446      626F 6172 
 2446      643A 206F 
 2446      6E0A 00
 2447               		.section	.progmem.data.__c.2724,"a",@progbits
 2450               	__c.2724:
 2451 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 2451      7269 783A 
 2451      206F 6666 
 2451      0A00 
 2452               		.section	.progmem.data.__c.2722,"a",@progbits
 2455               	__c.2722:
 2456 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 2456      7269 783A 
 2456      206F 6E0A 
 2456      00
 2457               		.section	.progmem.data.__c.2719,"a",@progbits
 2460               	__c.2719:
 2461 0000 0A64 6562 		.string	"\ndebug: on\n"
 2461      7567 3A20 
 2461      6F6E 0A00 
 2462               		.section	.progmem.data.__c.2717,"a",@progbits
 2465               	__c.2717:
 2466 0000 0A64 6562 		.string	"\ndebug: off\n"
 2466      7567 3A20 
 2466      6F66 660A 
 2466      00
 2467               		.section	.progmem.data.__c.2714,"a",@progbits
 2470               	__c.2714:
 2471 0000 0A0A 626F 		.string	"\n\nbootloader... "
 2471      6F74 6C6F 
 2471      6164 6572 
 2471      2E2E 2E20 
 2471      00
 2472               		.section	.progmem.data.__c.2711,"a",@progbits
 2475               	__c.2711:
 2476 0000 433E 2000 		.string	"C> "
 2477               		.section	.progmem.data.__c.2705,"a",@progbits
 2480               	__c.2705:
 2481 0000 6565 636F 		.string	"eeconfig:\n"
 2481      6E66 6967 
 2481      3A0A 00
 2482               		.section	.bss.mousekey_param,"aw",@nobits
 2485               	mousekey_param:
 2486 0000 00        		.zero	1
 2487               	.global	command_state
 2488               		.section	.bss.command_state,"aw",@nobits
 2491               	command_state:
 2492 0000 00        		.zero	1
 2493               		.text
 2494               	.Letext0:
 2495               		.file 3 "c:\\avr-gcc-7.2.0-x64-mingw\\avr\\include\\stdint.h"
 2496               		.file 4 "../../tmk_core/common/report.h"
 2497               		.file 5 "../../tmk_core/common/host.h"
 2498               		.file 6 "../../tmk_core/common/keymap.h"
 2499               		.file 7 "../../tmk_core/common/avr/xprintf.h"
 2500               		.file 8 "../../tmk_core/common/debug.h"
 2501               		.file 9 "../../tmk_core/common/timer.h"
 2502               		.file 10 "../../tmk_core/common/action_layer.h"
 2503               		.file 11 "../../tmk_core/common/action_util.h"
 2504               		.file 12 "../../tmk_core/common/command.h"
 2505               		.file 13 "../../tmk_core/common/mousekey.h"
 2506               		.file 14 "../../tmk_core/common/action.h"
 2507               		.file 15 "../../tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
C:\cygwin\tmp\cc3mQAKf.s:2      *ABS*:000000000000003e __SP_H__
C:\cygwin\tmp\cc3mQAKf.s:3      *ABS*:000000000000003d __SP_L__
C:\cygwin\tmp\cc3mQAKf.s:4      *ABS*:000000000000003f __SREG__
C:\cygwin\tmp\cc3mQAKf.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\cygwin\tmp\cc3mQAKf.s:6      *ABS*:0000000000000001 __zero_reg__
C:\cygwin\tmp\cc3mQAKf.s:12     .text.mousekey_console_help:0000000000000000 mousekey_console_help
C:\cygwin\tmp\cc3mQAKf.s:2110   .progmem.data.__c.2881:0000000000000000 __c.2881
C:\cygwin\tmp\cc3mQAKf.s:2105   .progmem.data.__c.2883:0000000000000000 __c.2883
C:\cygwin\tmp\cc3mQAKf.s:67     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
C:\cygwin\tmp\cc3mQAKf.s:1980   .progmem.data.__c.2837:0000000000000000 __c.2837
C:\cygwin\tmp\cc3mQAKf.s:1975   .progmem.data.__c.2841:0000000000000000 __c.2841
C:\cygwin\tmp\cc3mQAKf.s:1970   .progmem.data.__c.2844:0000000000000000 __c.2844
C:\cygwin\tmp\cc3mQAKf.s:1965   .progmem.data.__c.2847:0000000000000000 __c.2847
C:\cygwin\tmp\cc3mQAKf.s:1960   .progmem.data.__c.2850:0000000000000000 __c.2850
C:\cygwin\tmp\cc3mQAKf.s:1955   .progmem.data.__c.2853:0000000000000000 __c.2853
C:\cygwin\tmp\cc3mQAKf.s:338    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
C:\cygwin\tmp\cc3mQAKf.s:1950   .progmem.data.__c.2860:0000000000000000 __c.2860
C:\cygwin\tmp\cc3mQAKf.s:1945   .progmem.data.__c.2864:0000000000000000 __c.2864
C:\cygwin\tmp\cc3mQAKf.s:1940   .progmem.data.__c.2867:0000000000000000 __c.2867
C:\cygwin\tmp\cc3mQAKf.s:1935   .progmem.data.__c.2870:0000000000000000 __c.2870
C:\cygwin\tmp\cc3mQAKf.s:1930   .progmem.data.__c.2873:0000000000000000 __c.2873
C:\cygwin\tmp\cc3mQAKf.s:1925   .progmem.data.__c.2876:0000000000000000 __c.2876
C:\cygwin\tmp\cc3mQAKf.s:561    .text.switch_default_layer:0000000000000000 switch_default_layer
C:\cygwin\tmp\cc3mQAKf.s:2130   .progmem.data.__c.2932:0000000000000000 __c.2932
C:\cygwin\tmp\cc3mQAKf.s:628    .text.command_common:0000000000000000 command_common
C:\cygwin\tmp\cc3mQAKf.s:2370   .progmem.data.__c.2767:0000000000000000 __c.2767
C:\cygwin\tmp\cc3mQAKf.s:2140   .progmem.data.__c.2604:0000000000000000 __c.2604
C:\cygwin\tmp\cc3mQAKf.s:2435   .progmem.data.__c.2732:0000000000000000 __c.2732
C:\cygwin\tmp\cc3mQAKf.s:2455   .progmem.data.__c.2722:0000000000000000 __c.2722
C:\cygwin\tmp\cc3mQAKf.s:2470   .progmem.data.__c.2714:0000000000000000 __c.2714
C:\cygwin\tmp\cc3mQAKf.s:2480   .progmem.data.__c.2705:0000000000000000 __c.2705
C:\cygwin\tmp\cc3mQAKf.s:2365   .progmem.data.__c.2609:0000000000000000 __c.2609
C:\cygwin\tmp\cc3mQAKf.s:2360   .progmem.data.__c.2611:0000000000000000 __c.2611
C:\cygwin\tmp\cc3mQAKf.s:2355   .progmem.data.__c.2613:0000000000000000 __c.2613
C:\cygwin\tmp\cc3mQAKf.s:2350   .progmem.data.__c.2616:0000000000000000 __c.2616
C:\cygwin\tmp\cc3mQAKf.s:2345   .progmem.data.__c.2618:0000000000000000 __c.2618
C:\cygwin\tmp\cc3mQAKf.s:2340   .progmem.data.__c.2620:0000000000000000 __c.2620
C:\cygwin\tmp\cc3mQAKf.s:2335   .progmem.data.__c.2622:0000000000000000 __c.2622
C:\cygwin\tmp\cc3mQAKf.s:2330   .progmem.data.__c.2624:0000000000000000 __c.2624
C:\cygwin\tmp\cc3mQAKf.s:2325   .progmem.data.__c.2626:0000000000000000 __c.2626
C:\cygwin\tmp\cc3mQAKf.s:2320   .progmem.data.__c.2628:0000000000000000 __c.2628
C:\cygwin\tmp\cc3mQAKf.s:2315   .progmem.data.__c.2630:0000000000000000 __c.2630
C:\cygwin\tmp\cc3mQAKf.s:2310   .progmem.data.__c.2632:0000000000000000 __c.2632
C:\cygwin\tmp\cc3mQAKf.s:2305   .progmem.data.__c.2634:0000000000000000 __c.2634
C:\cygwin\tmp\cc3mQAKf.s:2300   .progmem.data.__c.2636:0000000000000000 __c.2636
C:\cygwin\tmp\cc3mQAKf.s:2295   .progmem.data.__c.2638:0000000000000000 __c.2638
C:\cygwin\tmp\cc3mQAKf.s:2290   .progmem.data.__c.2640:0000000000000000 __c.2640
C:\cygwin\tmp\cc3mQAKf.s:2285   .progmem.data.__c.2642:0000000000000000 __c.2642
C:\cygwin\tmp\cc3mQAKf.s:2280   .progmem.data.__c.2644:0000000000000000 __c.2644
C:\cygwin\tmp\cc3mQAKf.s:2275   .progmem.data.__c.2647:0000000000000000 __c.2647
C:\cygwin\tmp\cc3mQAKf.s:2270   .progmem.data.__c.2649:0000000000000000 __c.2649
C:\cygwin\tmp\cc3mQAKf.s:2265   .progmem.data.__c.2651:0000000000000000 __c.2651
C:\cygwin\tmp\cc3mQAKf.s:2260   .progmem.data.__c.2653:0000000000000000 __c.2653
C:\cygwin\tmp\cc3mQAKf.s:2255   .progmem.data.__c.2655:0000000000000000 __c.2655
C:\cygwin\tmp\cc3mQAKf.s:2250   .progmem.data.__c.2657:0000000000000000 __c.2657
C:\cygwin\tmp\cc3mQAKf.s:2245   .progmem.data.__c.2659:0000000000000000 __c.2659
C:\cygwin\tmp\cc3mQAKf.s:2240   .progmem.data.__c.2661:0000000000000000 __c.2661
C:\cygwin\tmp\cc3mQAKf.s:2235   .progmem.data.__c.2663:0000000000000000 __c.2663
C:\cygwin\tmp\cc3mQAKf.s:2230   .progmem.data.__c.2665:0000000000000000 __c.2665
C:\cygwin\tmp\cc3mQAKf.s:2225   .progmem.data.__c.2667:0000000000000000 __c.2667
C:\cygwin\tmp\cc3mQAKf.s:2220   .progmem.data.__c.2669:0000000000000000 __c.2669
C:\cygwin\tmp\cc3mQAKf.s:2215   .progmem.data.__c.2671:0000000000000000 __c.2671
C:\cygwin\tmp\cc3mQAKf.s:2210   .progmem.data.__c.2673:0000000000000000 __c.2673
C:\cygwin\tmp\cc3mQAKf.s:2205   .progmem.data.__c.2675:0000000000000000 __c.2675
C:\cygwin\tmp\cc3mQAKf.s:2200   .progmem.data.__c.2677:0000000000000000 __c.2677
C:\cygwin\tmp\cc3mQAKf.s:2195   .progmem.data.__c.2679:0000000000000000 __c.2679
C:\cygwin\tmp\cc3mQAKf.s:2190   .progmem.data.__c.2681:0000000000000000 __c.2681
C:\cygwin\tmp\cc3mQAKf.s:2185   .progmem.data.__c.2683:0000000000000000 __c.2683
C:\cygwin\tmp\cc3mQAKf.s:2180   .progmem.data.__c.2685:0000000000000000 __c.2685
C:\cygwin\tmp\cc3mQAKf.s:2175   .progmem.data.__c.2687:0000000000000000 __c.2687
C:\cygwin\tmp\cc3mQAKf.s:2170   .progmem.data.__c.2689:0000000000000000 __c.2689
C:\cygwin\tmp\cc3mQAKf.s:2165   .progmem.data.__c.2691:0000000000000000 __c.2691
C:\cygwin\tmp\cc3mQAKf.s:2160   .progmem.data.__c.2693:0000000000000000 __c.2693
C:\cygwin\tmp\cc3mQAKf.s:2155   .progmem.data.__c.2695:0000000000000000 __c.2695
C:\cygwin\tmp\cc3mQAKf.s:2150   .progmem.data.__c.2697:0000000000000000 __c.2697
C:\cygwin\tmp\cc3mQAKf.s:2145   .progmem.data.__c.2699:0000000000000000 __c.2699
C:\cygwin\tmp\cc3mQAKf.s:2135   .progmem.data.__c.2772:0000000000000000 __c.2772
C:\cygwin\tmp\cc3mQAKf.s:2475   .progmem.data.__c.2711:0000000000000000 __c.2711
C:\cygwin\tmp\cc3mQAKf.s:2491   .bss.command_state:0000000000000000 command_state
C:\cygwin\tmp\cc3mQAKf.s:2465   .progmem.data.__c.2717:0000000000000000 __c.2717
C:\cygwin\tmp\cc3mQAKf.s:2460   .progmem.data.__c.2719:0000000000000000 __c.2719
C:\cygwin\tmp\cc3mQAKf.s:2450   .progmem.data.__c.2724:0000000000000000 __c.2724
C:\cygwin\tmp\cc3mQAKf.s:2445   .progmem.data.__c.2727:0000000000000000 __c.2727
C:\cygwin\tmp\cc3mQAKf.s:2440   .progmem.data.__c.2729:0000000000000000 __c.2729
C:\cygwin\tmp\cc3mQAKf.s:2430   .progmem.data.__c.2734:0000000000000000 __c.2734
C:\cygwin\tmp\cc3mQAKf.s:2425   .progmem.data.__c.2737:0000000000000000 __c.2737
C:\cygwin\tmp\cc3mQAKf.s:2420   .progmem.data.__c.2739:0000000000000000 __c.2739
C:\cygwin\tmp\cc3mQAKf.s:2415   .progmem.data.__c.2741:0000000000000000 __c.2741
C:\cygwin\tmp\cc3mQAKf.s:2410   .progmem.data.__c.2743:0000000000000000 __c.2743
C:\cygwin\tmp\cc3mQAKf.s:2405   .progmem.data.__c.2745:0000000000000000 __c.2745
C:\cygwin\tmp\cc3mQAKf.s:2400   .progmem.data.__c.2747:0000000000000000 __c.2747
C:\cygwin\tmp\cc3mQAKf.s:2395   .progmem.data.__c.2750:0000000000000000 __c.2750
C:\cygwin\tmp\cc3mQAKf.s:2390   .progmem.data.__c.2752:0000000000000000 __c.2752
C:\cygwin\tmp\cc3mQAKf.s:2385   .progmem.data.__c.2754:0000000000000000 __c.2754
C:\cygwin\tmp\cc3mQAKf.s:2380   .progmem.data.__c.2756:0000000000000000 __c.2756
C:\cygwin\tmp\cc3mQAKf.s:2375   .progmem.data.__c.2758:0000000000000000 __c.2758
C:\cygwin\tmp\cc3mQAKf.s:1403   .text.command_extra:0000000000000000 command_extra
C:\cygwin\tmp\cc3mQAKf.s:1403   .text.command_extra:0000000000000000 command_extra.localalias.0
C:\cygwin\tmp\cc3mQAKf.s:1424   .text.command_console_extra:0000000000000000 command_console_extra
C:\cygwin\tmp\cc3mQAKf.s:1438   .text.command_proc:0000000000000000 command_proc
C:\cygwin\tmp\cc3mQAKf.s:2115   .progmem.data.__c.2786:0000000000000000 __c.2786
C:\cygwin\tmp\cc3mQAKf.s:2125   .progmem.data.__c.2788:0000000000000000 __c.2788
C:\cygwin\tmp\cc3mQAKf.s:2120   .progmem.data.__c.2783:0000000000000000 __c.2783
C:\cygwin\tmp\cc3mQAKf.s:2090   .progmem.data.__c.2910:0000000000000000 __c.2910
C:\cygwin\tmp\cc3mQAKf.s:2485   .bss.mousekey_param:0000000000000000 mousekey_param
C:\cygwin\tmp\cc3mQAKf.s:2085   .progmem.data.__c.2912:0000000000000000 __c.2912
C:\cygwin\tmp\cc3mQAKf.s:2100   .progmem.data.__c.2893:0000000000000000 __c.2893
C:\cygwin\tmp\cc3mQAKf.s:2075   .progmem.data.__c.2794:0000000000000000 __c.2794
C:\cygwin\tmp\cc3mQAKf.s:2070   .progmem.data.__c.2796:0000000000000000 __c.2796
C:\cygwin\tmp\cc3mQAKf.s:2065   .progmem.data.__c.2798:0000000000000000 __c.2798
C:\cygwin\tmp\cc3mQAKf.s:2060   .progmem.data.__c.2800:0000000000000000 __c.2800
C:\cygwin\tmp\cc3mQAKf.s:2055   .progmem.data.__c.2802:0000000000000000 __c.2802
C:\cygwin\tmp\cc3mQAKf.s:2050   .progmem.data.__c.2804:0000000000000000 __c.2804
C:\cygwin\tmp\cc3mQAKf.s:2045   .progmem.data.__c.2806:0000000000000000 __c.2806
C:\cygwin\tmp\cc3mQAKf.s:2040   .progmem.data.__c.2808:0000000000000000 __c.2808
C:\cygwin\tmp\cc3mQAKf.s:2035   .progmem.data.__c.2810:0000000000000000 __c.2810
C:\cygwin\tmp\cc3mQAKf.s:2030   .progmem.data.__c.2812:0000000000000000 __c.2812
C:\cygwin\tmp\cc3mQAKf.s:2025   .progmem.data.__c.2814:0000000000000000 __c.2814
C:\cygwin\tmp\cc3mQAKf.s:2020   .progmem.data.__c.2816:0000000000000000 __c.2816
C:\cygwin\tmp\cc3mQAKf.s:2015   .progmem.data.__c.2818:0000000000000000 __c.2818
C:\cygwin\tmp\cc3mQAKf.s:2010   .progmem.data.__c.2820:0000000000000000 __c.2820
C:\cygwin\tmp\cc3mQAKf.s:2005   .progmem.data.__c.2822:0000000000000000 __c.2822
C:\cygwin\tmp\cc3mQAKf.s:2000   .progmem.data.__c.2824:0000000000000000 __c.2824
C:\cygwin\tmp\cc3mQAKf.s:1995   .progmem.data.__c.2826:0000000000000000 __c.2826
C:\cygwin\tmp\cc3mQAKf.s:1990   .progmem.data.__c.2828:0000000000000000 __c.2828
C:\cygwin\tmp\cc3mQAKf.s:1985   .progmem.data.__c.2830:0000000000000000 __c.2830
C:\cygwin\tmp\cc3mQAKf.s:1911   .rodata.CSWTCH.59:0000000000000000 CSWTCH.59
C:\cygwin\tmp\cc3mQAKf.s:2095   .progmem.data.__c.2907:0000000000000000 __c.2907
C:\cygwin\tmp\cc3mQAKf.s:2080   .progmem.data.__c.2914:0000000000000000 __c.2914

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
host_keyboard_leds
keyboard_protocol
keyboard_idle
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
