   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_key,"ax",@progbits
  12               	scan_key:
  13               	.LFB11:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "actionmap.h"
   9:../../tmk_core/common/bootmagic.c **** #include "host.h"
  10:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  11:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  12:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  13:../../tmk_core/common/bootmagic.c **** #include "hook.h"
  14:../../tmk_core/common/bootmagic.c **** 
  15:../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  16:../../tmk_core/common/bootmagic.c **** 
  17:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  18:../../tmk_core/common/bootmagic.c **** {
  19:../../tmk_core/common/bootmagic.c ****     /* check signature */
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  22:../../tmk_core/common/bootmagic.c ****     }
  23:../../tmk_core/common/bootmagic.c **** 
  24:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  26:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  29:../../tmk_core/common/bootmagic.c **** 
  30:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
  32:../../tmk_core/common/bootmagic.c ****         return;
  33:../../tmk_core/common/bootmagic.c ****     }
  34:../../tmk_core/common/bootmagic.c **** 
  35:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  38:../../tmk_core/common/bootmagic.c ****     }
  39:../../tmk_core/common/bootmagic.c **** 
  40:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  43:../../tmk_core/common/bootmagic.c ****     }
  44:../../tmk_core/common/bootmagic.c **** 
  45:../../tmk_core/common/bootmagic.c ****     /* user-defined checks */
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
  47:../../tmk_core/common/bootmagic.c **** 
  48:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  57:../../tmk_core/common/bootmagic.c ****         } else {
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  59:../../tmk_core/common/bootmagic.c ****         }
  60:../../tmk_core/common/bootmagic.c ****     }
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  62:../../tmk_core/common/bootmagic.c **** 
  63:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  85:../../tmk_core/common/bootmagic.c ****     }
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  88:../../tmk_core/common/bootmagic.c ****     }
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  90:../../tmk_core/common/bootmagic.c **** 
  91:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  92:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  93:../../tmk_core/common/bootmagic.c **** #endif
  94:../../tmk_core/common/bootmagic.c **** 
  95:../../tmk_core/common/bootmagic.c ****     /* default layer */
  96:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 108:../../tmk_core/common/bootmagic.c ****     } else {
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 111:../../tmk_core/common/bootmagic.c ****     }
 112:../../tmk_core/common/bootmagic.c **** }
 113:../../tmk_core/common/bootmagic.c **** 
 114:../../tmk_core/common/bootmagic.c **** static bool scan_key(uint16_t code)
 115:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 115 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 8F92      		push r8
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 8, -2
  22 0002 9F92      		push r9
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 9, -3
  26 0004 AF92      		push r10
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 10, -4
  30 0006 BF92      		push r11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 11, -5
  34 0008 EF92      		push r14
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 14, -6
  38 000a FF92      		push r15
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 15, -7
  42 000c 0F93      		push r16
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 16, -8
  46 000e 1F93      		push r17
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 17, -9
  50 0010 CF93      		push r28
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 28, -10
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 9 */
  57               	.L__stack_usage = 9
  58 0012 7C01      		movw r14,r24
  59               	.LVL1:
  60               	.LBB6:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  61               		.loc 1 116 0
  62 0014 C0E0      		ldi r28,0
  63               	.LVL2:
  64               	.L8:
  65               	.LBB7:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  66               		.loc 1 117 0
  67 0016 8C2F      		mov r24,r28
  68               	.LVL3:
  69 0018 0E94 0000 		call matrix_get_row
  70               	.LVL4:
  71 001c 4B01      		movw r8,r22
  72 001e 5C01      		movw r10,r24
  73               	.LVL5:
  74 0020 10E0      		ldi r17,0
  75 0022 00E0      		ldi r16,0
  76               	.LVL6:
  77               	.L7:
  78               	.LBB8:
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 119:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  79               		.loc 1 119 0
  80 0024 D501      		movw r26,r10
  81 0026 C401      		movw r24,r8
  82               	.LVL7:
  83 0028 002E      		mov r0,r16
  84 002a 00C0      		rjmp 2f
  85               		1:
  86 002c B695      		lsr r27
  87 002e A795      		ror r26
  88 0030 9795      		ror r25
  89 0032 8795      		ror r24
  90               		2:
  91 0034 0A94      		dec r0
  92 0036 02F4      		brpl 1b
  93 0038 80FF      		sbrs r24,0
  94 003a 00C0      		rjmp .L2
  95               	.LBB9:
 120:../../tmk_core/common/bootmagic.c ****                 // read key from Layer 0
 121:../../tmk_core/common/bootmagic.c ****                 action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
  96               		.loc 1 121 0
  97 003c 602F      		mov r22,r16
  98 003e 7C2F      		mov r23,r28
  99 0040 80E0      		ldi r24,0
 100 0042 0E94 0000 		call action_for_key
 101               	.LVL8:
 122:../../tmk_core/common/bootmagic.c ****                 if (action.code == code ||
 102               		.loc 1 122 0
 103 0046 8E15      		cp r24,r14
 104 0048 9F05      		cpc r25,r15
 105 004a 01F0      		breq .L3
 106               		.loc 1 122 0 is_stmt 0 discriminator 1
 107 004c 292F      		mov r18,r25
 108 004e 207E      		andi r18,lo8(-32)
 109 0050 392F      		mov r19,r25
 110 0052 307C      		andi r19,lo8(-64)
 111 0054 01F0      		breq .L4
 123:../../tmk_core/common/bootmagic.c ****                     ((action.kind.id == ACT_LMODS ||
 124:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS ||
 125:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LMODS_TAP ||
 126:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS_TAP ||
 112               		.loc 1 126 0 is_stmt 1
 113 0056 203A      		cpi r18,lo8(-96)
 114 0058 01F4      		brne .L2
 115               	.L4:
 127:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP ||
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 116               		.loc 1 128 0
 117 005a 8E15      		cp r24,r14
 118 005c 1F04      		cpc __zero_reg__,r15
 119 005e 01F4      		brne .L2
 120               	.L3:
 129:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 130:../../tmk_core/common/bootmagic.c ****                     return true;
 121               		.loc 1 130 0
 122 0060 81E0      		ldi r24,lo8(1)
 123               	.LVL9:
 124               	.L1:
 125               	/* epilogue start */
 126               	.LBE9:
 127               	.LBE8:
 128               	.LBE7:
 129               	.LBE6:
 131:../../tmk_core/common/bootmagic.c ****                 }
 132:../../tmk_core/common/bootmagic.c ****             }
 133:../../tmk_core/common/bootmagic.c ****         }
 134:../../tmk_core/common/bootmagic.c ****     }
 135:../../tmk_core/common/bootmagic.c ****     return false;
 136:../../tmk_core/common/bootmagic.c **** }
 130               		.loc 1 136 0
 131 0062 CF91      		pop r28
 132               	.LVL10:
 133 0064 1F91      		pop r17
 134 0066 0F91      		pop r16
 135 0068 FF90      		pop r15
 136 006a EF90      		pop r14
 137               	.LVL11:
 138 006c BF90      		pop r11
 139 006e AF90      		pop r10
 140 0070 9F90      		pop r9
 141 0072 8F90      		pop r8
 142               	.LVL12:
 143 0074 0895      		ret
 144               	.LVL13:
 145               	.L2:
 146 0076 0F5F      		subi r16,-1
 147 0078 1F4F      		sbci r17,-1
 148               	.LVL14:
 149               	.LBB12:
 150               	.LBB11:
 151               	.LBB10:
 118:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
 152               		.loc 1 118 0 discriminator 2
 153 007a 0231      		cpi r16,18
 154 007c 1105      		cpc r17,__zero_reg__
 155 007e 01F4      		brne .L7
 156               	.LBE10:
 157               	.LBE11:
 116:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 158               		.loc 1 116 0 discriminator 2
 159 0080 CF5F      		subi r28,lo8(-(1))
 160               	.LVL15:
 161 0082 C630      		cpi r28,lo8(6)
 162 0084 01F4      		brne .L8
 163               	.LBE12:
 135:../../tmk_core/common/bootmagic.c **** }
 164               		.loc 1 135 0
 165 0086 80E0      		ldi r24,0
 166               	.LVL16:
 167 0088 00C0      		rjmp .L1
 168               		.cfi_endproc
 169               	.LFE11:
 171               		.section	.text.bootmagic_scan_key,"ax",@progbits
 172               	.global	bootmagic_scan_key
 174               	bootmagic_scan_key:
 175               	.LFB12:
 137:../../tmk_core/common/bootmagic.c **** 
 138:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_key(uint16_t code)
 139:../../tmk_core/common/bootmagic.c **** {
 176               		.loc 1 139 0
 177               		.cfi_startproc
 178               	.LVL17:
 179 0000 CF93      		push r28
 180               	.LCFI9:
 181               		.cfi_def_cfa_offset 3
 182               		.cfi_offset 28, -2
 183 0002 DF93      		push r29
 184               	.LCFI10:
 185               		.cfi_def_cfa_offset 4
 186               		.cfi_offset 29, -3
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 2 */
 190               	.L__stack_usage = 2
 191 0004 EC01      		movw r28,r24
 140:../../tmk_core/common/bootmagic.c ****     if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
 192               		.loc 1 140 0
 193 0006 8CE2      		ldi r24,lo8(44)
 194 0008 90E0      		ldi r25,0
 195               	.LVL18:
 196 000a 0E94 0000 		call scan_key
 197               	.LVL19:
 198 000e 8823      		tst r24
 199 0010 01F0      		breq .L17
 141:../../tmk_core/common/bootmagic.c **** 
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 200               		.loc 1 142 0
 201 0012 CE01      		movw r24,r28
 202               	/* epilogue start */
 143:../../tmk_core/common/bootmagic.c **** }
 203               		.loc 1 143 0
 204 0014 DF91      		pop r29
 205 0016 CF91      		pop r28
 206               	.LVL20:
 142:../../tmk_core/common/bootmagic.c **** }
 207               		.loc 1 142 0
 208 0018 0C94 0000 		jmp scan_key
 209               	.LVL21:
 210               	.L17:
 211               		.loc 1 143 0
 212 001c 80E0      		ldi r24,0
 213               	/* epilogue start */
 214 001e DF91      		pop r29
 215 0020 CF91      		pop r28
 216               	.LVL22:
 217 0022 0895      		ret
 218               		.cfi_endproc
 219               	.LFE12:
 221               		.section	.text.bootmagic,"ax",@progbits
 222               	.global	bootmagic
 224               	bootmagic:
 225               	.LFB10:
  18:../../tmk_core/common/bootmagic.c ****     /* check signature */
 226               		.loc 1 18 0
 227               		.cfi_startproc
 228 0000 CF93      		push r28
 229               	.LCFI11:
 230               		.cfi_def_cfa_offset 3
 231               		.cfi_offset 28, -2
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 1 */
 235               	.L__stack_usage = 1
  20:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 236               		.loc 1 20 0
 237 0002 0E94 0000 		call eeconfig_is_enabled
 238               	.LVL23:
 239 0006 8111      		cpse r24,__zero_reg__
 240 0008 00C0      		rjmp .L20
  21:../../tmk_core/common/bootmagic.c ****     }
 241               		.loc 1 21 0
 242 000a 0E94 0000 		call eeconfig_init
 243               	.LVL24:
 244               	.L20:
  25:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
 245               		.loc 1 25 0
 246 000e 80E0      		ldi r24,lo8(__c.2504)
 247 0010 90E0      		ldi r25,hi8(__c.2504)
 248 0012 0E94 0000 		call xputs
 249               	.LVL25:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 250               		.loc 1 27 0
 251 0016 C5E6      		ldi r28,lo8(101)
 252               	.LVL26:
 253               	.L21:
 254 0018 C150      		subi r28,lo8(-(-1))
 255               	.LVL27:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 256               		.loc 1 27 0 is_stmt 0 discriminator 1
 257 001a 01F0      		breq .+2
 258 001c 00C0      		rjmp .L22
  28:../../tmk_core/common/bootmagic.c **** 
 259               		.loc 1 28 0 is_stmt 1
 260 001e 80E0      		ldi r24,lo8(__c.2510)
 261 0020 90E0      		ldi r25,hi8(__c.2510)
 262 0022 0E94 0000 		call xputs
 263               	.LVL28:
  31:../../tmk_core/common/bootmagic.c ****         return;
 264               		.loc 1 31 0
 265 0026 89E2      		ldi r24,lo8(41)
 266 0028 90E0      		ldi r25,0
 267 002a 0E94 0000 		call bootmagic_scan_key
 268               	.LVL29:
 269 002e 8111      		cpse r24,__zero_reg__
 270 0030 00C0      		rjmp .L19
  36:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 271               		.loc 1 36 0
 272 0032 8AE2      		ldi r24,lo8(42)
 273 0034 90E0      		ldi r25,0
 274 0036 0E94 0000 		call bootmagic_scan_key
 275               	.LVL30:
 276 003a 8111      		cpse r24,__zero_reg__
  37:../../tmk_core/common/bootmagic.c ****     }
 277               		.loc 1 37 0
 278 003c 0E94 0000 		call eeconfig_init
 279               	.LVL31:
 280               	.L24:
  41:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 281               		.loc 1 41 0
 282 0040 85E0      		ldi r24,lo8(5)
 283 0042 90E0      		ldi r25,0
 284 0044 0E94 0000 		call bootmagic_scan_key
 285               	.LVL32:
 286 0048 8111      		cpse r24,__zero_reg__
  42:../../tmk_core/common/bootmagic.c ****     }
 287               		.loc 1 42 0
 288 004a 0E94 0000 		call bootloader_jump
 289               	.LVL33:
 290               	.L25:
  46:../../tmk_core/common/bootmagic.c **** 
 291               		.loc 1 46 0
 292 004e 0E94 0000 		call hook_bootmagic
 293               	.LVL34:
  49:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 294               		.loc 1 49 0
 295 0052 0E94 0000 		call eeconfig_read_debug
 296               	.LVL35:
 297 0056 8093 0000 		sts debug_config,r24
  50:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 298               		.loc 1 50 0
 299 005a 87E0      		ldi r24,lo8(7)
 300 005c 90E0      		ldi r25,0
 301 005e 0E94 0000 		call bootmagic_scan_key
 302               	.LVL36:
 303 0062 8823      		tst r24
 304 0064 01F0      		breq .L26
  51:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 305               		.loc 1 51 0
 306 0066 8BE1      		ldi r24,lo8(27)
 307 0068 90E0      		ldi r25,0
 308 006a 0E94 0000 		call bootmagic_scan_key
 309               	.LVL37:
 310 006e 8823      		tst r24
 311 0070 01F4      		brne .+2
 312 0072 00C0      		rjmp .L27
  52:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 313               		.loc 1 52 0
 314 0074 9091 0000 		lds r25,debug_config
 315 0078 892F      		mov r24,r25
 316 007a 8D7F      		andi r24,~(1<<1)
 317 007c 91FF      		sbrs r25,1
 318 007e 8260      		ori r24,1<<1
 319               	.L98:
  58:../../tmk_core/common/bootmagic.c ****         }
 320               		.loc 1 58 0
 321 0080 8093 0000 		sts debug_config,r24
 322               	.L26:
  61:../../tmk_core/common/bootmagic.c **** 
 323               		.loc 1 61 0
 324 0084 8091 0000 		lds r24,debug_config
 325 0088 0E94 0000 		call eeconfig_write_debug
 326               	.LVL38:
  64:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 327               		.loc 1 64 0
 328 008c 0E94 0000 		call eeconfig_read_keymap
 329               	.LVL39:
 330 0090 8093 0000 		sts keymap_config,r24
  65:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 331               		.loc 1 65 0
 332 0094 80EE      		ldi r24,lo8(-32)
 333 0096 90E0      		ldi r25,0
 334 0098 0E94 0000 		call bootmagic_scan_key
 335               	.LVL40:
 336 009c 8823      		tst r24
 337 009e 01F0      		breq .L30
  66:../../tmk_core/common/bootmagic.c ****     }
 338               		.loc 1 66 0
 339 00a0 9091 0000 		lds r25,keymap_config
 340 00a4 892F      		mov r24,r25
 341 00a6 8E7F      		andi r24,~(1<<0)
 342 00a8 90FF      		sbrs r25,0
 343 00aa 8160      		ori r24,1<<0
 344 00ac 8093 0000 		sts keymap_config,r24
 345               	.L30:
  68:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 346               		.loc 1 68 0
 347 00b0 89E3      		ldi r24,lo8(57)
 348 00b2 90E0      		ldi r25,0
 349 00b4 0E94 0000 		call bootmagic_scan_key
 350               	.LVL41:
 351 00b8 8823      		tst r24
 352 00ba 01F0      		breq .L31
  69:../../tmk_core/common/bootmagic.c ****     }
 353               		.loc 1 69 0
 354 00bc 9091 0000 		lds r25,keymap_config
 355 00c0 892F      		mov r24,r25
 356 00c2 8D7F      		andi r24,~(1<<1)
 357 00c4 91FF      		sbrs r25,1
 358 00c6 8260      		ori r24,1<<1
 359 00c8 8093 0000 		sts keymap_config,r24
 360               	.L31:
  71:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 361               		.loc 1 71 0
 362 00cc 82EE      		ldi r24,lo8(-30)
 363 00ce 90E0      		ldi r25,0
 364 00d0 0E94 0000 		call bootmagic_scan_key
 365               	.LVL42:
 366 00d4 8823      		tst r24
 367 00d6 01F0      		breq .L32
  72:../../tmk_core/common/bootmagic.c ****     }
 368               		.loc 1 72 0
 369 00d8 9091 0000 		lds r25,keymap_config
 370 00dc 892F      		mov r24,r25
 371 00de 8B7F      		andi r24,~(1<<2)
 372 00e0 92FF      		sbrs r25,2
 373 00e2 8460      		ori r24,1<<2
 374 00e4 8093 0000 		sts keymap_config,r24
 375               	.L32:
  74:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 376               		.loc 1 74 0
 377 00e8 86EE      		ldi r24,lo8(-26)
 378 00ea 90E0      		ldi r25,0
 379 00ec 0E94 0000 		call bootmagic_scan_key
 380               	.LVL43:
 381 00f0 8823      		tst r24
 382 00f2 01F0      		breq .L33
  75:../../tmk_core/common/bootmagic.c ****     }
 383               		.loc 1 75 0
 384 00f4 9091 0000 		lds r25,keymap_config
 385 00f8 892F      		mov r24,r25
 386 00fa 877F      		andi r24,~(1<<3)
 387 00fc 93FF      		sbrs r25,3
 388 00fe 8860      		ori r24,1<<3
 389 0100 8093 0000 		sts keymap_config,r24
 390               	.L33:
  77:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 391               		.loc 1 77 0
 392 0104 83EE      		ldi r24,lo8(-29)
 393 0106 90E0      		ldi r25,0
 394 0108 0E94 0000 		call bootmagic_scan_key
 395               	.LVL44:
 396 010c 8823      		tst r24
 397 010e 01F0      		breq .L34
  78:../../tmk_core/common/bootmagic.c ****     }
 398               		.loc 1 78 0
 399 0110 9091 0000 		lds r25,keymap_config
 400 0114 892F      		mov r24,r25
 401 0116 8F7E      		andi r24,~(1<<4)
 402 0118 94FF      		sbrs r25,4
 403 011a 8061      		ori r24,1<<4
 404 011c 8093 0000 		sts keymap_config,r24
 405               	.L34:
  80:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 406               		.loc 1 80 0
 407 0120 85E3      		ldi r24,lo8(53)
 408 0122 90E0      		ldi r25,0
 409 0124 0E94 0000 		call bootmagic_scan_key
 410               	.LVL45:
 411 0128 8823      		tst r24
 412 012a 01F0      		breq .L35
  81:../../tmk_core/common/bootmagic.c ****     }
 413               		.loc 1 81 0
 414 012c 9091 0000 		lds r25,keymap_config
 415 0130 892F      		mov r24,r25
 416 0132 8F7D      		andi r24,~(1<<5)
 417 0134 95FF      		sbrs r25,5
 418 0136 8062      		ori r24,1<<5
 419 0138 8093 0000 		sts keymap_config,r24
 420               	.L35:
  83:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 421               		.loc 1 83 0
 422 013c 81E3      		ldi r24,lo8(49)
 423 013e 90E0      		ldi r25,0
 424 0140 0E94 0000 		call bootmagic_scan_key
 425               	.LVL46:
 426 0144 8823      		tst r24
 427 0146 01F0      		breq .L36
  84:../../tmk_core/common/bootmagic.c ****     }
 428               		.loc 1 84 0
 429 0148 9091 0000 		lds r25,keymap_config
 430 014c 892F      		mov r24,r25
 431 014e 8F7B      		andi r24,~(1<<6)
 432 0150 96FF      		sbrs r25,6
 433 0152 8064      		ori r24,1<<6
 434 0154 8093 0000 		sts keymap_config,r24
 435               	.L36:
  86:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 436               		.loc 1 86 0
 437 0158 81E1      		ldi r24,lo8(17)
 438 015a 90E0      		ldi r25,0
 439 015c 0E94 0000 		call bootmagic_scan_key
 440               	.LVL47:
 441 0160 8823      		tst r24
 442 0162 01F0      		breq .L37
  87:../../tmk_core/common/bootmagic.c ****     }
 443               		.loc 1 87 0
 444 0164 9091 0000 		lds r25,keymap_config
 445 0168 892F      		mov r24,r25
 446 016a 97FB      		bst r25,7
 447 016c 87F9      		bld r24,7
 448 016e 8058      		subi r24,0x80
 449 0170 8093 0000 		sts keymap_config,r24
 450               	.L37:
  89:../../tmk_core/common/bootmagic.c **** 
 451               		.loc 1 89 0
 452 0174 8091 0000 		lds r24,keymap_config
 453 0178 0E94 0000 		call eeconfig_write_keymap
 454               	.LVL48:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 455               		.loc 1 97 0
 456 017c 87E2      		ldi r24,lo8(39)
 457 017e 90E0      		ldi r25,0
 458 0180 0E94 0000 		call bootmagic_scan_key
 459               	.LVL49:
 460 0184 C82F      		mov r28,r24
 461               	.LVL50:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 462               		.loc 1 98 0
 463 0186 8EE1      		ldi r24,lo8(30)
 464 0188 90E0      		ldi r25,0
 465               	.LVL51:
 466 018a 0E94 0000 		call bootmagic_scan_key
 467               	.LVL52:
 468 018e 8111      		cpse r24,__zero_reg__
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 469               		.loc 1 98 0 is_stmt 0 discriminator 1
 470 0190 C260      		ori r28,lo8(2)
 471               	.LVL53:
 472               	.L38:
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 473               		.loc 1 99 0 is_stmt 1
 474 0192 8FE1      		ldi r24,lo8(31)
 475 0194 90E0      		ldi r25,0
 476 0196 0E94 0000 		call bootmagic_scan_key
 477               	.LVL54:
 478 019a 8111      		cpse r24,__zero_reg__
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 479               		.loc 1 99 0 is_stmt 0 discriminator 1
 480 019c C460      		ori r28,lo8(4)
 481               	.LVL55:
 482               	.L39:
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 483               		.loc 1 100 0 is_stmt 1
 484 019e 80E2      		ldi r24,lo8(32)
 485 01a0 90E0      		ldi r25,0
 486 01a2 0E94 0000 		call bootmagic_scan_key
 487               	.LVL56:
 488 01a6 8111      		cpse r24,__zero_reg__
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 489               		.loc 1 100 0 is_stmt 0 discriminator 1
 490 01a8 C860      		ori r28,lo8(8)
 491               	.LVL57:
 492               	.L40:
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 493               		.loc 1 101 0 is_stmt 1
 494 01aa 81E2      		ldi r24,lo8(33)
 495 01ac 90E0      		ldi r25,0
 496 01ae 0E94 0000 		call bootmagic_scan_key
 497               	.LVL58:
 498 01b2 8111      		cpse r24,__zero_reg__
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 499               		.loc 1 101 0 is_stmt 0 discriminator 1
 500 01b4 C061      		ori r28,lo8(16)
 501               	.LVL59:
 502               	.L41:
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 503               		.loc 1 102 0 is_stmt 1
 504 01b6 82E2      		ldi r24,lo8(34)
 505 01b8 90E0      		ldi r25,0
 506 01ba 0E94 0000 		call bootmagic_scan_key
 507               	.LVL60:
 508 01be 8111      		cpse r24,__zero_reg__
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 509               		.loc 1 102 0 is_stmt 0 discriminator 1
 510 01c0 C062      		ori r28,lo8(32)
 511               	.LVL61:
 512               	.L42:
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 513               		.loc 1 103 0 is_stmt 1
 514 01c2 83E2      		ldi r24,lo8(35)
 515 01c4 90E0      		ldi r25,0
 516 01c6 0E94 0000 		call bootmagic_scan_key
 517               	.LVL62:
 518 01ca 8111      		cpse r24,__zero_reg__
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 519               		.loc 1 103 0 is_stmt 0 discriminator 1
 520 01cc C064      		ori r28,lo8(64)
 521               	.LVL63:
 522               	.L43:
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 523               		.loc 1 104 0 is_stmt 1
 524 01ce 84E2      		ldi r24,lo8(36)
 525 01d0 90E0      		ldi r25,0
 526 01d2 0E94 0000 		call bootmagic_scan_key
 527               	.LVL64:
 528 01d6 8823      		tst r24
 529 01d8 01F0      		breq .L44
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 530               		.loc 1 104 0 is_stmt 0 discriminator 1
 531 01da C068      		ori r28,lo8(-128)
 532               	.LVL65:
 533               	.L45:
 106:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 534               		.loc 1 106 0 is_stmt 1
 535 01dc 8C2F      		mov r24,r28
 536 01de 0E94 0000 		call eeconfig_write_default_layer
 537               	.LVL66:
 107:../../tmk_core/common/bootmagic.c ****     } else {
 538               		.loc 1 107 0
 539 01e2 6C2F      		mov r22,r28
 540               	.LVL67:
 541               	.L99:
 110:../../tmk_core/common/bootmagic.c ****     }
 542               		.loc 1 110 0
 543 01e4 70E0      		ldi r23,0
 544 01e6 90E0      		ldi r25,0
 545 01e8 80E0      		ldi r24,0
 546               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 547               		.loc 1 112 0
 548 01ea CF91      		pop r28
 110:../../tmk_core/common/bootmagic.c ****     }
 549               		.loc 1 110 0
 550 01ec 0C94 0000 		jmp default_layer_set
 551               	.LVL68:
 552               	.L22:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 553               		.loc 1 27 0 discriminator 2
 554 01f0 0E94 0000 		call matrix_scan
 555               	.LVL69:
 556               	.LBB13:
 557               	.LBB14:
 558               		.file 2 "c:\\avr-gcc-7.2.0-x64-mingw\\avr\\include\\util\\delay.h"
   1:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    All rights reserved.
   5:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
   6:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
   9:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  12:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      distribution.
  16:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  17:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  21:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  33:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  35:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  38:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #  endif
  42:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  44:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #include <math.h>
  47:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  48:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /** \file */
  49:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \code
  51:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \endcode
  55:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  56:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     used.
  60:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  61:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  70:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  79:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  83:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** */
  84:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  85:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif
  89:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  90:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \def F_CPU
  95:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
  97:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 103:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****     integer value.
 107:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****  */
 108:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif
 110:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 111:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif
 114:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 115:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #  include <math.h>
 119:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #endif
 120:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 121:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** /**
 122:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 124:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 126:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 129:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 131:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 137:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 142:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 147:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    respectively.
 151:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 152:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    \note
 153:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 154:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 164:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****  */
 165:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** void
 166:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** {
 168:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 176:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 179:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 182:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	#else
 183:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 		//round up by default
 184:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	#endif
 186:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 
 187:c:\avr-gcc-7.2.0-x64-mingw\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 559               		.loc 2 187 0 discriminator 2
 560 01f4 8FE3      		ldi r24,lo8(-25537)
 561 01f6 9CE9      		ldi r25,hi8(-25537)
 562 01f8 0197      	1:	sbiw r24,1
 563 01fa 01F4      		brne 1b
 564 01fc 00C0      		rjmp .
 565 01fe 0000      		nop
 566 0200 00C0      		rjmp .L21
 567               	.LVL70:
 568               	.L27:
 569               	.LBE14:
 570               	.LBE13:
  53:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 571               		.loc 1 53 0
 572 0202 8EE0      		ldi r24,lo8(14)
 573 0204 90E0      		ldi r25,0
 574 0206 0E94 0000 		call bootmagic_scan_key
 575               	.LVL71:
 576 020a 8823      		tst r24
 577 020c 01F0      		breq .L28
  54:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 578               		.loc 1 54 0
 579 020e 9091 0000 		lds r25,debug_config
 580 0212 892F      		mov r24,r25
 581 0214 8B7F      		andi r24,~(1<<2)
 582 0216 92FF      		sbrs r25,2
 583 0218 8460      		ori r24,1<<2
 584 021a 00C0      		rjmp .L98
 585               	.L28:
  55:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 586               		.loc 1 55 0
 587 021c 80E1      		ldi r24,lo8(16)
 588 021e 90E0      		ldi r25,0
 589 0220 0E94 0000 		call bootmagic_scan_key
 590               	.LVL72:
 591 0224 9091 0000 		lds r25,debug_config
 592 0228 8823      		tst r24
 593 022a 01F0      		breq .L29
  56:../../tmk_core/common/bootmagic.c ****         } else {
 594               		.loc 1 56 0
 595 022c 892F      		mov r24,r25
 596 022e 877F      		andi r24,~(1<<3)
 597 0230 93FF      		sbrs r25,3
 598 0232 8860      		ori r24,1<<3
 599 0234 00C0      		rjmp .L98
 600               	.L29:
  58:../../tmk_core/common/bootmagic.c ****         }
 601               		.loc 1 58 0
 602 0236 892F      		mov r24,r25
 603 0238 8E7F      		andi r24,~(1<<0)
 604 023a 90FF      		sbrs r25,0
 605 023c 8160      		ori r24,1<<0
 606 023e 00C0      		rjmp .L98
 607               	.LVL73:
 608               	.L44:
 105:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 609               		.loc 1 105 0
 610 0240 C111      		cpse r28,__zero_reg__
 611 0242 00C0      		rjmp .L45
 109:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 612               		.loc 1 109 0
 613 0244 0E94 0000 		call eeconfig_read_default_layer
 614               	.LVL74:
 110:../../tmk_core/common/bootmagic.c ****     }
 615               		.loc 1 110 0
 616 0248 682F      		mov r22,r24
 617 024a 00C0      		rjmp .L99
 618               	.LVL75:
 619               	.L19:
 620               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 621               		.loc 1 112 0
 622 024c CF91      		pop r28
 623               	.LVL76:
 624 024e 0895      		ret
 625               		.cfi_endproc
 626               	.LFE10:
 628               		.section	.progmem.data.__c.2510,"a",@progbits
 631               	__c.2510:
 632 0000 646F 6E65 		.string	"done.\n"
 632      2E0A 00
 633               		.section	.progmem.data.__c.2504,"a",@progbits
 636               	__c.2504:
 637 0000 626F 6F74 		.string	"bootmagic scan: ... "
 637      6D61 6769 
 637      6320 7363 
 637      616E 3A20 
 637      2E2E 2E20 
 638               		.comm	keymap_config,1,1
 639               		.text
 640               	.Letext0:
 641               		.file 3 "c:\\avr-gcc-7.2.0-x64-mingw\\avr\\include\\stdint.h"
 642               		.file 4 "../../tmk_core/common/matrix.h"
 643               		.file 5 "../../tmk_core/common/debug.h"
 644               		.file 6 "../../tmk_core/common/avr/xprintf.h"
 645               		.file 7 "../../tmk_core/common/keyboard.h"
 646               		.file 8 "../../tmk_core/common/keycode.h"
 647               		.file 9 "../../tmk_core/common/action_code.h"
 648               		.file 10 "../../tmk_core/common/keymap.h"
 649               		.file 11 "../../tmk_core/common/host.h"
 650               		.file 12 "../../tmk_core/common/action_layer.h"
 651               		.file 13 "../../tmk_core/common/action.h"
 652               		.file 14 "../../tmk_core/common/eeconfig.h"
 653               		.file 15 "../../tmk_core/common/bootloader.h"
 654               		.file 16 "../../tmk_core/common/hook.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
C:\cygwin\tmp\ccGBEN3M.s:2      *ABS*:000000000000003e __SP_H__
C:\cygwin\tmp\ccGBEN3M.s:3      *ABS*:000000000000003d __SP_L__
C:\cygwin\tmp\ccGBEN3M.s:4      *ABS*:000000000000003f __SREG__
C:\cygwin\tmp\ccGBEN3M.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\cygwin\tmp\ccGBEN3M.s:6      *ABS*:0000000000000001 __zero_reg__
C:\cygwin\tmp\ccGBEN3M.s:12     .text.scan_key:0000000000000000 scan_key
C:\cygwin\tmp\ccGBEN3M.s:174    .text.bootmagic_scan_key:0000000000000000 bootmagic_scan_key
C:\cygwin\tmp\ccGBEN3M.s:224    .text.bootmagic:0000000000000000 bootmagic
C:\cygwin\tmp\ccGBEN3M.s:636    .progmem.data.__c.2504:0000000000000000 __c.2504
C:\cygwin\tmp\ccGBEN3M.s:631    .progmem.data.__c.2510:0000000000000000 __c.2510
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
action_for_key
eeconfig_is_enabled
eeconfig_init
xputs
bootloader_jump
hook_bootmagic
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
eeconfig_write_default_layer
default_layer_set
matrix_scan
eeconfig_read_default_layer
__do_clear_bss
