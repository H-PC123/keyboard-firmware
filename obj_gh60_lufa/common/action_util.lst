   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB2:
  15               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               	.LBB4:
  24               	.LBB5:
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  25               		.loc 1 238 0
  26 0000 2091 0000 		lds r18,keyboard_report
  27 0004 3091 0000 		lds r19,keyboard_report+1
  28 0008 F901      		movw r30,r18
  29 000a 3296      		adiw r30,2
 236:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
  30               		.loc 1 236 0
  31 000c 9FEF      		ldi r25,lo8(-1)
 235:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
  32               		.loc 1 235 0
  33 000e 40E0      		ldi r20,0
  34               	.LVL1:
  35               	.L4:
  36               		.loc 1 238 0
  37 0010 5191      		ld r21,Z+
  38 0012 8517      		cp r24,r21
  39 0014 01F0      		breq .L1
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
  40               		.loc 1 241 0
  41 0016 9F3F      		cpi r25,lo8(-1)
  42 0018 01F4      		brne .L3
  43 001a 5111      		cpse r21,__zero_reg__
  44 001c 00C0      		rjmp .L3
  45 001e 942F      		mov r25,r20
  46               	.LVL2:
  47               	.L3:
  48 0020 4F5F      		subi r20,lo8(-(1))
  49               	.LVL3:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  50               		.loc 1 237 0
  51 0022 4630      		cpi r20,lo8(6)
  52 0024 01F4      		brne .L4
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
  53               		.loc 1 246 0
  54 0026 9F3F      		cpi r25,lo8(-1)
  55 0028 01F4      		brne .L6
  56               	.L1:
  57               	/* epilogue start */
  58               	.LBE5:
  59               	.LBE4:
  85:../../tmk_core/common/action_util.c **** 
  60               		.loc 1 85 0
  61 002a 0895      		ret
  62               	.L6:
  63               	.LBB7:
  64               	.LBB6:
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
  65               		.loc 1 247 0
  66 002c 290F      		add r18,r25
  67 002e 311D      		adc r19,__zero_reg__
  68 0030 97FD      		sbrc r25,7
  69 0032 3A95      		dec r19
  70 0034 F901      		movw r30,r18
  71 0036 8283      		std Z+2,r24
  72               	.LVL4:
  73               	.LBE6:
  74               	.LBE7:
  85:../../tmk_core/common/action_util.c **** 
  75               		.loc 1 85 0
  76 0038 0895      		ret
  77               		.cfi_endproc
  78               	.LFE2:
  80               		.section	.text.del_key,"ax",@progbits
  81               	.global	del_key
  83               	del_key:
  84               	.LFB3:
  88:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  85               		.loc 1 88 0
  86               		.cfi_startproc
  87               	.LVL5:
  88               	/* prologue: function */
  89               	/* frame size = 0 */
  90               	/* stack size = 0 */
  91               	.L__stack_usage = 0
  92               	.LBB11:
  93               	.LBB12:
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  94               		.loc 1 282 0
  95 0000 2091 0000 		lds r18,keyboard_report
  96 0004 3091 0000 		lds r19,keyboard_report+1
  97 0008 F901      		movw r30,r18
  98 000a 3296      		adiw r30,2
  99 000c 285F      		subi r18,-8
 100 000e 3F4F      		sbci r19,-1
 101               	.LVL6:
 102               	.L11:
 103 0010 9191      		ld r25,Z+
 104               	.LVL7:
 105 0012 8913      		cpse r24,r25
 106 0014 00C0      		rjmp .L10
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 107               		.loc 1 283 0
 108 0016 DF01      		movw r26,r30
 109 0018 1197      		sbiw r26,1
 110 001a 1C92      		st X,__zero_reg__
 111               	.L10:
 112               	.LVL8:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 113               		.loc 1 281 0
 114 001c E217      		cp r30,r18
 115 001e F307      		cpc r31,r19
 116 0020 01F4      		brne .L11
 117               	/* epilogue start */
 118               	.LBE12:
 119               	.LBE11:
  96:../../tmk_core/common/action_util.c **** 
 120               		.loc 1 96 0
 121 0022 0895      		ret
 122               		.cfi_endproc
 123               	.LFE3:
 125               		.section	.text.clear_keys,"ax",@progbits
 126               	.global	clear_keys
 128               	clear_keys:
 129               	.LFB4:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 130               		.loc 1 99 0
 131               		.cfi_startproc
 132               	/* prologue: function */
 133               	/* frame size = 0 */
 134               	/* stack size = 0 */
 135               	.L__stack_usage = 0
 136               	.LVL9:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 137               		.loc 1 99 0
 138 0000 81E0      		ldi r24,lo8(1)
 139 0002 90E0      		ldi r25,0
 140               	.LVL10:
 141               	.L14:
 142               	.LBB13:
 102:../../tmk_core/common/action_util.c ****     }
 143               		.loc 1 102 0 discriminator 3
 144 0004 E091 0000 		lds r30,keyboard_report
 145 0008 F091 0000 		lds r31,keyboard_report+1
 146 000c E80F      		add r30,r24
 147 000e F91F      		adc r31,r25
 148 0010 1082      		st Z,__zero_reg__
 149               	.LVL11:
 150 0012 0196      		adiw r24,1
 151               	.LVL12:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 152               		.loc 1 101 0 discriminator 3
 153 0014 8830      		cpi r24,8
 154 0016 9105      		cpc r25,__zero_reg__
 155 0018 01F4      		brne .L14
 156               	/* epilogue start */
 157               	.LBE13:
 104:../../tmk_core/common/action_util.c **** 
 158               		.loc 1 104 0
 159 001a 0895      		ret
 160               		.cfi_endproc
 161               	.LFE4:
 163               		.section	.text.get_mods,"ax",@progbits
 164               	.global	get_mods
 166               	get_mods:
 167               	.LFB5:
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 168               		.loc 1 108 0
 169               		.cfi_startproc
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 174               		.loc 1 108 0
 175 0000 8091 0000 		lds r24,real_mods
 176               	/* epilogue start */
 177 0004 0895      		ret
 178               		.cfi_endproc
 179               	.LFE5:
 181               		.section	.text.add_mods,"ax",@progbits
 182               	.global	add_mods
 184               	add_mods:
 185               	.LFB6:
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 186               		.loc 1 109 0
 187               		.cfi_startproc
 188               	.LVL13:
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	/* stack size = 0 */
 192               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 193               		.loc 1 109 0
 194 0000 9091 0000 		lds r25,real_mods
 195 0004 892B      		or r24,r25
 196               	.LVL14:
 197 0006 8093 0000 		sts real_mods,r24
 198               	/* epilogue start */
 199 000a 0895      		ret
 200               		.cfi_endproc
 201               	.LFE6:
 203               		.section	.text.del_mods,"ax",@progbits
 204               	.global	del_mods
 206               	del_mods:
 207               	.LFB7:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 208               		.loc 1 110 0
 209               		.cfi_startproc
 210               	.LVL15:
 211               	/* prologue: function */
 212               	/* frame size = 0 */
 213               	/* stack size = 0 */
 214               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 215               		.loc 1 110 0
 216 0000 982F      		mov r25,r24
 217 0002 9095      		com r25
 218 0004 8091 0000 		lds r24,real_mods
 219               	.LVL16:
 220 0008 8923      		and r24,r25
 221 000a 8093 0000 		sts real_mods,r24
 222               	/* epilogue start */
 223 000e 0895      		ret
 224               		.cfi_endproc
 225               	.LFE7:
 227               		.section	.text.set_mods,"ax",@progbits
 228               	.global	set_mods
 230               	set_mods:
 231               	.LFB8:
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 232               		.loc 1 111 0
 233               		.cfi_startproc
 234               	.LVL17:
 235               	/* prologue: function */
 236               	/* frame size = 0 */
 237               	/* stack size = 0 */
 238               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 239               		.loc 1 111 0
 240 0000 8093 0000 		sts real_mods,r24
 241               	/* epilogue start */
 242 0004 0895      		ret
 243               		.cfi_endproc
 244               	.LFE8:
 246               		.section	.text.clear_mods,"ax",@progbits
 247               	.global	clear_mods
 249               	clear_mods:
 250               	.LFB9:
 112:../../tmk_core/common/action_util.c **** 
 251               		.loc 1 112 0
 252               		.cfi_startproc
 253               	/* prologue: function */
 254               	/* frame size = 0 */
 255               	/* stack size = 0 */
 256               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** 
 257               		.loc 1 112 0
 258 0000 1092 0000 		sts real_mods,__zero_reg__
 259               	/* epilogue start */
 260 0004 0895      		ret
 261               		.cfi_endproc
 262               	.LFE9:
 264               		.section	.text.get_weak_mods,"ax",@progbits
 265               	.global	get_weak_mods
 267               	get_weak_mods:
 268               	.LFB10:
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 269               		.loc 1 115 0
 270               		.cfi_startproc
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 275               		.loc 1 115 0
 276 0000 8091 0000 		lds r24,weak_mods
 277               	/* epilogue start */
 278 0004 0895      		ret
 279               		.cfi_endproc
 280               	.LFE10:
 282               		.section	.text.add_weak_mods,"ax",@progbits
 283               	.global	add_weak_mods
 285               	add_weak_mods:
 286               	.LFB11:
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 287               		.loc 1 116 0
 288               		.cfi_startproc
 289               	.LVL18:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 294               		.loc 1 116 0
 295 0000 9091 0000 		lds r25,weak_mods
 296 0004 892B      		or r24,r25
 297               	.LVL19:
 298 0006 8093 0000 		sts weak_mods,r24
 299               	/* epilogue start */
 300 000a 0895      		ret
 301               		.cfi_endproc
 302               	.LFE11:
 304               		.section	.text.del_weak_mods,"ax",@progbits
 305               	.global	del_weak_mods
 307               	del_weak_mods:
 308               	.LFB12:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 309               		.loc 1 117 0
 310               		.cfi_startproc
 311               	.LVL20:
 312               	/* prologue: function */
 313               	/* frame size = 0 */
 314               	/* stack size = 0 */
 315               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 316               		.loc 1 117 0
 317 0000 982F      		mov r25,r24
 318 0002 9095      		com r25
 319 0004 8091 0000 		lds r24,weak_mods
 320               	.LVL21:
 321 0008 8923      		and r24,r25
 322 000a 8093 0000 		sts weak_mods,r24
 323               	/* epilogue start */
 324 000e 0895      		ret
 325               		.cfi_endproc
 326               	.LFE12:
 328               		.section	.text.set_weak_mods,"ax",@progbits
 329               	.global	set_weak_mods
 331               	set_weak_mods:
 332               	.LFB13:
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 333               		.loc 1 118 0
 334               		.cfi_startproc
 335               	.LVL22:
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 340               		.loc 1 118 0
 341 0000 8093 0000 		sts weak_mods,r24
 342               	/* epilogue start */
 343 0004 0895      		ret
 344               		.cfi_endproc
 345               	.LFE13:
 347               		.section	.text.clear_weak_mods,"ax",@progbits
 348               	.global	clear_weak_mods
 350               	clear_weak_mods:
 351               	.LFB14:
 119:../../tmk_core/common/action_util.c **** 
 352               		.loc 1 119 0
 353               		.cfi_startproc
 354               	/* prologue: function */
 355               	/* frame size = 0 */
 356               	/* stack size = 0 */
 357               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** 
 358               		.loc 1 119 0
 359 0000 1092 0000 		sts weak_mods,__zero_reg__
 360               	/* epilogue start */
 361 0004 0895      		ret
 362               		.cfi_endproc
 363               	.LFE14:
 365               		.section	.text.set_oneshot_mods,"ax",@progbits
 366               	.global	set_oneshot_mods
 368               	set_oneshot_mods:
 369               	.LFB15:
 124:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 370               		.loc 1 124 0
 371               		.cfi_startproc
 372               	.LVL23:
 373               	/* prologue: function */
 374               	/* frame size = 0 */
 375               	/* stack size = 0 */
 376               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 377               		.loc 1 125 0
 378 0000 8093 0000 		sts oneshot_mods,r24
 379               	/* epilogue start */
 129:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 380               		.loc 1 129 0
 381 0004 0895      		ret
 382               		.cfi_endproc
 383               	.LFE15:
 385               		.section	.text.clear_oneshot_mods,"ax",@progbits
 386               	.global	clear_oneshot_mods
 388               	clear_oneshot_mods:
 389               	.LFB16:
 131:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 390               		.loc 1 131 0
 391               		.cfi_startproc
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 394               	/* stack size = 0 */
 395               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 396               		.loc 1 132 0
 397 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 398               	/* epilogue start */
 136:../../tmk_core/common/action_util.c **** #endif
 399               		.loc 1 136 0
 400 0004 0895      		ret
 401               		.cfi_endproc
 402               	.LFE16:
 404               		.section	.text.has_anykey,"ax",@progbits
 405               	.global	has_anykey
 407               	has_anykey:
 408               	.LFB17:
 146:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 409               		.loc 1 146 0
 410               		.cfi_startproc
 411               	/* prologue: function */
 412               	/* frame size = 0 */
 413               	/* stack size = 0 */
 414               	.L__stack_usage = 0
 415               	.LVL24:
 416               	.LBB14:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 417               		.loc 1 149 0
 418 0000 2091 0000 		lds r18,keyboard_report
 419 0004 3091 0000 		lds r19,keyboard_report+1
 420 0008 F901      		movw r30,r18
 421 000a 3196      		adiw r30,1
 422 000c 285F      		subi r18,-8
 423 000e 3F4F      		sbci r19,-1
 424               	.LBE14:
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 425               		.loc 1 147 0
 426 0010 80E0      		ldi r24,0
 427               	.LVL25:
 428               	.L30:
 429               	.LBB15:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 430               		.loc 1 149 0
 431 0012 9191      		ld r25,Z+
 432               	.LVL26:
 433 0014 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****     }
 434               		.loc 1 150 0
 435 0016 8F5F      		subi r24,lo8(-(1))
 436               	.LVL27:
 437               	.L29:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 438               		.loc 1 148 0 discriminator 2
 439 0018 E217      		cp r30,r18
 440 001a F307      		cpc r31,r19
 441 001c 01F4      		brne .L30
 442               	/* epilogue start */
 443               	.LBE15:
 153:../../tmk_core/common/action_util.c **** 
 444               		.loc 1 153 0
 445 001e 0895      		ret
 446               		.cfi_endproc
 447               	.LFE17:
 449               		.section	.text.send_keyboard_report,"ax",@progbits
 450               	.global	send_keyboard_report
 452               	send_keyboard_report:
 453               	.LFB1:
  55:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 454               		.loc 1 55 0
 455               		.cfi_startproc
 456               	/* prologue: function */
 457               	/* frame size = 0 */
 458               	/* stack size = 0 */
 459               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 460               		.loc 1 56 0
 461 0000 E091 0000 		lds r30,keyboard_report
 462 0004 F091 0000 		lds r31,keyboard_report+1
 463 0008 8091 0000 		lds r24,real_mods
 464 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 465               		.loc 1 57 0
 466 000e E091 0000 		lds r30,keyboard_report
 467 0012 F091 0000 		lds r31,keyboard_report+1
 468 0016 8081      		ld r24,Z
 469 0018 9091 0000 		lds r25,weak_mods
 470 001c 892B      		or r24,r25
 471 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 472               		.loc 1 59 0
 473 0020 9091 0000 		lds r25,oneshot_mods
 474 0024 9923      		tst r25
 475 0026 01F0      		breq .L37
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 476               		.loc 1 66 0
 477 0028 E091 0000 		lds r30,keyboard_report
 478 002c F091 0000 		lds r31,keyboard_report+1
 479 0030 8081      		ld r24,Z
 480 0032 892B      		or r24,r25
 481 0034 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 482               		.loc 1 67 0
 483 0036 0E94 0000 		call has_anykey
 484               	.LVL28:
 485 003a 8111      		cpse r24,__zero_reg__
 486               	.LBB18:
 487               	.LBB19:
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 488               		.loc 1 132 0
 489 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 490               	.L37:
 491               	.LBE19:
 492               	.LBE18:
  72:../../tmk_core/common/action_util.c **** }
 493               		.loc 1 72 0
 494 0040 8091 0000 		lds r24,keyboard_report
 495 0044 9091 0000 		lds r25,keyboard_report+1
 496 0048 0C94 0000 		jmp host_keyboard_send
 497               	.LVL29:
 498               		.cfi_endproc
 499               	.LFE1:
 501               		.section	.text.has_anymod,"ax",@progbits
 502               	.global	has_anymod
 504               	has_anymod:
 505               	.LFB18:
 156:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 506               		.loc 1 156 0
 507               		.cfi_startproc
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 0 */
 511               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c **** }
 512               		.loc 1 157 0
 513 0000 8091 0000 		lds r24,real_mods
 514 0004 0C94 0000 		jmp bitpop
 515               	.LVL30:
 516               		.cfi_endproc
 517               	.LFE18:
 519               		.section	.text.get_first_key,"ax",@progbits
 520               	.global	get_first_key
 522               	get_first_key:
 523               	.LFB19:
 161:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 524               		.loc 1 161 0
 525               		.cfi_startproc
 526               	/* prologue: function */
 527               	/* frame size = 0 */
 528               	/* stack size = 0 */
 529               	.L__stack_usage = 0
 180:../../tmk_core/common/action_util.c **** #endif
 530               		.loc 1 180 0
 531 0000 E091 0000 		lds r30,keyboard_report
 532 0004 F091 0000 		lds r31,keyboard_report+1
 182:../../tmk_core/common/action_util.c **** 
 533               		.loc 1 182 0
 534 0008 8281      		ldd r24,Z+2
 535               	/* epilogue start */
 536 000a 0895      		ret
 537               		.cfi_endproc
 538               	.LFE19:
 540               		.section	.bss.oneshot_mods,"aw",@nobits
 543               	oneshot_mods:
 544 0000 00        		.zero	1
 545               	.global	keyboard_report
 546               		.section	.data.keyboard_report,"aw",@progbits
 549               	keyboard_report:
 550 0000 0000      		.word	__compound_literal.0
 551               		.section	.bss.__compound_literal.0,"aw",@nobits
 554               	__compound_literal.0:
 555 0000 0000 0000 		.zero	8
 555      0000 0000 
 556               		.section	.bss.weak_mods,"aw",@nobits
 559               	weak_mods:
 560 0000 00        		.zero	1
 561               		.section	.bss.real_mods,"aw",@nobits
 564               	real_mods:
 565 0000 00        		.zero	1
 566               		.text
 567               	.Letext0:
 568               		.file 2 "c:\\avr-gcc-7.2.0-x64-mingw\\avr\\include\\stdint.h"
 569               		.file 3 "../../tmk_core/common/report.h"
 570               		.file 4 "../../tmk_core/common/host.h"
 571               		.file 5 "../../tmk_core/common/avr/xprintf.h"
 572               		.file 6 "../../tmk_core/common/debug.h"
 573               		.file 7 "../../tmk_core/common/action_util.h"
 574               		.file 8 "../../tmk_core/common/timer.h"
 575               		.file 9 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
C:\cygwin\tmp\cczgJF9b.s:2      *ABS*:000000000000003e __SP_H__
C:\cygwin\tmp\cczgJF9b.s:3      *ABS*:000000000000003d __SP_L__
C:\cygwin\tmp\cczgJF9b.s:4      *ABS*:000000000000003f __SREG__
C:\cygwin\tmp\cczgJF9b.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\cygwin\tmp\cczgJF9b.s:6      *ABS*:0000000000000001 __zero_reg__
C:\cygwin\tmp\cczgJF9b.s:13     .text.add_key:0000000000000000 add_key
C:\cygwin\tmp\cczgJF9b.s:549    .data.keyboard_report:0000000000000000 keyboard_report
C:\cygwin\tmp\cczgJF9b.s:83     .text.del_key:0000000000000000 del_key
C:\cygwin\tmp\cczgJF9b.s:128    .text.clear_keys:0000000000000000 clear_keys
C:\cygwin\tmp\cczgJF9b.s:166    .text.get_mods:0000000000000000 get_mods
C:\cygwin\tmp\cczgJF9b.s:564    .bss.real_mods:0000000000000000 real_mods
C:\cygwin\tmp\cczgJF9b.s:184    .text.add_mods:0000000000000000 add_mods
C:\cygwin\tmp\cczgJF9b.s:206    .text.del_mods:0000000000000000 del_mods
C:\cygwin\tmp\cczgJF9b.s:230    .text.set_mods:0000000000000000 set_mods
C:\cygwin\tmp\cczgJF9b.s:249    .text.clear_mods:0000000000000000 clear_mods
C:\cygwin\tmp\cczgJF9b.s:267    .text.get_weak_mods:0000000000000000 get_weak_mods
C:\cygwin\tmp\cczgJF9b.s:559    .bss.weak_mods:0000000000000000 weak_mods
C:\cygwin\tmp\cczgJF9b.s:285    .text.add_weak_mods:0000000000000000 add_weak_mods
C:\cygwin\tmp\cczgJF9b.s:307    .text.del_weak_mods:0000000000000000 del_weak_mods
C:\cygwin\tmp\cczgJF9b.s:331    .text.set_weak_mods:0000000000000000 set_weak_mods
C:\cygwin\tmp\cczgJF9b.s:350    .text.clear_weak_mods:0000000000000000 clear_weak_mods
C:\cygwin\tmp\cczgJF9b.s:368    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
C:\cygwin\tmp\cczgJF9b.s:543    .bss.oneshot_mods:0000000000000000 oneshot_mods
C:\cygwin\tmp\cczgJF9b.s:388    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
C:\cygwin\tmp\cczgJF9b.s:407    .text.has_anykey:0000000000000000 has_anykey
C:\cygwin\tmp\cczgJF9b.s:452    .text.send_keyboard_report:0000000000000000 send_keyboard_report
C:\cygwin\tmp\cczgJF9b.s:504    .text.has_anymod:0000000000000000 has_anymod
C:\cygwin\tmp\cczgJF9b.s:522    .text.get_first_key:0000000000000000 get_first_key
C:\cygwin\tmp\cczgJF9b.s:554    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
host_keyboard_send
bitpop
__do_copy_data
__do_clear_bss
